/*
 * Copyright (c) 2010, Oracle. All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * * Redistributions of source code must retain the above copyright notice,
 *   this list of conditions and the following disclaimer.
 *
 * * Redistributions in binary form must reproduce the above copyright notice,
 *   this list of conditions and the following disclaimer in the documentation
 *   and/or other materials provided with the distribution.
 *
 * * Neither the name of Oracle nor the names of its contributors
 *   may be used to endorse or promote products derived from this software without
 *   specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
 * THE POSSIBILITY OF SUCH DAMAGE.
 */

package Flexible_OpenSource_EBike_firmware_configuration_tool;

import java.io.BufferedReader;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import static javax.swing.JOptionPane.showMessageDialog;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;
import java.io.PrintWriter;
import java.io.BufferedWriter; 
import java.io.FileWriter;
import java.io.InputStreamReader;

public class Configuration_tool extends javax.swing.JFrame {
    
    /**
     * Creates new form ContactEditor
     */
    public Configuration_tool() {
        initComponents();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel1 = new javax.swing.JPanel();
        LABEL_throttle_type = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        throotle_type = new javax.swing.JComboBox<>();
        pas_number_of_magnets = new javax.swing.JTextField();
        LABEL_pas_number_of_magnets = new javax.swing.JLabel();
        torque_sensor_control_algorithm_output = new javax.swing.JComboBox<>();
        LABEL_torque_sensor_control_algorithm_output = new javax.swing.JLabel();
        throttle_control_algorithm_output = new javax.swing.JComboBox<>();
        LABEL_throttle_control_algorithm_output = new javax.swing.JLabel();
        LABEL_pedal_max_cadence_in_rpm = new javax.swing.JLabel();
        pedal_max_cadence_in_rpm = new javax.swing.JTextField();
        LABEL_pas_rotation_direction = new javax.swing.JLabel();
        pas_rotation_direction = new javax.swing.JComboBox<>();
        jSeparator2 = new javax.swing.JSeparator();
        jLabel2 = new javax.swing.JLabel();
        LABEL_LCD_assist_level_0 = new javax.swing.JLabel();
        LCD_assist_level_0 = new javax.swing.JTextField();
        LABEL_LCD_assist_level_1 = new javax.swing.JLabel();
        LCD_assist_level_1 = new javax.swing.JTextField();
        LABEL_LCD_assist_level_2 = new javax.swing.JLabel();
        LCD_assist_level_2 = new javax.swing.JTextField();
        LABEL_LCD_assist_level_3 = new javax.swing.JLabel();
        LCD_assist_level_3 = new javax.swing.JTextField();
        LABEL_LCD_assist_level_4 = new javax.swing.JLabel();
        LCD_assist_level_4 = new javax.swing.JTextField();
        LABEL_LCD_assist_level_5 = new javax.swing.JLabel();
        LCD_assist_level_5 = new javax.swing.JTextField();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel3 = new javax.swing.JLabel();
        LABEL_lion_cells_number = new javax.swing.JLabel();
        lion_cells_number = new javax.swing.JComboBox<>();
        jSeparator4 = new javax.swing.JSeparator();
        jLabel4 = new javax.swing.JLabel();
        LABEL_motor_rotor_offset_angle = new javax.swing.JLabel();
        motor_rotor_offset_angle = new javax.swing.JTextField();
        LABEL_foc_read_id_current_angle_adjust = new javax.swing.JLabel();
        foc_read_id_current_angle_adjust = new javax.swing.JTextField();
        LABEL_motor_start_interpolation_60_degrees = new javax.swing.JLabel();
        motor_start_interpolation_60_degrees = new javax.swing.JTextField();
        jSeparator6 = new javax.swing.JSeparator();
        jLabel6 = new javax.swing.JLabel();
        LABEL_motor_max_current = new javax.swing.JLabel();
        motor_max_current = new javax.swing.JTextField();
        LABEL_motor_max_regen_current = new javax.swing.JLabel();
        motor_max_regen_current = new javax.swing.JTextField();
        LABEL_pwm_duty_cycle_ramp_up_step = new javax.swing.JLabel();
        pwm_duty_cycle_ramp_up_step = new javax.swing.JTextField();
        LABEL_pwm_duty_cycle_ramp_down_step = new javax.swing.JLabel();
        pwm_duty_cycle_ramp_down_step = new javax.swing.JTextField();
        ButtonWriteConfiguration = new javax.swing.JButton();
        jSeparator7 = new javax.swing.JSeparator();
        ButtonWriteOptionBytes = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Configuration tool");
        setBounds(new java.awt.Rectangle(0, 0, 465, 800));
        setMinimumSize(new java.awt.Dimension(465, 800));
        setSize(new java.awt.Dimension(465, 810));

        jScrollPane1.setHorizontalScrollBar(null);
        jScrollPane1.setMinimumSize(new java.awt.Dimension(465, 800));
        jScrollPane1.setPreferredSize(new java.awt.Dimension(465, 810));
        jScrollPane1.setRequestFocusEnabled(false);

        jPanel1.setMinimumSize(new java.awt.Dimension(465, 2000));
        jPanel1.setName(""); // NOI18N
        jPanel1.setPreferredSize(new java.awt.Dimension(465, 2010));
        jPanel1.setRequestFocusEnabled(false);

        LABEL_throttle_type.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        LABEL_throttle_type.setText("Throttle type");

        jLabel1.setFont(new java.awt.Font("Ubuntu", 1, 24)); // NOI18N
        jLabel1.setText("Throttle type");

        throotle_type.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        throotle_type.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "throttle and/or PAS", "torque sensor" }));
        throotle_type.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                throotle_typeActionPerformed(evt);
            }
        });

        pas_number_of_magnets.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        pas_number_of_magnets.setText("5");
        pas_number_of_magnets.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pas_number_of_magnetsActionPerformed(evt);
            }
        });

        LABEL_pas_number_of_magnets.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        LABEL_pas_number_of_magnets.setText("PAS number of magnets");

        torque_sensor_control_algorithm_output.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        torque_sensor_control_algorithm_output.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "direct torque value", "human power (torque * cadence)" }));
        torque_sensor_control_algorithm_output.setVisible(false);
        torque_sensor_control_algorithm_output.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                torque_sensor_control_algorithm_outputActionPerformed(evt);
            }
        });

        LABEL_torque_sensor_control_algorithm_output.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        LABEL_torque_sensor_control_algorithm_output.setText("Torque sensor control algorithm output");
        LABEL_torque_sensor_control_algorithm_output.setVisible(false);

        throttle_control_algorithm_output.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        throttle_control_algorithm_output.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "direct PWM duty-cycle", "motor current and/or speed" }));
        throttle_control_algorithm_output.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                throttle_control_algorithm_outputActionPerformed(evt);
            }
        });

        LABEL_throttle_control_algorithm_output.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        LABEL_throttle_control_algorithm_output.setText("Throttle control algorithm output");

        LABEL_pedal_max_cadence_in_rpm.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        LABEL_pedal_max_cadence_in_rpm.setText("Pedal max cadence in RPM");

        pedal_max_cadence_in_rpm.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        pedal_max_cadence_in_rpm.setText("80");
        pedal_max_cadence_in_rpm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pedal_max_cadence_in_rpmActionPerformed(evt);
            }
        });

        LABEL_pas_rotation_direction.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        LABEL_pas_rotation_direction.setText("PAS rotation direction");

        pas_rotation_direction.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        pas_rotation_direction.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "left", "right" }));
        pas_rotation_direction.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pas_rotation_directionActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Ubuntu", 1, 24)); // NOI18N
        jLabel2.setText("LCD");

        LABEL_LCD_assist_level_0.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        LABEL_LCD_assist_level_0.setText("Assist level 0");

        LCD_assist_level_0.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        LCD_assist_level_0.setText("0.0");
        LCD_assist_level_0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LCD_assist_level_0ActionPerformed(evt);
            }
        });

        LABEL_LCD_assist_level_1.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        LABEL_LCD_assist_level_1.setText("Assist level 1");

        LCD_assist_level_1.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        LCD_assist_level_1.setText("0.2");
        LCD_assist_level_1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LCD_assist_level_1ActionPerformed(evt);
            }
        });

        LABEL_LCD_assist_level_2.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        LABEL_LCD_assist_level_2.setText("Assist level 2");

        LCD_assist_level_2.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        LCD_assist_level_2.setText("0.4");
        LCD_assist_level_2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LCD_assist_level_2ActionPerformed(evt);
            }
        });

        LABEL_LCD_assist_level_3.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        LABEL_LCD_assist_level_3.setText("Assist level 3");

        LCD_assist_level_3.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        LCD_assist_level_3.setText("0.6");
        LCD_assist_level_3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LCD_assist_level_3ActionPerformed(evt);
            }
        });

        LABEL_LCD_assist_level_4.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        LABEL_LCD_assist_level_4.setText("Assist level 4");

        LCD_assist_level_4.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        LCD_assist_level_4.setText("0.8");
        LCD_assist_level_4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LCD_assist_level_4ActionPerformed(evt);
            }
        });

        LABEL_LCD_assist_level_5.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        LABEL_LCD_assist_level_5.setText("Assist level 5");

        LCD_assist_level_5.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        LCD_assist_level_5.setText("1.0");
        LCD_assist_level_5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                LCD_assist_level_5ActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Ubuntu", 1, 24)); // NOI18N
        jLabel3.setText("Battery");

        LABEL_lion_cells_number.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        LABEL_lion_cells_number.setText("Battery voltage / Li-ion cells number");

        lion_cells_number.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        lion_cells_number.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "24V (7s)", "36V (10s)", "48V (13s)" }));
        lion_cells_number.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lion_cells_numberActionPerformed(evt);
            }
        });

        jLabel4.setFont(new java.awt.Font("Ubuntu", 1, 24)); // NOI18N
        jLabel4.setText("Motor");

        LABEL_motor_rotor_offset_angle.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        LABEL_motor_rotor_offset_angle.setText("Motor rotor offset angle");

        motor_rotor_offset_angle.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        motor_rotor_offset_angle.setText("202");
        motor_rotor_offset_angle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                motor_rotor_offset_angleActionPerformed(evt);
            }
        });

        LABEL_foc_read_id_current_angle_adjust.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        LABEL_foc_read_id_current_angle_adjust.setText("FOC read ID current angle adjust");

        foc_read_id_current_angle_adjust.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        foc_read_id_current_angle_adjust.setText("137");
        foc_read_id_current_angle_adjust.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                foc_read_id_current_angle_adjustActionPerformed(evt);
            }
        });

        LABEL_motor_start_interpolation_60_degrees.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        LABEL_motor_start_interpolation_60_degrees.setText("Motor start interpolation 60 degrees (eRPS)");

        motor_start_interpolation_60_degrees.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        motor_start_interpolation_60_degrees.setText("40");
        motor_start_interpolation_60_degrees.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                motor_start_interpolation_60_degreesActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Ubuntu", 1, 24)); // NOI18N
        jLabel6.setText("Motor controller");

        LABEL_motor_max_current.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        LABEL_motor_max_current.setText("Motor max current (amps)");

        motor_max_current.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        motor_max_current.setText("15");
        motor_max_current.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                motor_max_currentActionPerformed(evt);
            }
        });

        LABEL_motor_max_regen_current.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        LABEL_motor_max_regen_current.setText("Motor max regeneration/ebrake current  (amps)");

        motor_max_regen_current.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        motor_max_regen_current.setText("7");
        motor_max_regen_current.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                motor_max_regen_currentActionPerformed(evt);
            }
        });

        LABEL_pwm_duty_cycle_ramp_up_step.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        LABEL_pwm_duty_cycle_ramp_up_step.setText("PWM duty-cycle ramp up step");

        pwm_duty_cycle_ramp_up_step.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        pwm_duty_cycle_ramp_up_step.setText("25");
        pwm_duty_cycle_ramp_up_step.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pwm_duty_cycle_ramp_up_stepActionPerformed(evt);
            }
        });

        LABEL_pwm_duty_cycle_ramp_down_step.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        LABEL_pwm_duty_cycle_ramp_down_step.setText("PWM duty-cycle ramp down step");

        pwm_duty_cycle_ramp_down_step.setFont(new java.awt.Font("Ubuntu", 0, 18)); // NOI18N
        pwm_duty_cycle_ramp_down_step.setText("25");
        pwm_duty_cycle_ramp_down_step.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pwm_duty_cycle_ramp_down_stepActionPerformed(evt);
            }
        });

        ButtonWriteConfiguration.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        ButtonWriteConfiguration.setText("Write configuration");
        ButtonWriteConfiguration.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonWriteConfigurationActionPerformed(evt);
            }
        });

        ButtonWriteOptionBytes.setFont(new java.awt.Font("Ubuntu", 1, 18)); // NOI18N
        ButtonWriteOptionBytes.setText("Write option bytes");
        ButtonWriteOptionBytes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ButtonWriteOptionBytesActionPerformed(evt);
            }
        });

        org.jdesktop.layout.GroupLayout jPanel1Layout = new org.jdesktop.layout.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(25, 25, 25)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(jSeparator4)
                            .add(LABEL_foc_read_id_current_angle_adjust, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(pwm_duty_cycle_ramp_down_step, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 60, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(LABEL_pwm_duty_cycle_ramp_down_step, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
                            .add(pwm_duty_cycle_ramp_up_step, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 60, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(LABEL_pwm_duty_cycle_ramp_up_step, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
                            .add(motor_max_regen_current, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 60, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(LABEL_motor_max_regen_current, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
                            .add(motor_max_current, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 60, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel6)
                            .add(motor_start_interpolation_60_degrees, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 60, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(foc_read_id_current_angle_adjust, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 60, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(motor_rotor_offset_angle, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 60, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel4)
                            .add(jLabel3)
                            .add(lion_cells_number, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(jLabel1)
                            .add(throttle_control_algorithm_output, 0, 400, Short.MAX_VALUE)
                            .add(pas_number_of_magnets, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 60, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(pedal_max_cadence_in_rpm, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 60, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(jLabel2)
                            .add(LCD_assist_level_0, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 60, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(LCD_assist_level_1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 60, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(LCD_assist_level_4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 60, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(LCD_assist_level_5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 60, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(LCD_assist_level_2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 60, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(LCD_assist_level_3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 60, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                            .add(LABEL_throttle_control_algorithm_output, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(LABEL_throttle_type, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(throotle_type, 0, 400, Short.MAX_VALUE)
                            .add(LABEL_pedal_max_cadence_in_rpm, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(LABEL_pas_number_of_magnets, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(LABEL_torque_sensor_control_algorithm_output, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(torque_sensor_control_algorithm_output, 0, 400, Short.MAX_VALUE)
                            .add(LABEL_motor_max_current, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(LABEL_lion_cells_number, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(LABEL_motor_start_interpolation_60_degrees, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(LABEL_motor_rotor_offset_angle, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(jSeparator2)
                            .add(LABEL_pas_rotation_direction, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(jSeparator3)
                            .add(LABEL_LCD_assist_level_5, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(LABEL_LCD_assist_level_4, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(LABEL_LCD_assist_level_3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(LABEL_LCD_assist_level_2, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(LABEL_LCD_assist_level_1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(LABEL_LCD_assist_level_0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(jSeparator6)
                            .add(pas_rotation_direction, 0, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(jSeparator7)))
                    .add(jPanel1Layout.createSequentialGroup()
                        .add(75, 75, 75)
                        .add(jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                            .add(ButtonWriteOptionBytes, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .add(ButtonWriteConfiguration, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE))))
                .add(35, 35, 35))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel1)
                .add(20, 20, 20)
                .add(LABEL_throttle_type)
                .add(6, 6, 6)
                .add(throotle_type, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(15, 15, 15)
                .add(LABEL_throttle_control_algorithm_output)
                .add(6, 6, 6)
                .add(throttle_control_algorithm_output, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(15, 15, 15)
                .add(LABEL_torque_sensor_control_algorithm_output)
                .add(6, 6, 6)
                .add(torque_sensor_control_algorithm_output, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(15, 15, 15)
                .add(LABEL_pas_number_of_magnets)
                .add(6, 6, 6)
                .add(pas_number_of_magnets, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(15, 15, 15)
                .add(LABEL_pedal_max_cadence_in_rpm)
                .add(6, 6, 6)
                .add(pedal_max_cadence_in_rpm, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(15, 15, 15)
                .add(LABEL_pas_rotation_direction)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(pas_rotation_direction, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(15, 15, 15)
                .add(jSeparator2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 8, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(20, 20, 20)
                .add(jLabel2)
                .add(20, 20, 20)
                .add(LABEL_LCD_assist_level_0)
                .add(6, 6, 6)
                .add(LCD_assist_level_0, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(15, 15, 15)
                .add(LABEL_LCD_assist_level_1)
                .add(6, 6, 6)
                .add(LCD_assist_level_1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(15, 15, 15)
                .add(LABEL_LCD_assist_level_2)
                .add(6, 6, 6)
                .add(LCD_assist_level_2, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(15, 15, 15)
                .add(LABEL_LCD_assist_level_3)
                .add(6, 6, 6)
                .add(LCD_assist_level_3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(15, 15, 15)
                .add(LABEL_LCD_assist_level_4)
                .add(6, 6, 6)
                .add(LCD_assist_level_4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(15, 15, 15)
                .add(LABEL_LCD_assist_level_5)
                .add(6, 6, 6)
                .add(LCD_assist_level_5, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(15, 15, 15)
                .add(jSeparator3, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 8, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(20, 20, 20)
                .add(jLabel3)
                .add(20, 20, 20)
                .add(LABEL_lion_cells_number)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(lion_cells_number, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(17, 17, 17)
                .add(jSeparator4, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(20, 20, 20)
                .add(jLabel4)
                .add(20, 20, 20)
                .add(LABEL_motor_rotor_offset_angle)
                .add(6, 6, 6)
                .add(motor_rotor_offset_angle, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(15, 15, 15)
                .add(LABEL_foc_read_id_current_angle_adjust)
                .add(6, 6, 6)
                .add(foc_read_id_current_angle_adjust, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(15, 15, 15)
                .add(LABEL_motor_start_interpolation_60_degrees)
                .add(6, 6, 6)
                .add(motor_start_interpolation_60_degrees, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(15, 15, 15)
                .add(jSeparator6, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 8, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(20, 20, 20)
                .add(jLabel6)
                .add(20, 20, 20)
                .add(LABEL_motor_max_current)
                .add(6, 6, 6)
                .add(motor_max_current, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(15, 15, 15)
                .add(LABEL_motor_max_regen_current)
                .add(6, 6, 6)
                .add(motor_max_regen_current, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(15, 15, 15)
                .add(LABEL_pwm_duty_cycle_ramp_up_step)
                .add(6, 6, 6)
                .add(pwm_duty_cycle_ramp_up_step, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(15, 15, 15)
                .add(LABEL_pwm_duty_cycle_ramp_down_step)
                .add(6, 6, 6)
                .add(pwm_duty_cycle_ramp_down_step, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(15, 15, 15)
                .add(jSeparator7, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 8, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(35, 35, 35)
                .add(ButtonWriteOptionBytes, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 60, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .add(25, 25, 25)
                .add(ButtonWriteConfiguration, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 60, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jScrollPane1.setViewportView(jPanel1);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void throotle_typeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_throotle_typeActionPerformed
       if ("throttle and/or PAS".equals(throotle_type.getSelectedItem())){
            LABEL_throttle_control_algorithm_output.setVisible(true);
            throttle_control_algorithm_output.setVisible(true);
            LABEL_pas_number_of_magnets.setVisible(true);
            pas_number_of_magnets.setVisible(true);
            LABEL_pedal_max_cadence_in_rpm.setVisible(true);
            pedal_max_cadence_in_rpm.setVisible(true);
            LABEL_pas_rotation_direction.setVisible(true);
            pas_rotation_direction.setVisible(true);
   
            LABEL_torque_sensor_control_algorithm_output.setVisible(false);
            torque_sensor_control_algorithm_output.setVisible(false);       
       } else if ("torque sensor".equals(throotle_type.getSelectedItem())) {
            LABEL_torque_sensor_control_algorithm_output.setVisible(true);
            torque_sensor_control_algorithm_output.setVisible(true);   
           
            LABEL_throttle_control_algorithm_output.setVisible(false);
            throttle_control_algorithm_output.setVisible(false);
            LABEL_pas_number_of_magnets.setVisible(false);
            pas_number_of_magnets.setVisible(false);
            LABEL_pedal_max_cadence_in_rpm.setVisible(false);
            pedal_max_cadence_in_rpm.setVisible(false);
            LABEL_pas_rotation_direction.setVisible(false);
            pas_rotation_direction.setVisible(false);
       }
    }//GEN-LAST:event_throotle_typeActionPerformed

    private void throttle_control_algorithm_outputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_throttle_control_algorithm_outputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_throttle_control_algorithm_outputActionPerformed

    private void torque_sensor_control_algorithm_outputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_torque_sensor_control_algorithm_outputActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_torque_sensor_control_algorithm_outputActionPerformed

    private void pas_number_of_magnetsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pas_number_of_magnetsActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pas_number_of_magnetsActionPerformed

    private void pedal_max_cadence_in_rpmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pedal_max_cadence_in_rpmActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pedal_max_cadence_in_rpmActionPerformed

    private void pas_rotation_directionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pas_rotation_directionActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pas_rotation_directionActionPerformed

    private void LCD_assist_level_0ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LCD_assist_level_0ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_LCD_assist_level_0ActionPerformed

    private void LCD_assist_level_1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LCD_assist_level_1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_LCD_assist_level_1ActionPerformed

    private void LCD_assist_level_2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LCD_assist_level_2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_LCD_assist_level_2ActionPerformed

    private void LCD_assist_level_3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LCD_assist_level_3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_LCD_assist_level_3ActionPerformed

    private void LCD_assist_level_4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LCD_assist_level_4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_LCD_assist_level_4ActionPerformed

    private void LCD_assist_level_5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_LCD_assist_level_5ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_LCD_assist_level_5ActionPerformed

    private void lion_cells_numberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lion_cells_numberActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_lion_cells_numberActionPerformed

    private void motor_rotor_offset_angleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_motor_rotor_offset_angleActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_motor_rotor_offset_angleActionPerformed

    private void foc_read_id_current_angle_adjustActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_foc_read_id_current_angle_adjustActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_foc_read_id_current_angle_adjustActionPerformed

    private void motor_start_interpolation_60_degreesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_motor_start_interpolation_60_degreesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_motor_start_interpolation_60_degreesActionPerformed

    private void motor_max_currentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_motor_max_currentActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_motor_max_currentActionPerformed

    private void motor_max_regen_currentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_motor_max_regen_currentActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_motor_max_regen_currentActionPerformed

    private void pwm_duty_cycle_ramp_up_stepActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pwm_duty_cycle_ramp_up_stepActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pwm_duty_cycle_ramp_up_stepActionPerformed

    private void pwm_duty_cycle_ramp_down_stepActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pwm_duty_cycle_ramp_down_stepActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_pwm_duty_cycle_ramp_down_stepActionPerformed

    private void ButtonWriteOptionBytesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonWriteOptionBytesActionPerformed
        int n = JOptionPane.showConfirmDialog(
                null,
                "If you run this function with a brand new controller, the original firmware will be erased. This can't be undone. Are you sure?" ,
                "",
                JOptionPane.YES_NO_OPTION);

        if(n == JOptionPane.YES_OPTION)
        {
            try {
                if (OS.isWindows()) {
                    Runtime.getRuntime().exec("cmd /c start windows_scripts\\WriteOptionBytes");
                }
                else if (OS.isUnix()) {
                Process process = Runtime.getRuntime().exec("sh linux_scripts/write_option_bytes.sh");
                    
                try {
                    process.waitFor();
                } catch (InterruptedException ex) {
                    Logger.getLogger(Configuration_tool.class.getName()).log(Level.SEVERE, null, ex);
                }
                
//                // for debug: next code will output the feedback and exit number of the process
//                StringBuffer output = new StringBuffer();
//                BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
//                String line = "";                       
//                while ((line = reader.readLine())!= null) {
//                        output.append(line + "\n");
//                }
//                System.out.println("### " + output);
//                System.out.println ("exit: " + process.exitValue());
                
                process.destroy();
                }
            } catch (IOException e1) {
                showMessageDialog(null, "ERROR: ButtonWriteOptionBytes");
                e1.printStackTrace();
            }
        }
        else
        {
            // don't show nothing to user
        }
    }//GEN-LAST:event_ButtonWriteOptionBytesActionPerformed

    private void ButtonWriteConfigurationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ButtonWriteConfigurationActionPerformed
        PrintWriter pWriter = null; 
        try {
            if (OS.isWindows()) {
                pWriter = new PrintWriter(new BufferedWriter(new FileWriter("..\\config.h"))); // on Windows, slashs are different from Linux
            }
            else if (OS.isUnix()) {
                pWriter = new PrintWriter(new BufferedWriter(new FileWriter("../config.h")));
            }
            pWriter.println("/*\r\n" + 
                        " * config.h\r\n" + 
                        " *\r\n" + 
                        " *  Automatically created by Flexible OpenSource firmware - Configuration tool\r\n" + 
                        " *  Author: stancecoke\r\n" +
                        " *  Author: casainho\r\n" + 
                        " */\r\n" + 
                        "\r\n" + 
                        "#ifndef CONFIG_H_\r\n" + 
                        "#define CONFIG_H_\r\n"); 
            
            String TextToSave = null;
                    
            if (throotle_type.getSelectedItem().equals("throttle and/or PAS")) {
                TextToSave = "#define EBIKE_THROTTLE_TYPE EBIKE_THROTTLE_TYPE_THROTTLE_PAS";
            }
            else {
                TextToSave = "#define EBIKE_THROTTLE_TYPE EBIKE_THROTTLE_TYPE_TORQUE_SENSOR";
            }            
            pWriter.println(TextToSave);
            
            if (throttle_control_algorithm_output.getSelectedItem().equals("direct PWM duty-cycle")) {
                TextToSave = "#define EBIKE_THROTTLE_TYPE_THROTTLE_PAS_PWM_DUTY_CYCLE";
            }
            else {
                TextToSave = "#define EBIKE_THROTTLE_TYPE_THROTTLE_PAS_CURRENT_SPEED";
            }            
            pWriter.println(TextToSave);

            if (torque_sensor_control_algorithm_output.getSelectedItem().equals("direct torque value")) {
            }
            else {
                TextToSave = "#define EBIKE_THROTTLE_TYPE_TORQUE_SENSOR_HUMAN_POWER";
                pWriter.println(TextToSave);
            }            

            TextToSave = "#define PAS_NUMBER_MAGNETS " + pas_number_of_magnets.getText();
            pWriter.println(TextToSave);

            TextToSave = "#define PAS_MAX_CADENCE_RPM " + pedal_max_cadence_in_rpm.getText();
            pWriter.println(TextToSave);  
            
            if (pas_rotation_direction.getSelectedItem().equals("left")) {
                TextToSave = "#define PAS_DIRECTION PAS_DIRECTION_LEFT";
            }
            else {
                TextToSave = "#define PAS_DIRECTION PAS_DIRECTION_RIGHT";
            }            
            pWriter.println(TextToSave);
            
            TextToSave = "#define ASSIST_LEVEL_0 " + LCD_assist_level_0.getText();
            pWriter.println(TextToSave);

            TextToSave = "#define ASSIST_LEVEL_1 " + LCD_assist_level_1.getText();
            pWriter.println(TextToSave);            
            
            TextToSave = "#define ASSIST_LEVEL_2 " + LCD_assist_level_2.getText();
            pWriter.println(TextToSave);
            
            TextToSave = "#define ASSIST_LEVEL_3 " + LCD_assist_level_3.getText();
            pWriter.println(TextToSave);

            TextToSave = "#define ASSIST_LEVEL_4 " + LCD_assist_level_4.getText();
            pWriter.println(TextToSave);            
            
            TextToSave = "#define ASSIST_LEVEL_5 " + LCD_assist_level_5.getText();
            pWriter.println(TextToSave);
            
            if (lion_cells_number.getSelectedItem().equals("24V (7s)")) {
                TextToSave = "#define BATTERY_LI_ION_CELLS_NUMBER 7";
            } else if (lion_cells_number.getSelectedItem().equals("36V (10s)")) {
                TextToSave = "#define BATTERY_LI_ION_CELLS_NUMBER 10";
            } else if (lion_cells_number.getSelectedItem().equals("48V (13S)")) {
                TextToSave = "#define BATTERY_LI_ION_CELLS_NUMBER 13";
            }
            pWriter.println(TextToSave);
            
            TextToSave = "#define MOTOR_ROTOR_OFFSET_ANGLE " + motor_rotor_offset_angle.getText();
            pWriter.println(TextToSave);
            
            TextToSave = "#define FOC_READ_ID_CURRENT_ANGLE_ADJUST " + foc_read_id_current_angle_adjust.getText();
            pWriter.println(TextToSave);
            
            TextToSave = "#define MOTOR_ROTOR_ERPS_START_INTERPOLATION_60_DEGREES " + motor_start_interpolation_60_degrees.getText();
            pWriter.println(TextToSave);                     

            TextToSave = "#define ADC_MOTOR_CURRENT_MAX " + String.valueOf(Integer.valueOf(motor_max_current.getText()) * 2);
            pWriter.println(TextToSave);                    
            
            TextToSave = "#define ADC_MOTOR_REGEN_CURRENT_MAX " + String.valueOf(Integer.valueOf(motor_max_regen_current.getText()) * 2);
            pWriter.println(TextToSave);
            
            TextToSave = "#define PWM_DUTY_CYCLE_RAMP_UP_INVERSE_STEP " + pwm_duty_cycle_ramp_up_step.getText();
            pWriter.println(TextToSave);
            
            TextToSave = "#define PWM_DUTY_CYCLE_RAMP_DOWN_INVERSE_STEP " + pwm_duty_cycle_ramp_down_step.getText();
            pWriter.println(TextToSave);

            pWriter.println("\r\n#endif /* CONFIG_H_ */"); 

        } catch (IOException ioe) { 
            ioe.printStackTrace(); 
        } finally {
            if (pWriter != null) { 
                pWriter.flush(); 
                pWriter.close(); 
            } 
        }
        
        try {
            if (OS.isWindows()) {
                Process process = Runtime.getRuntime().exec("cmd /c start windows_scripts\\Start_Compiling");
            }
            else if (OS.isUnix()) {
                Process process = Runtime.getRuntime().exec("sh linux_scripts/build_and_flash.sh");
                try {
                    process.waitFor();
                } catch (InterruptedException ex) {
                    Logger.getLogger(Configuration_tool.class.getName()).log(Level.SEVERE, null, ex);
                }
                
//                // for debug: next code will output the feedback and exit number of the process
//                StringBuffer output = new StringBuffer();
//                BufferedReader reader = new BufferedReader(new InputStreamReader(process.getInputStream()));
//                String line = "";                       
//                while ((line = reader.readLine())!= null) {
//                        output.append(line + "\n");
//                }
//                System.out.println("### " + output);
//                System.out.println ("exit: " + process.exitValue());

                process.destroy();
            }
        } catch (IOException e1) {
            showMessageDialog(null, "ERROR: ButtonWriteConfiguration");
            e1.printStackTrace();
        }
    }//GEN-LAST:event_ButtonWriteConfigurationActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) throws ClassNotFoundException, InstantiationException {
            /* Set the Nimbus look and feel */
            //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
            /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
            * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
            */
//        try {
//            javax.swing.UIManager.LookAndFeelInfo[] installedLookAndFeels=javax.swing.UIManager.getInstalledLookAndFeels();
//            for (int idx=0; idx<installedLookAndFeels.length; idx++)
//                if ("Nimbus".equals(installedLookAndFeels[idx].getName())) {
//                    javax.swing.UIManager.setLookAndFeel(installedLookAndFeels[idx].getClassName());
//                    break;
//                }
//            
//        } catch (ClassNotFoundException ex) {
//            java.util.logging.Logger.getLogger(Configuration_tool.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (InstantiationException ex) {
//            java.util.logging.Logger.getLogger(Configuration_tool.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (IllegalAccessException ex) {
//            java.util.logging.Logger.getLogger(Configuration_tool.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
//            java.util.logging.Logger.getLogger(Configuration_tool.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
//        }
//</editor-fold>
//</editor-fold>

        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (IllegalAccessException ex) {
            Logger.getLogger(Configuration_tool.class.getName()).log(Level.SEVERE, null, ex);
        } catch (UnsupportedLookAndFeelException ex) {
            Logger.getLogger(Configuration_tool.class.getName()).log(Level.SEVERE, null, ex);
        }

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Configuration_tool().setVisible(true);
            }
        });
    }
    
    public class OSValidator {

        private String OS = System.getProperty("os.name").toLowerCase();

        public boolean isWindows() {
            return (OS.indexOf("win") >= 0);
        }

        public boolean isMac() {
            return (OS.indexOf("mac") >= 0);
        }

        public boolean isUnix() {
            return (OS.indexOf("nix") >= 0 || OS.indexOf("nux") >= 0 || OS.indexOf("aix") > 0 );
        }

        public boolean isSolaris() {
            return (OS.indexOf("sunos") >= 0);
        }
        
        public String getOS(){
            if (isWindows()) {
                return "win";
            } else if (isMac()) {
                return "osx";
            } else if (isUnix()) {
                return "uni";
            } else if (isSolaris()) {
                return "sol";
            } else {
                return "err";
            }
        }
    }
    
    private OSValidator OS = new OSValidator ();
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton ButtonWriteConfiguration;
    private javax.swing.JButton ButtonWriteOptionBytes;
    private javax.swing.JLabel LABEL_LCD_assist_level_0;
    private javax.swing.JLabel LABEL_LCD_assist_level_1;
    private javax.swing.JLabel LABEL_LCD_assist_level_2;
    private javax.swing.JLabel LABEL_LCD_assist_level_3;
    private javax.swing.JLabel LABEL_LCD_assist_level_4;
    private javax.swing.JLabel LABEL_LCD_assist_level_5;
    private javax.swing.JLabel LABEL_foc_read_id_current_angle_adjust;
    private javax.swing.JLabel LABEL_lion_cells_number;
    private javax.swing.JLabel LABEL_motor_max_current;
    private javax.swing.JLabel LABEL_motor_max_regen_current;
    private javax.swing.JLabel LABEL_motor_rotor_offset_angle;
    private javax.swing.JLabel LABEL_motor_start_interpolation_60_degrees;
    private javax.swing.JLabel LABEL_pas_number_of_magnets;
    private javax.swing.JLabel LABEL_pas_rotation_direction;
    private javax.swing.JLabel LABEL_pedal_max_cadence_in_rpm;
    private javax.swing.JLabel LABEL_pwm_duty_cycle_ramp_down_step;
    private javax.swing.JLabel LABEL_pwm_duty_cycle_ramp_up_step;
    private javax.swing.JLabel LABEL_throttle_control_algorithm_output;
    private javax.swing.JLabel LABEL_throttle_type;
    private javax.swing.JLabel LABEL_torque_sensor_control_algorithm_output;
    private javax.swing.JTextField LCD_assist_level_0;
    private javax.swing.JTextField LCD_assist_level_1;
    private javax.swing.JTextField LCD_assist_level_2;
    private javax.swing.JTextField LCD_assist_level_3;
    private javax.swing.JTextField LCD_assist_level_4;
    private javax.swing.JTextField LCD_assist_level_5;
    private javax.swing.JTextField foc_read_id_current_angle_adjust;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JSeparator jSeparator4;
    private javax.swing.JSeparator jSeparator6;
    private javax.swing.JSeparator jSeparator7;
    private javax.swing.JComboBox<String> lion_cells_number;
    private javax.swing.JTextField motor_max_current;
    private javax.swing.JTextField motor_max_regen_current;
    private javax.swing.JTextField motor_rotor_offset_angle;
    private javax.swing.JTextField motor_start_interpolation_60_degrees;
    private javax.swing.JTextField pas_number_of_magnets;
    private javax.swing.JComboBox<String> pas_rotation_direction;
    private javax.swing.JTextField pedal_max_cadence_in_rpm;
    private javax.swing.JTextField pwm_duty_cycle_ramp_down_step;
    private javax.swing.JTextField pwm_duty_cycle_ramp_up_step;
    private javax.swing.JComboBox<String> throotle_type;
    private javax.swing.JComboBox<String> throttle_control_algorithm_output;
    private javax.swing.JComboBox<String> torque_sensor_control_algorithm_output;
    // End of variables declaration//GEN-END:variables
    
}
