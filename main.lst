                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.6.0 #9615 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module main
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl main
                                     12 	.globl printf
                                     13 	.globl putchar
                                     14 ;--------------------------------------------------------
                                     15 ; ram data
                                     16 ;--------------------------------------------------------
                                     17 	.area DATA
                                     18 ;--------------------------------------------------------
                                     19 ; ram data
                                     20 ;--------------------------------------------------------
                                     21 	.area INITIALIZED
                                     22 ;--------------------------------------------------------
                                     23 ; Stack segment in internal ram 
                                     24 ;--------------------------------------------------------
                                     25 	.area	SSEG
                                     26 	.globl	_fp_
      000000                         27 _fp_:
      000000                         28 	.ds	2
                                     29 
      000002                         30 __start__stack:
      000002                         31 	.ds	1
                                     32 
                                     33 ;--------------------------------------------------------
                                     34 ; absolute external ram data
                                     35 ;--------------------------------------------------------
                                     36 	.area DABS (ABS)
                                     37 ;--------------------------------------------------------
                                     38 ; interrupt vector 
                                     39 ;--------------------------------------------------------
                                     40 	.area HOME
      000000                         41 __interrupt_vect:
      000000 82v00u00u00             42 	int s_GSINIT ;reset
      000004 82 00 00 00             43 	int 0x0000 ;trap
      000008 82 00 00 00             44 	int 0x0000 ;int0
      00000C 82 00 00 00             45 	int 0x0000 ;int1
      000010 82 00 00 00             46 	int 0x0000 ;int2
      000014 82 00 00 00             47 	int 0x0000 ;int3
      000018 82 00 00 00             48 	int 0x0000 ;int4
      00001C 82 00 00 00             49 	int 0x0000 ;int5
      000020 82 00 00 00             50 	int 0x0000 ;int6
      000024 82 00 00 00             51 	int 0x0000 ;int7
      000028 82 00 00 00             52 	int 0x0000 ;int8
      00002C 82 00 00 00             53 	int 0x0000 ;int9
      000030 82 00 00 00             54 	int 0x0000 ;int10
      000034 82 00 00 00             55 	int 0x0000 ;int11
      000038 82 00 00 00             56 	int 0x0000 ;int12
      00003C 82 00 00 00             57 	int 0x0000 ;int13
      000040 82 00 00 00             58 	int 0x0000 ;int14
      000044 82 00 00 00             59 	int 0x0000 ;int15
      000048 82 00 00 00             60 	int 0x0000 ;int16
      00004C 82 00 00 00             61 	int 0x0000 ;int17
      000050 82 00 00 00             62 	int 0x0000 ;int18
      000054 82 00 00 00             63 	int 0x0000 ;int19
      000058 82 00 00 00             64 	int 0x0000 ;int20
      00005C 82 00 00 00             65 	int 0x0000 ;int21
      000060 82 00 00 00             66 	int 0x0000 ;int22
      000064 82 00 00 00             67 	int 0x0000 ;int23
      000068 82 00 00 00             68 	int 0x0000 ;int24
      00006C 82 00 00 00             69 	int 0x0000 ;int25
      000070 82 00 00 00             70 	int 0x0000 ;int26
      000074 82 00 00 00             71 	int 0x0000 ;int27
      000078 82 00 00 00             72 	int 0x0000 ;int28
      00007C 82 00 00 00             73 	int 0x0000 ;int29
                                     74 ;--------------------------------------------------------
                                     75 ; global & static initialisations
                                     76 ;--------------------------------------------------------
                                     77 	.area HOME
                                     78 	.area GSINIT
                                     79 	.area GSFINAL
                                     80 	.area GSINIT
                                     81 .globl start
      000000                         82 start:
      000000                         83 __sdcc_gs_init_startup:
      000000 AE 07 FF         [ 2]   84 	ldw x, #0x7ff
      000003 96               [ 1]   85 	ldw x, sp
      000004                         86 __sdcc_init_data:
                                     87 ; stm8_genXINIT() start
      000004 AEr00r00         [ 2]   88 	ldw x, #l_DATA
      000007 27 07            [ 1]   89 	jreq	00002$
      000009                         90 00001$:
      000009 72 4FuFFuFF      [ 1]   91 	clr (s_DATA - 1, x)
      00000D 5A               [ 2]   92 	decw x
      00000E 26 F9            [ 1]   93 	jrne	00001$
      000010                         94 00002$:
      000010 AEr00r00         [ 2]   95 	ldw	x, #l_INITIALIZER
      000013 27 09            [ 1]   96 	jreq	00004$
      000015                         97 00003$:
      000015 D6uFFuFF         [ 1]   98 	ld	a, (s_INITIALIZER - 1, x)
      000018 D7uFFuFF         [ 1]   99 	ld	(s_INITIALIZED - 1, x), a
      00001B 5A               [ 2]  100 	decw	x
      00001C 26 F7            [ 1]  101 	jrne	00003$
      00001E                        102 00004$:
                                    103 ; stm8_genXINIT() end
                                    104 	.area GSFINAL
      000000 CCr00r80         [ 2]  105 	jp	__sdcc_program_startup
                                    106 ;--------------------------------------------------------
                                    107 ; Home
                                    108 ;--------------------------------------------------------
                                    109 	.area HOME
                                    110 	.area HOME
      000080                        111 __sdcc_program_startup:
      000080 CCr00r23         [ 2]  112 	jp	main
                                    113 ;	return from main will return to caller
                                    114 ;--------------------------------------------------------
                                    115 ; code
                                    116 ;--------------------------------------------------------
                                    117 	.area CODE
                           000000   118 	G$putchar$0$0 ==.
                           000000   119 	C$main.c$19$0$0 ==.
                                    120 ;	main.c: 19: void putchar(char c)
                                    121 ; genLabel
                                    122 ;	-----------------------------------------
                                    123 ;	 function putchar
                                    124 ;	-----------------------------------------
                                    125 ;	Register assignment is optimal.
                                    126 ;	Stack space usage: 0 bytes.
      000000                        127 putchar:
      000000 3Bu00u01         [ 1]  128 	push	_fp_+1
      000003 3Bu00u00         [ 1]  129 	push	_fp_
      000006 90 96            [ 1]  130 	ldw	y, sp
      000008 90 CFu00u00      [ 2]  131 	ldw	_fp_, y
                           00000C   132 	C$main.c$21$1$12 ==.
                                    133 ;	main.c: 21: while(!(UART1_SR & UART_SR_TXE));
                                    134 ; genLabel
      00000C                        135 00101$:
                                    136 ; genPointerGet
      00000C AE 52 30         [ 2]  137 	ldw	x, #0x5230
      00000F F6               [ 1]  138 	ld	a, (x)
                                    139 ; genAnd
      000010 4D               [ 1]  140 	tnz	a
      000011 2B 03            [ 1]  141 	jrmi	00114$
      000013 CCr00r0C         [ 2]  142 	jp	00101$
      000016                        143 00114$:
                                    144 ; skipping generated iCode
                           000016   145 	C$main.c$23$1$12 ==.
                                    146 ;	main.c: 23: UART1_DR = c;
                                    147 ; genPointerSet
      000016 AE 52 31         [ 2]  148 	ldw	x, #0x5231
      000019 7B 05            [ 1]  149 	ld	a, (0x05, sp)
      00001B F7               [ 1]  150 	ld	(x), a
                                    151 ; genLabel
      00001C                        152 00104$:
                                    153 ; genEndFunction
                           00001C   154 	C$main.c$24$1$12 ==.
                           00001C   155 	XG$putchar$0$0 ==.
      00001C 32u00u00         [ 1]  156 	pop	_fp_
      00001F 32u00u01         [ 1]  157 	pop	_fp_+1
      000022 81               [ 4]  158 	ret
                           000023   159 	G$main$0$0 ==.
                           000023   160 	C$main.c$26$1$12 ==.
                                    161 ;	main.c: 26: void main(void)
                                    162 ; genLabel
                                    163 ;	-----------------------------------------
                                    164 ;	 function main
                                    165 ;	-----------------------------------------
                                    166 ;	Register assignment might be sub-optimal.
                                    167 ;	Stack space usage: 8 bytes.
      000023                        168 main:
      000023 3Bu00u01         [ 1]  169 	push	_fp_+1
      000026 3Bu00u00         [ 1]  170 	push	_fp_
      000029 90 96            [ 1]  171 	ldw	y, sp
      00002B 90 CFu00u00      [ 2]  172 	ldw	_fp_, y
      00002F 52 08            [ 2]  173 	sub	sp, #8
                           000031   174 	C$main.c$30$1$14 ==.
                                    175 ;	main.c: 30: CLK_DIVR = 0x00; // Set the frequency to 16 MHz
                                    176 ; genPointerSet
      000031 35 00 50 C6      [ 1]  177 	mov	0x50c6+0, #0x00
                           000035   178 	C$main.c$31$1$14 ==.
                                    179 ;	main.c: 31: CLK_PCKENR1 = 0xFF; // Enable peripherals
                                    180 ; genPointerSet
      000035 35 FF 50 C7      [ 1]  181 	mov	0x50c7+0, #0xff
                           000039   182 	C$main.c$33$1$14 ==.
                                    183 ;	main.c: 33: UART1_CR2 = UART_CR2_TEN; // Allow TX and RX
                                    184 ; genPointerSet
      000039 35 08 52 35      [ 1]  185 	mov	0x5235+0, #0x08
                           00003D   186 	C$main.c$34$1$14 ==.
                                    187 ;	main.c: 34: UART1_CR3 &= ~(UART_CR3_STOP1 | UART_CR3_STOP2); // 1 stop bit
                                    188 ; genPointerGet
      00003D AE 52 36         [ 2]  189 	ldw	x, #0x5236
      000040 F6               [ 1]  190 	ld	a, (x)
                                    191 ; genAnd
      000041 A4 CF            [ 1]  192 	and	a, #0xcf
                                    193 ; genPointerSet
      000043 AE 52 36         [ 2]  194 	ldw	x, #0x5236
      000046 F7               [ 1]  195 	ld	(x), a
                           000047   196 	C$main.c$35$1$14 ==.
                                    197 ;	main.c: 35: UART1_BRR2 = 0x03; UART1_BRR1 = 0x68; // 9600 baud
                                    198 ; genPointerSet
      000047 35 03 52 33      [ 1]  199 	mov	0x5233+0, #0x03
                                    200 ; genPointerSet
      00004B 35 68 52 32      [ 1]  201 	mov	0x5232+0, #0x68
                                    202 ; genLabel
      00004F                        203 00106$:
                           00004F   204 	C$main.c$39$2$15 ==.
                                    205 ;	main.c: 39: printf("Hello World!!\n");
                                    206 ; genAddrOf
      00004F AEr00r98         [ 2]  207 	ldw	x, #__str_0+0
                                    208 ; genCast
                                    209 ; genAssign
                                    210 ; genIPush
      000052 89               [ 2]  211 	pushw	x
                                    212 ; genCall
      000053 CDr00r00         [ 4]  213 	call	printf
      000056 5B 02            [ 2]  214 	addw	sp, #2
                           000058   215 	C$main.c$40$2$15 ==.
                                    216 ;	main.c: 40: printf("OpenSource BMSBattery S controllers firmware\n\n");
                                    217 ; genAddrOf
      000058 AEr00rA7         [ 2]  218 	ldw	x, #__str_1+0
                                    219 ; genCast
                                    220 ; genAssign
                                    221 ; genIPush
      00005B 89               [ 2]  222 	pushw	x
                                    223 ; genCall
      00005C CDr00r00         [ 4]  224 	call	printf
      00005F 5B 02            [ 2]  225 	addw	sp, #2
                           000061   226 	C$main.c$42$2$15 ==.
                                    227 ;	main.c: 42: for(i = 0; i < 147456; i++); // delay of 1s
                                    228 ; genAssign
      000061 AE 40 00         [ 2]  229 	ldw	x, #0x4000
      000064 1F 03            [ 2]  230 	ldw	(0x03, sp), x
      000066 A6 02            [ 1]  231 	ld	a, #0x02
      000068 0F 01            [ 1]  232 	clr	(0x01, sp)
                                    233 ; genLabel
      00006A                        234 00105$:
                                    235 ; genMinus
      00006A 1E 03            [ 2]  236 	ldw	x, (0x03, sp)
      00006C 1D 00 01         [ 2]  237 	subw	x, #0x0001
      00006F 1F 07            [ 2]  238 	ldw	(0x07, sp), x
      000071 A2 00            [ 1]  239 	sbc	a, #0x00
      000073 97               [ 1]  240 	ld	xl, a
      000074 7B 01            [ 1]  241 	ld	a, (0x01, sp)
      000076 A2 00            [ 1]  242 	sbc	a, #0x00
      000078 95               [ 1]  243 	ld	xh, a
                                    244 ; genAssign
      000079 02               [ 1]  245 	rlwa	x
      00007A 6B 01            [ 1]  246 	ld	(0x01, sp), a
      00007C 01               [ 1]  247 	rrwa	x
      00007D 16 07            [ 2]  248 	ldw	y, (0x07, sp)
      00007F 17 03            [ 2]  249 	ldw	(0x03, sp), y
      000081 9F               [ 1]  250 	ld	a, xl
                                    251 ; genIfx
      000082 16 07            [ 2]  252 	ldw	y, (0x07, sp)
      000084 26 03            [ 1]  253 	jrne	00122$
      000086 5D               [ 2]  254 	tnzw	x
      000087 27 03            [ 1]  255 	jreq	00123$
      000089                        256 00122$:
      000089 CCr00r6A         [ 2]  257 	jp	00105$
      00008C                        258 00123$:
                                    259 ; genGoto
      00008C CCr00r4F         [ 2]  260 	jp	00106$
                                    261 ; genLabel
      00008F                        262 00108$:
                                    263 ; genEndFunction
      00008F 5B 08            [ 2]  264 	addw	sp, #8
                           000091   265 	C$main.c$44$1$14 ==.
                           000091   266 	XG$main$0$0 ==.
      000091 32u00u00         [ 1]  267 	pop	_fp_
      000094 32u00u01         [ 1]  268 	pop	_fp_+1
      000097 81               [ 4]  269 	ret
                                    270 	.area CODE
                           000098   271 Fmain$__str_0$0$0 == .
      000098                        272 __str_0:
      000098 48 65 6C 6C 6F 20 57   273 	.ascii "Hello World!!"
             6F 72 6C 64 21 21
      0000A5 0A                     274 	.db 0x0a
      0000A6 00                     275 	.db 0x00
                           0000A7   276 Fmain$__str_1$0$0 == .
      0000A7                        277 __str_1:
      0000A7 4F 70 65 6E 53 6F 75   278 	.ascii "OpenSource BMSBattery S controllers firmware"
             72 63 65 20 42 4D 53
             42 61 74 74 65 72 79
             20 53 20 63 6F 6E 74
             72 6F 6C 6C 65 72 73
             20 66 69 72 6D 77 61
             72 65
      0000D3 0A                     279 	.db 0x0a
      0000D4 0A                     280 	.db 0x0a
      0000D5 00                     281 	.db 0x00
                                    282 	.area INITIALIZER
                                    283 	.area CABS (ABS)
