                                      1 ;--------------------------------------------------------
                                      2 ; File Created by SDCC : free open source ANSI-C Compiler
                                      3 ; Version 3.6.0 #9615 (Linux)
                                      4 ;--------------------------------------------------------
                                      5 	.module stm8s_adc1
                                      6 	.optsdcc -mstm8
                                      7 	
                                      8 ;--------------------------------------------------------
                                      9 ; Public variables in this module
                                     10 ;--------------------------------------------------------
                                     11 	.globl _ADC1_DeInit
                                     12 	.globl _ADC1_Init
                                     13 	.globl _ADC1_Cmd
                                     14 	.globl _ADC1_ScanModeCmd
                                     15 	.globl _ADC1_DataBufferCmd
                                     16 	.globl _ADC1_ITConfig
                                     17 	.globl _ADC1_PrescalerConfig
                                     18 	.globl _ADC1_SchmittTriggerConfig
                                     19 	.globl _ADC1_ConversionConfig
                                     20 	.globl _ADC1_ExternalTriggerConfig
                                     21 	.globl _ADC1_StartConversion
                                     22 	.globl _ADC1_GetConversionValue
                                     23 	.globl _ADC1_AWDChannelConfig
                                     24 	.globl _ADC1_SetHighThreshold
                                     25 	.globl _ADC1_SetLowThreshold
                                     26 	.globl _ADC1_GetBufferValue
                                     27 	.globl _ADC1_GetAWDChannelStatus
                                     28 	.globl _ADC1_GetFlagStatus
                                     29 	.globl _ADC1_ClearFlag
                                     30 	.globl _ADC1_GetITStatus
                                     31 	.globl _ADC1_ClearITPendingBit
                                     32 ;--------------------------------------------------------
                                     33 ; ram data
                                     34 ;--------------------------------------------------------
                                     35 	.area DATA
                                     36 ;--------------------------------------------------------
                                     37 ; ram data
                                     38 ;--------------------------------------------------------
                                     39 	.area INITIALIZED
                                     40 ;--------------------------------------------------------
                                     41 ; absolute external ram data
                                     42 ;--------------------------------------------------------
                                     43 	.area DABS (ABS)
                                     44 ;--------------------------------------------------------
                                     45 ; global & static initialisations
                                     46 ;--------------------------------------------------------
                                     47 	.area HOME
                                     48 	.area GSINIT
                                     49 	.area GSFINAL
                                     50 	.area GSINIT
                                     51 ;--------------------------------------------------------
                                     52 ; Home
                                     53 ;--------------------------------------------------------
                                     54 	.area HOME
                                     55 	.area HOME
                                     56 ;--------------------------------------------------------
                                     57 ; code
                                     58 ;--------------------------------------------------------
                                     59 	.area CODE
                           000000    60 	Sstm8s_adc1$ADC1_DeInit$0 ==.
                                     61 ;	StdPeriphLib/src/stm8s_adc1.c: 52: void ADC1_DeInit(void)
                                     62 ;	-----------------------------------------
                                     63 ;	 function ADC1_DeInit
                                     64 ;	-----------------------------------------
      000000                         65 _ADC1_DeInit:
      000000 3Bu00u01         [ 1]   66 	push	_fp_+1
      000003 3Bu00u00         [ 1]   67 	push	_fp_
      000006 90 96            [ 1]   68 	ldw	y, sp
      000008 90 CFu00u00      [ 2]   69 	ldw	_fp_, y
                           00000C    70 	Sstm8s_adc1$ADC1_DeInit$1 ==.
                           00000C    71 	Sstm8s_adc1$ADC1_DeInit$2 ==.
                                     72 ;	StdPeriphLib/src/stm8s_adc1.c: 54: ADC1->CSR  = ADC1_CSR_RESET_VALUE;
      00000C 35 00 54 00      [ 1]   73 	mov	0x5400+0, #0x00
                           000010    74 	Sstm8s_adc1$ADC1_DeInit$3 ==.
                                     75 ;	StdPeriphLib/src/stm8s_adc1.c: 55: ADC1->CR1  = ADC1_CR1_RESET_VALUE;
      000010 35 00 54 01      [ 1]   76 	mov	0x5401+0, #0x00
                           000014    77 	Sstm8s_adc1$ADC1_DeInit$4 ==.
                                     78 ;	StdPeriphLib/src/stm8s_adc1.c: 56: ADC1->CR2  = ADC1_CR2_RESET_VALUE;
      000014 35 00 54 02      [ 1]   79 	mov	0x5402+0, #0x00
                           000018    80 	Sstm8s_adc1$ADC1_DeInit$5 ==.
                                     81 ;	StdPeriphLib/src/stm8s_adc1.c: 57: ADC1->CR3  = ADC1_CR3_RESET_VALUE;
      000018 35 00 54 03      [ 1]   82 	mov	0x5403+0, #0x00
                           00001C    83 	Sstm8s_adc1$ADC1_DeInit$6 ==.
                                     84 ;	StdPeriphLib/src/stm8s_adc1.c: 58: ADC1->TDRH = ADC1_TDRH_RESET_VALUE;
      00001C 35 00 54 06      [ 1]   85 	mov	0x5406+0, #0x00
                           000020    86 	Sstm8s_adc1$ADC1_DeInit$7 ==.
                                     87 ;	StdPeriphLib/src/stm8s_adc1.c: 59: ADC1->TDRL = ADC1_TDRL_RESET_VALUE;
      000020 35 00 54 07      [ 1]   88 	mov	0x5407+0, #0x00
                           000024    89 	Sstm8s_adc1$ADC1_DeInit$8 ==.
                                     90 ;	StdPeriphLib/src/stm8s_adc1.c: 60: ADC1->HTRH = ADC1_HTRH_RESET_VALUE;
      000024 35 FF 54 08      [ 1]   91 	mov	0x5408+0, #0xff
                           000028    92 	Sstm8s_adc1$ADC1_DeInit$9 ==.
                                     93 ;	StdPeriphLib/src/stm8s_adc1.c: 61: ADC1->HTRL = ADC1_HTRL_RESET_VALUE;
      000028 35 03 54 09      [ 1]   94 	mov	0x5409+0, #0x03
                           00002C    95 	Sstm8s_adc1$ADC1_DeInit$10 ==.
                                     96 ;	StdPeriphLib/src/stm8s_adc1.c: 62: ADC1->LTRH = ADC1_LTRH_RESET_VALUE;
      00002C 35 00 54 0A      [ 1]   97 	mov	0x540a+0, #0x00
                           000030    98 	Sstm8s_adc1$ADC1_DeInit$11 ==.
                                     99 ;	StdPeriphLib/src/stm8s_adc1.c: 63: ADC1->LTRL = ADC1_LTRL_RESET_VALUE;
      000030 35 00 54 0B      [ 1]  100 	mov	0x540b+0, #0x00
                           000034   101 	Sstm8s_adc1$ADC1_DeInit$12 ==.
                                    102 ;	StdPeriphLib/src/stm8s_adc1.c: 64: ADC1->AWCRH = ADC1_AWCRH_RESET_VALUE;
      000034 35 00 54 0E      [ 1]  103 	mov	0x540e+0, #0x00
                           000038   104 	Sstm8s_adc1$ADC1_DeInit$13 ==.
                                    105 ;	StdPeriphLib/src/stm8s_adc1.c: 65: ADC1->AWCRL = ADC1_AWCRL_RESET_VALUE;
      000038 35 00 54 0F      [ 1]  106 	mov	0x540f+0, #0x00
                           00003C   107 	Sstm8s_adc1$ADC1_DeInit$14 ==.
                                    108 ;	StdPeriphLib/src/stm8s_adc1.c: 66: }
                           00003C   109 	Sstm8s_adc1$ADC1_DeInit$15 ==.
                           00003C   110 	XG$ADC1_DeInit$0$0 ==.
      00003C 32u00u00         [ 1]  111 	pop	_fp_
      00003F 32u00u01         [ 1]  112 	pop	_fp_+1
      000042 81               [ 4]  113 	ret
                           000043   114 	Sstm8s_adc1$ADC1_DeInit$16 ==.
                           000043   115 	Sstm8s_adc1$ADC1_Init$17 ==.
                                    116 ;	StdPeriphLib/src/stm8s_adc1.c: 88: void ADC1_Init(ADC1_ConvMode_TypeDef ADC1_ConversionMode, ADC1_Channel_TypeDef ADC1_Channel, ADC1_PresSel_TypeDef ADC1_PrescalerSelection, ADC1_ExtTrig_TypeDef ADC1_ExtTrigger, FunctionalState ADC1_ExtTriggerState, ADC1_Align_TypeDef ADC1_Align, ADC1_SchmittTrigg_TypeDef ADC1_SchmittTriggerChannel, FunctionalState ADC1_SchmittTriggerState)
                                    117 ;	-----------------------------------------
                                    118 ;	 function ADC1_Init
                                    119 ;	-----------------------------------------
      000043                        120 _ADC1_Init:
      000043 3Bu00u01         [ 1]  121 	push	_fp_+1
      000046 3Bu00u00         [ 1]  122 	push	_fp_
      000049 90 96            [ 1]  123 	ldw	y, sp
      00004B 90 CFu00u00      [ 2]  124 	ldw	_fp_, y
                           00004F   125 	Sstm8s_adc1$ADC1_Init$18 ==.
                           00004F   126 	Sstm8s_adc1$ADC1_Init$19 ==.
                                    127 ;	StdPeriphLib/src/stm8s_adc1.c: 93: ADC1_ConversionConfig(ADC1_ConversionMode, ADC1_Channel, ADC1_Align);
      00004F 7B 0A            [ 1]  128 	ld	a, (0x0a, sp)
      000051 88               [ 1]  129 	push	a
      000052 7B 07            [ 1]  130 	ld	a, (0x07, sp)
      000054 88               [ 1]  131 	push	a
      000055 7B 07            [ 1]  132 	ld	a, (0x07, sp)
      000057 88               [ 1]  133 	push	a
      000058 CDr02r15         [ 4]  134 	call	_ADC1_ConversionConfig
      00005B 5B 03            [ 2]  135 	addw	sp, #3
                           00005D   136 	Sstm8s_adc1$ADC1_Init$20 ==.
                                    137 ;	StdPeriphLib/src/stm8s_adc1.c: 95: ADC1_PrescalerConfig(ADC1_PrescalerSelection);
      00005D 7B 07            [ 1]  138 	ld	a, (0x07, sp)
      00005F 88               [ 1]  139 	push	a
      000060 CDr01r26         [ 4]  140 	call	_ADC1_PrescalerConfig
      000063 84               [ 1]  141 	pop	a
                           000064   142 	Sstm8s_adc1$ADC1_Init$21 ==.
                                    143 ;	StdPeriphLib/src/stm8s_adc1.c: 100: ADC1_ExternalTriggerConfig(ADC1_ExtTrigger, ADC1_ExtTriggerState);
      000064 7B 09            [ 1]  144 	ld	a, (0x09, sp)
      000066 88               [ 1]  145 	push	a
      000067 7B 09            [ 1]  146 	ld	a, (0x09, sp)
      000069 88               [ 1]  147 	push	a
      00006A CDr02r60         [ 4]  148 	call	_ADC1_ExternalTriggerConfig
      00006D 5B 02            [ 2]  149 	addw	sp, #2
                           00006F   150 	Sstm8s_adc1$ADC1_Init$22 ==.
                                    151 ;	StdPeriphLib/src/stm8s_adc1.c: 105: ADC1_SchmittTriggerConfig(ADC1_SchmittTriggerChannel, ADC1_SchmittTriggerState);
      00006F 7B 0C            [ 1]  152 	ld	a, (0x0c, sp)
      000071 88               [ 1]  153 	push	a
      000072 7B 0C            [ 1]  154 	ld	a, (0x0c, sp)
      000074 88               [ 1]  155 	push	a
      000075 CDr01r4A         [ 4]  156 	call	_ADC1_SchmittTriggerConfig
      000078 5B 02            [ 2]  157 	addw	sp, #2
                           00007A   158 	Sstm8s_adc1$ADC1_Init$23 ==.
                                    159 ;	StdPeriphLib/src/stm8s_adc1.c: 108: ADC1->CR1 |= ADC1_CR1_ADON;
      00007A 72 10 54 01      [ 1]  160 	bset	0x5401, #0
                           00007E   161 	Sstm8s_adc1$ADC1_Init$24 ==.
                                    162 ;	StdPeriphLib/src/stm8s_adc1.c: 109: }
                           00007E   163 	Sstm8s_adc1$ADC1_Init$25 ==.
                           00007E   164 	XG$ADC1_Init$0$0 ==.
      00007E 32u00u00         [ 1]  165 	pop	_fp_
      000081 32u00u01         [ 1]  166 	pop	_fp_+1
      000084 81               [ 4]  167 	ret
                           000085   168 	Sstm8s_adc1$ADC1_Init$26 ==.
                           000085   169 	Sstm8s_adc1$ADC1_Cmd$27 ==.
                                    170 ;	StdPeriphLib/src/stm8s_adc1.c: 116: void ADC1_Cmd(FunctionalState NewState)
                                    171 ;	-----------------------------------------
                                    172 ;	 function ADC1_Cmd
                                    173 ;	-----------------------------------------
      000085                        174 _ADC1_Cmd:
      000085 3Bu00u01         [ 1]  175 	push	_fp_+1
      000088 3Bu00u00         [ 1]  176 	push	_fp_
      00008B 90 96            [ 1]  177 	ldw	y, sp
      00008D 90 CFu00u00      [ 2]  178 	ldw	_fp_, y
                           000091   179 	Sstm8s_adc1$ADC1_Cmd$28 ==.
                           000091   180 	Sstm8s_adc1$ADC1_Cmd$29 ==.
                                    181 ;	StdPeriphLib/src/stm8s_adc1.c: 121: if (NewState != DISABLE)
      000091 0D 05            [ 1]  182 	tnz	(0x05, sp)
      000093 27 06            [ 1]  183 	jreq	00102$
                           000095   184 	Sstm8s_adc1$ADC1_Cmd$30 ==.
                                    185 ;	StdPeriphLib/src/stm8s_adc1.c: 123: ADC1->CR1 |= ADC1_CR1_ADON;
      000095 72 10 54 01      [ 1]  186 	bset	0x5401, #0
      000099 20 04            [ 2]  187 	jra	00104$
      00009B                        188 00102$:
                           00009B   189 	Sstm8s_adc1$ADC1_Cmd$31 ==.
                                    190 ;	StdPeriphLib/src/stm8s_adc1.c: 127: ADC1->CR1 &= (uint8_t)(~ADC1_CR1_ADON);
      00009B 72 11 54 01      [ 1]  191 	bres	0x5401, #0
      00009F                        192 00104$:
                           00009F   193 	Sstm8s_adc1$ADC1_Cmd$32 ==.
                                    194 ;	StdPeriphLib/src/stm8s_adc1.c: 129: }
                           00009F   195 	Sstm8s_adc1$ADC1_Cmd$33 ==.
                           00009F   196 	XG$ADC1_Cmd$0$0 ==.
      00009F 32u00u00         [ 1]  197 	pop	_fp_
      0000A2 32u00u01         [ 1]  198 	pop	_fp_+1
      0000A5 81               [ 4]  199 	ret
                           0000A6   200 	Sstm8s_adc1$ADC1_Cmd$34 ==.
                           0000A6   201 	Sstm8s_adc1$ADC1_ScanModeCmd$35 ==.
                                    202 ;	StdPeriphLib/src/stm8s_adc1.c: 136: void ADC1_ScanModeCmd(FunctionalState NewState)
                                    203 ;	-----------------------------------------
                                    204 ;	 function ADC1_ScanModeCmd
                                    205 ;	-----------------------------------------
      0000A6                        206 _ADC1_ScanModeCmd:
      0000A6 3Bu00u01         [ 1]  207 	push	_fp_+1
      0000A9 3Bu00u00         [ 1]  208 	push	_fp_
      0000AC 90 96            [ 1]  209 	ldw	y, sp
      0000AE 90 CFu00u00      [ 2]  210 	ldw	_fp_, y
                           0000B2   211 	Sstm8s_adc1$ADC1_ScanModeCmd$36 ==.
                           0000B2   212 	Sstm8s_adc1$ADC1_ScanModeCmd$37 ==.
                                    213 ;	StdPeriphLib/src/stm8s_adc1.c: 141: if (NewState != DISABLE)
      0000B2 0D 05            [ 1]  214 	tnz	(0x05, sp)
      0000B4 27 09            [ 1]  215 	jreq	00102$
                           0000B6   216 	Sstm8s_adc1$ADC1_ScanModeCmd$38 ==.
                                    217 ;	StdPeriphLib/src/stm8s_adc1.c: 143: ADC1->CR2 |= ADC1_CR2_SCAN;
      0000B6 AE 54 02         [ 2]  218 	ldw	x, #0x5402
      0000B9 F6               [ 1]  219 	ld	a, (x)
      0000BA AA 02            [ 1]  220 	or	a, #0x02
      0000BC F7               [ 1]  221 	ld	(x), a
      0000BD 20 07            [ 2]  222 	jra	00104$
      0000BF                        223 00102$:
                           0000BF   224 	Sstm8s_adc1$ADC1_ScanModeCmd$39 ==.
                                    225 ;	StdPeriphLib/src/stm8s_adc1.c: 147: ADC1->CR2 &= (uint8_t)(~ADC1_CR2_SCAN);
      0000BF AE 54 02         [ 2]  226 	ldw	x, #0x5402
      0000C2 F6               [ 1]  227 	ld	a, (x)
      0000C3 A4 FD            [ 1]  228 	and	a, #0xfd
      0000C5 F7               [ 1]  229 	ld	(x), a
      0000C6                        230 00104$:
                           0000C6   231 	Sstm8s_adc1$ADC1_ScanModeCmd$40 ==.
                                    232 ;	StdPeriphLib/src/stm8s_adc1.c: 149: }
                           0000C6   233 	Sstm8s_adc1$ADC1_ScanModeCmd$41 ==.
                           0000C6   234 	XG$ADC1_ScanModeCmd$0$0 ==.
      0000C6 32u00u00         [ 1]  235 	pop	_fp_
      0000C9 32u00u01         [ 1]  236 	pop	_fp_+1
      0000CC 81               [ 4]  237 	ret
                           0000CD   238 	Sstm8s_adc1$ADC1_ScanModeCmd$42 ==.
                           0000CD   239 	Sstm8s_adc1$ADC1_DataBufferCmd$43 ==.
                                    240 ;	StdPeriphLib/src/stm8s_adc1.c: 156: void ADC1_DataBufferCmd(FunctionalState NewState)
                                    241 ;	-----------------------------------------
                                    242 ;	 function ADC1_DataBufferCmd
                                    243 ;	-----------------------------------------
      0000CD                        244 _ADC1_DataBufferCmd:
      0000CD 3Bu00u01         [ 1]  245 	push	_fp_+1
      0000D0 3Bu00u00         [ 1]  246 	push	_fp_
      0000D3 90 96            [ 1]  247 	ldw	y, sp
      0000D5 90 CFu00u00      [ 2]  248 	ldw	_fp_, y
                           0000D9   249 	Sstm8s_adc1$ADC1_DataBufferCmd$44 ==.
                           0000D9   250 	Sstm8s_adc1$ADC1_DataBufferCmd$45 ==.
                                    251 ;	StdPeriphLib/src/stm8s_adc1.c: 161: if (NewState != DISABLE)
      0000D9 0D 05            [ 1]  252 	tnz	(0x05, sp)
      0000DB 27 06            [ 1]  253 	jreq	00102$
                           0000DD   254 	Sstm8s_adc1$ADC1_DataBufferCmd$46 ==.
                                    255 ;	StdPeriphLib/src/stm8s_adc1.c: 163: ADC1->CR3 |= ADC1_CR3_DBUF;
      0000DD 72 1E 54 03      [ 1]  256 	bset	0x5403, #7
      0000E1 20 04            [ 2]  257 	jra	00104$
      0000E3                        258 00102$:
                           0000E3   259 	Sstm8s_adc1$ADC1_DataBufferCmd$47 ==.
                                    260 ;	StdPeriphLib/src/stm8s_adc1.c: 167: ADC1->CR3 &= (uint8_t)(~ADC1_CR3_DBUF);
      0000E3 72 1F 54 03      [ 1]  261 	bres	0x5403, #7
      0000E7                        262 00104$:
                           0000E7   263 	Sstm8s_adc1$ADC1_DataBufferCmd$48 ==.
                                    264 ;	StdPeriphLib/src/stm8s_adc1.c: 169: }
                           0000E7   265 	Sstm8s_adc1$ADC1_DataBufferCmd$49 ==.
                           0000E7   266 	XG$ADC1_DataBufferCmd$0$0 ==.
      0000E7 32u00u00         [ 1]  267 	pop	_fp_
      0000EA 32u00u01         [ 1]  268 	pop	_fp_+1
      0000ED 81               [ 4]  269 	ret
                           0000EE   270 	Sstm8s_adc1$ADC1_DataBufferCmd$50 ==.
                           0000EE   271 	Sstm8s_adc1$ADC1_ITConfig$51 ==.
                                    272 ;	StdPeriphLib/src/stm8s_adc1.c: 180: void ADC1_ITConfig(ADC1_IT_TypeDef ADC1_IT, FunctionalState NewState)
                                    273 ;	-----------------------------------------
                                    274 ;	 function ADC1_ITConfig
                                    275 ;	-----------------------------------------
      0000EE                        276 _ADC1_ITConfig:
      0000EE 3Bu00u01         [ 1]  277 	push	_fp_+1
      0000F1 3Bu00u00         [ 1]  278 	push	_fp_
      0000F4 90 96            [ 1]  279 	ldw	y, sp
      0000F6 90 CFu00u00      [ 2]  280 	ldw	_fp_, y
                           0000FA   281 	Sstm8s_adc1$ADC1_ITConfig$52 ==.
      0000FA 88               [ 1]  282 	push	a
                           0000FB   283 	Sstm8s_adc1$ADC1_ITConfig$53 ==.
                                    284 ;	StdPeriphLib/src/stm8s_adc1.c: 182: if (NewState != DISABLE)
      0000FB 0D 08            [ 1]  285 	tnz	(0x08, sp)
      0000FD 27 10            [ 1]  286 	jreq	00102$
                           0000FF   287 	Sstm8s_adc1$ADC1_ITConfig$54 ==.
                                    288 ;	StdPeriphLib/src/stm8s_adc1.c: 185: ADC1->CSR |= (uint8_t)ADC1_IT;
      0000FF AE 54 00         [ 2]  289 	ldw	x, #0x5400
      000102 F6               [ 1]  290 	ld	a, (x)
      000103 6B 01            [ 1]  291 	ld	(0x01, sp), a
      000105 7B 07            [ 1]  292 	ld	a, (0x07, sp)
      000107 1A 01            [ 1]  293 	or	a, (0x01, sp)
      000109 AE 54 00         [ 2]  294 	ldw	x, #0x5400
      00010C F7               [ 1]  295 	ld	(x), a
      00010D 20 0F            [ 2]  296 	jra	00104$
      00010F                        297 00102$:
                           00010F   298 	Sstm8s_adc1$ADC1_ITConfig$55 ==.
                                    299 ;	StdPeriphLib/src/stm8s_adc1.c: 190: ADC1->CSR &= (uint8_t)((uint16_t)~(uint16_t)ADC1_IT);
      00010F AE 54 00         [ 2]  300 	ldw	x, #0x5400
      000112 F6               [ 1]  301 	ld	a, (x)
      000113 1E 06            [ 2]  302 	ldw	x, (0x06, sp)
      000115 53               [ 2]  303 	cplw	x
      000116 89               [ 2]  304 	pushw	x
      000117 14 02            [ 1]  305 	and	a, (2, sp)
      000119 85               [ 2]  306 	popw	x
      00011A AE 54 00         [ 2]  307 	ldw	x, #0x5400
      00011D F7               [ 1]  308 	ld	(x), a
      00011E                        309 00104$:
                           00011E   310 	Sstm8s_adc1$ADC1_ITConfig$56 ==.
                                    311 ;	StdPeriphLib/src/stm8s_adc1.c: 192: }
      00011E 84               [ 1]  312 	pop	a
                           00011F   313 	Sstm8s_adc1$ADC1_ITConfig$57 ==.
                           00011F   314 	XG$ADC1_ITConfig$0$0 ==.
      00011F 32u00u00         [ 1]  315 	pop	_fp_
      000122 32u00u01         [ 1]  316 	pop	_fp_+1
      000125 81               [ 4]  317 	ret
                           000126   318 	Sstm8s_adc1$ADC1_ITConfig$58 ==.
                           000126   319 	Sstm8s_adc1$ADC1_PrescalerConfig$59 ==.
                                    320 ;	StdPeriphLib/src/stm8s_adc1.c: 200: void ADC1_PrescalerConfig(ADC1_PresSel_TypeDef ADC1_Prescaler)
                                    321 ;	-----------------------------------------
                                    322 ;	 function ADC1_PrescalerConfig
                                    323 ;	-----------------------------------------
      000126                        324 _ADC1_PrescalerConfig:
      000126 3Bu00u01         [ 1]  325 	push	_fp_+1
      000129 3Bu00u00         [ 1]  326 	push	_fp_
      00012C 90 96            [ 1]  327 	ldw	y, sp
      00012E 90 CFu00u00      [ 2]  328 	ldw	_fp_, y
                           000132   329 	Sstm8s_adc1$ADC1_PrescalerConfig$60 ==.
                           000132   330 	Sstm8s_adc1$ADC1_PrescalerConfig$61 ==.
                                    331 ;	StdPeriphLib/src/stm8s_adc1.c: 203: ADC1->CR1 &= (uint8_t)(~ADC1_CR1_SPSEL);
      000132 AE 54 01         [ 2]  332 	ldw	x, #0x5401
      000135 F6               [ 1]  333 	ld	a, (x)
      000136 A4 8F            [ 1]  334 	and	a, #0x8f
      000138 F7               [ 1]  335 	ld	(x), a
                           000139   336 	Sstm8s_adc1$ADC1_PrescalerConfig$62 ==.
                                    337 ;	StdPeriphLib/src/stm8s_adc1.c: 205: ADC1->CR1 |= (uint8_t)(ADC1_Prescaler);
      000139 AE 54 01         [ 2]  338 	ldw	x, #0x5401
      00013C F6               [ 1]  339 	ld	a, (x)
      00013D 1A 05            [ 1]  340 	or	a, (0x05, sp)
      00013F AE 54 01         [ 2]  341 	ldw	x, #0x5401
      000142 F7               [ 1]  342 	ld	(x), a
                           000143   343 	Sstm8s_adc1$ADC1_PrescalerConfig$63 ==.
                                    344 ;	StdPeriphLib/src/stm8s_adc1.c: 206: }
                           000143   345 	Sstm8s_adc1$ADC1_PrescalerConfig$64 ==.
                           000143   346 	XG$ADC1_PrescalerConfig$0$0 ==.
      000143 32u00u00         [ 1]  347 	pop	_fp_
      000146 32u00u01         [ 1]  348 	pop	_fp_+1
      000149 81               [ 4]  349 	ret
                           00014A   350 	Sstm8s_adc1$ADC1_PrescalerConfig$65 ==.
                           00014A   351 	Sstm8s_adc1$ADC1_SchmittTriggerConfig$66 ==.
                                    352 ;	StdPeriphLib/src/stm8s_adc1.c: 216: void ADC1_SchmittTriggerConfig(ADC1_SchmittTrigg_TypeDef ADC1_SchmittTriggerChannel, FunctionalState NewState)
                                    353 ;	-----------------------------------------
                                    354 ;	 function ADC1_SchmittTriggerConfig
                                    355 ;	-----------------------------------------
      00014A                        356 _ADC1_SchmittTriggerConfig:
      00014A 3Bu00u01         [ 1]  357 	push	_fp_+1
      00014D 3Bu00u00         [ 1]  358 	push	_fp_
      000150 90 96            [ 1]  359 	ldw	y, sp
      000152 90 CFu00u00      [ 2]  360 	ldw	_fp_, y
                           000156   361 	Sstm8s_adc1$ADC1_SchmittTriggerConfig$67 ==.
      000156 52 04            [ 2]  362 	sub	sp, #4
                           000158   363 	Sstm8s_adc1$ADC1_SchmittTriggerConfig$68 ==.
                                    364 ;	StdPeriphLib/src/stm8s_adc1.c: 218: if (ADC1_SchmittTriggerChannel == ADC1_SCHMITTTRIG_ALL)
      000158 7B 09            [ 1]  365 	ld	a, (0x09, sp)
      00015A A1 FF            [ 1]  366 	cp	a, #0xff
      00015C 26 2A            [ 1]  367 	jrne	00114$
                           00015E   368 	Sstm8s_adc1$ADC1_SchmittTriggerConfig$69 ==.
                                    369 ;	StdPeriphLib/src/stm8s_adc1.c: 220: if (NewState != DISABLE)
      00015E 0D 0A            [ 1]  370 	tnz	(0x0a, sp)
      000160 27 13            [ 1]  371 	jreq	00102$
                           000162   372 	Sstm8s_adc1$ADC1_SchmittTriggerConfig$70 ==.
                                    373 ;	StdPeriphLib/src/stm8s_adc1.c: 222: ADC1->TDRL &= (uint8_t)0x0;
      000162 AE 54 07         [ 2]  374 	ldw	x, #0x5407
      000165 F6               [ 1]  375 	ld	a, (x)
      000166 35 00 54 07      [ 1]  376 	mov	0x5407+0, #0x00
                           00016A   377 	Sstm8s_adc1$ADC1_SchmittTriggerConfig$71 ==.
                                    378 ;	StdPeriphLib/src/stm8s_adc1.c: 223: ADC1->TDRH &= (uint8_t)0x0;
      00016A AE 54 06         [ 2]  379 	ldw	x, #0x5406
      00016D F6               [ 1]  380 	ld	a, (x)
      00016E 35 00 54 06      [ 1]  381 	mov	0x5406+0, #0x00
      000172 CCr02r0C         [ 2]  382 	jp	00116$
      000175                        383 00102$:
                           000175   384 	Sstm8s_adc1$ADC1_SchmittTriggerConfig$72 ==.
                                    385 ;	StdPeriphLib/src/stm8s_adc1.c: 227: ADC1->TDRL |= (uint8_t)0xFF;
      000175 AE 54 07         [ 2]  386 	ldw	x, #0x5407
      000178 F6               [ 1]  387 	ld	a, (x)
      000179 35 FF 54 07      [ 1]  388 	mov	0x5407+0, #0xff
                           00017D   389 	Sstm8s_adc1$ADC1_SchmittTriggerConfig$73 ==.
                                    390 ;	StdPeriphLib/src/stm8s_adc1.c: 228: ADC1->TDRH |= (uint8_t)0xFF;
      00017D AE 54 06         [ 2]  391 	ldw	x, #0x5406
      000180 F6               [ 1]  392 	ld	a, (x)
      000181 35 FF 54 06      [ 1]  393 	mov	0x5406+0, #0xff
      000185 CCr02r0C         [ 2]  394 	jp	00116$
      000188                        395 00114$:
                           000188   396 	Sstm8s_adc1$ADC1_SchmittTriggerConfig$74 ==.
                                    397 ;	StdPeriphLib/src/stm8s_adc1.c: 231: else if (ADC1_SchmittTriggerChannel < ADC1_SCHMITTTRIG_CHANNEL8)
      000188 7B 09            [ 1]  398 	ld	a, (0x09, sp)
      00018A A1 08            [ 1]  399 	cp	a, #0x08
      00018C 24 3B            [ 1]  400 	jrnc	00111$
                           00018E   401 	Sstm8s_adc1$ADC1_SchmittTriggerConfig$75 ==.
                                    402 ;	StdPeriphLib/src/stm8s_adc1.c: 233: if (NewState != DISABLE)
      00018E 0D 0A            [ 1]  403 	tnz	(0x0a, sp)
      000190 27 1C            [ 1]  404 	jreq	00105$
                           000192   405 	Sstm8s_adc1$ADC1_SchmittTriggerConfig$76 ==.
                                    406 ;	StdPeriphLib/src/stm8s_adc1.c: 235: ADC1->TDRL &= (uint8_t)(~(uint8_t)((uint8_t)0x01 << (uint8_t)ADC1_SchmittTriggerChannel));
      000192 AE 54 07         [ 2]  407 	ldw	x, #0x5407
      000195 F6               [ 1]  408 	ld	a, (x)
      000196 6B 04            [ 1]  409 	ld	(0x04, sp), a
      000198 A6 01            [ 1]  410 	ld	a, #0x01
      00019A 88               [ 1]  411 	push	a
      00019B 7B 0A            [ 1]  412 	ld	a, (0x0a, sp)
      00019D 27 05            [ 1]  413 	jreq	00140$
      00019F                        414 00139$:
      00019F 08 01            [ 1]  415 	sll	(1, sp)
      0001A1 4A               [ 1]  416 	dec	a
      0001A2 26 FB            [ 1]  417 	jrne	00139$
      0001A4                        418 00140$:
      0001A4 84               [ 1]  419 	pop	a
      0001A5 43               [ 1]  420 	cpl	a
      0001A6 14 04            [ 1]  421 	and	a, (0x04, sp)
      0001A8 AE 54 07         [ 2]  422 	ldw	x, #0x5407
      0001AB F7               [ 1]  423 	ld	(x), a
      0001AC 20 5E            [ 2]  424 	jra	00116$
      0001AE                        425 00105$:
                           0001AE   426 	Sstm8s_adc1$ADC1_SchmittTriggerConfig$77 ==.
                                    427 ;	StdPeriphLib/src/stm8s_adc1.c: 239: ADC1->TDRL |= (uint8_t)((uint8_t)0x01 << (uint8_t)ADC1_SchmittTriggerChannel);
      0001AE AE 54 07         [ 2]  428 	ldw	x, #0x5407
      0001B1 F6               [ 1]  429 	ld	a, (x)
      0001B2 88               [ 1]  430 	push	a
      0001B3 A6 01            [ 1]  431 	ld	a, #0x01
      0001B5 6B 02            [ 1]  432 	ld	(0x02, sp), a
      0001B7 7B 0A            [ 1]  433 	ld	a, (0x0a, sp)
      0001B9 27 05            [ 1]  434 	jreq	00142$
      0001BB                        435 00141$:
      0001BB 08 02            [ 1]  436 	sll	(0x02, sp)
      0001BD 4A               [ 1]  437 	dec	a
      0001BE 26 FB            [ 1]  438 	jrne	00141$
      0001C0                        439 00142$:
      0001C0 84               [ 1]  440 	pop	a
      0001C1 1A 01            [ 1]  441 	or	a, (0x01, sp)
      0001C3 AE 54 07         [ 2]  442 	ldw	x, #0x5407
      0001C6 F7               [ 1]  443 	ld	(x), a
      0001C7 20 43            [ 2]  444 	jra	00116$
      0001C9                        445 00111$:
                           0001C9   446 	Sstm8s_adc1$ADC1_SchmittTriggerConfig$78 ==.
                                    447 ;	StdPeriphLib/src/stm8s_adc1.c: 244: if (NewState != DISABLE)
      0001C9 0D 0A            [ 1]  448 	tnz	(0x0a, sp)
      0001CB 27 21            [ 1]  449 	jreq	00108$
                           0001CD   450 	Sstm8s_adc1$ADC1_SchmittTriggerConfig$79 ==.
                                    451 ;	StdPeriphLib/src/stm8s_adc1.c: 246: ADC1->TDRH &= (uint8_t)(~(uint8_t)((uint8_t)0x01 << ((uint8_t)ADC1_SchmittTriggerChannel - (uint8_t)8)));
      0001CD AE 54 06         [ 2]  452 	ldw	x, #0x5406
      0001D0 F6               [ 1]  453 	ld	a, (x)
      0001D1 6B 03            [ 1]  454 	ld	(0x03, sp), a
      0001D3 7B 09            [ 1]  455 	ld	a, (0x09, sp)
      0001D5 A0 08            [ 1]  456 	sub	a, #0x08
      0001D7 97               [ 1]  457 	ld	xl, a
      0001D8 A6 01            [ 1]  458 	ld	a, #0x01
      0001DA 88               [ 1]  459 	push	a
      0001DB 9F               [ 1]  460 	ld	a, xl
      0001DC 4D               [ 1]  461 	tnz	a
      0001DD 27 05            [ 1]  462 	jreq	00145$
      0001DF                        463 00144$:
      0001DF 08 01            [ 1]  464 	sll	(1, sp)
      0001E1 4A               [ 1]  465 	dec	a
      0001E2 26 FB            [ 1]  466 	jrne	00144$
      0001E4                        467 00145$:
      0001E4 84               [ 1]  468 	pop	a
      0001E5 43               [ 1]  469 	cpl	a
      0001E6 14 03            [ 1]  470 	and	a, (0x03, sp)
      0001E8 AE 54 06         [ 2]  471 	ldw	x, #0x5406
      0001EB F7               [ 1]  472 	ld	(x), a
      0001EC 20 1E            [ 2]  473 	jra	00116$
      0001EE                        474 00108$:
                           0001EE   475 	Sstm8s_adc1$ADC1_SchmittTriggerConfig$80 ==.
                                    476 ;	StdPeriphLib/src/stm8s_adc1.c: 250: ADC1->TDRH |= (uint8_t)((uint8_t)0x01 << ((uint8_t)ADC1_SchmittTriggerChannel - (uint8_t)8));
      0001EE AE 54 06         [ 2]  477 	ldw	x, #0x5406
      0001F1 F6               [ 1]  478 	ld	a, (x)
      0001F2 97               [ 1]  479 	ld	xl, a
      0001F3 7B 09            [ 1]  480 	ld	a, (0x09, sp)
      0001F5 A0 08            [ 1]  481 	sub	a, #0x08
      0001F7 88               [ 1]  482 	push	a
      0001F8 A6 01            [ 1]  483 	ld	a, #0x01
      0001FA 6B 03            [ 1]  484 	ld	(0x03, sp), a
      0001FC 84               [ 1]  485 	pop	a
      0001FD 4D               [ 1]  486 	tnz	a
      0001FE 27 05            [ 1]  487 	jreq	00147$
      000200                        488 00146$:
      000200 08 02            [ 1]  489 	sll	(0x02, sp)
      000202 4A               [ 1]  490 	dec	a
      000203 26 FB            [ 1]  491 	jrne	00146$
      000205                        492 00147$:
      000205 9F               [ 1]  493 	ld	a, xl
      000206 1A 02            [ 1]  494 	or	a, (0x02, sp)
      000208 AE 54 06         [ 2]  495 	ldw	x, #0x5406
      00020B F7               [ 1]  496 	ld	(x), a
      00020C                        497 00116$:
                           00020C   498 	Sstm8s_adc1$ADC1_SchmittTriggerConfig$81 ==.
                                    499 ;	StdPeriphLib/src/stm8s_adc1.c: 253: }
      00020C 5B 04            [ 2]  500 	addw	sp, #4
                           00020E   501 	Sstm8s_adc1$ADC1_SchmittTriggerConfig$82 ==.
                           00020E   502 	XG$ADC1_SchmittTriggerConfig$0$0 ==.
      00020E 32u00u00         [ 1]  503 	pop	_fp_
      000211 32u00u01         [ 1]  504 	pop	_fp_+1
      000214 81               [ 4]  505 	ret
                           000215   506 	Sstm8s_adc1$ADC1_SchmittTriggerConfig$83 ==.
                           000215   507 	Sstm8s_adc1$ADC1_ConversionConfig$84 ==.
                                    508 ;	StdPeriphLib/src/stm8s_adc1.c: 265: void ADC1_ConversionConfig(ADC1_ConvMode_TypeDef ADC1_ConversionMode, ADC1_Channel_TypeDef ADC1_Channel, ADC1_Align_TypeDef ADC1_Align)
                                    509 ;	-----------------------------------------
                                    510 ;	 function ADC1_ConversionConfig
                                    511 ;	-----------------------------------------
      000215                        512 _ADC1_ConversionConfig:
      000215 3Bu00u01         [ 1]  513 	push	_fp_+1
      000218 3Bu00u00         [ 1]  514 	push	_fp_
      00021B 90 96            [ 1]  515 	ldw	y, sp
      00021D 90 CFu00u00      [ 2]  516 	ldw	_fp_, y
                           000221   517 	Sstm8s_adc1$ADC1_ConversionConfig$85 ==.
                           000221   518 	Sstm8s_adc1$ADC1_ConversionConfig$86 ==.
                                    519 ;	StdPeriphLib/src/stm8s_adc1.c: 268: ADC1->CR2 &= (uint8_t)(~ADC1_CR2_ALIGN);
      000221 AE 54 02         [ 2]  520 	ldw	x, #0x5402
      000224 F6               [ 1]  521 	ld	a, (x)
      000225 A4 F7            [ 1]  522 	and	a, #0xf7
      000227 F7               [ 1]  523 	ld	(x), a
                           000228   524 	Sstm8s_adc1$ADC1_ConversionConfig$87 ==.
                                    525 ;	StdPeriphLib/src/stm8s_adc1.c: 270: ADC1->CR2 |= (uint8_t)(ADC1_Align);
      000228 AE 54 02         [ 2]  526 	ldw	x, #0x5402
      00022B F6               [ 1]  527 	ld	a, (x)
      00022C 1A 07            [ 1]  528 	or	a, (0x07, sp)
      00022E AE 54 02         [ 2]  529 	ldw	x, #0x5402
      000231 F7               [ 1]  530 	ld	(x), a
                           000232   531 	Sstm8s_adc1$ADC1_ConversionConfig$88 ==.
                                    532 ;	StdPeriphLib/src/stm8s_adc1.c: 272: if (ADC1_ConversionMode == ADC1_CONVERSIONMODE_CONTINUOUS)
      000232 7B 05            [ 1]  533 	ld	a, (0x05, sp)
      000234 A1 01            [ 1]  534 	cp	a, #0x01
      000236 26 09            [ 1]  535 	jrne	00102$
                           000238   536 	Sstm8s_adc1$ADC1_ConversionConfig$89 ==.
                                    537 ;	StdPeriphLib/src/stm8s_adc1.c: 275: ADC1->CR1 |= ADC1_CR1_CONT;
      000238 AE 54 01         [ 2]  538 	ldw	x, #0x5401
      00023B F6               [ 1]  539 	ld	a, (x)
      00023C AA 02            [ 1]  540 	or	a, #0x02
      00023E F7               [ 1]  541 	ld	(x), a
      00023F 20 07            [ 2]  542 	jra	00103$
      000241                        543 00102$:
                           000241   544 	Sstm8s_adc1$ADC1_ConversionConfig$90 ==.
                                    545 ;	StdPeriphLib/src/stm8s_adc1.c: 280: ADC1->CR1 &= (uint8_t)(~ADC1_CR1_CONT);
      000241 AE 54 01         [ 2]  546 	ldw	x, #0x5401
      000244 F6               [ 1]  547 	ld	a, (x)
      000245 A4 FD            [ 1]  548 	and	a, #0xfd
      000247 F7               [ 1]  549 	ld	(x), a
      000248                        550 00103$:
                           000248   551 	Sstm8s_adc1$ADC1_ConversionConfig$91 ==.
                                    552 ;	StdPeriphLib/src/stm8s_adc1.c: 284: ADC1->CSR &= (uint8_t)(~ADC1_CSR_CH);
      000248 AE 54 00         [ 2]  553 	ldw	x, #0x5400
      00024B F6               [ 1]  554 	ld	a, (x)
      00024C A4 F0            [ 1]  555 	and	a, #0xf0
      00024E F7               [ 1]  556 	ld	(x), a
                           00024F   557 	Sstm8s_adc1$ADC1_ConversionConfig$92 ==.
                                    558 ;	StdPeriphLib/src/stm8s_adc1.c: 286: ADC1->CSR |= (uint8_t)(ADC1_Channel);
      00024F AE 54 00         [ 2]  559 	ldw	x, #0x5400
      000252 F6               [ 1]  560 	ld	a, (x)
      000253 1A 06            [ 1]  561 	or	a, (0x06, sp)
      000255 AE 54 00         [ 2]  562 	ldw	x, #0x5400
      000258 F7               [ 1]  563 	ld	(x), a
                           000259   564 	Sstm8s_adc1$ADC1_ConversionConfig$93 ==.
                                    565 ;	StdPeriphLib/src/stm8s_adc1.c: 287: }
                           000259   566 	Sstm8s_adc1$ADC1_ConversionConfig$94 ==.
                           000259   567 	XG$ADC1_ConversionConfig$0$0 ==.
      000259 32u00u00         [ 1]  568 	pop	_fp_
      00025C 32u00u01         [ 1]  569 	pop	_fp_+1
      00025F 81               [ 4]  570 	ret
                           000260   571 	Sstm8s_adc1$ADC1_ConversionConfig$95 ==.
                           000260   572 	Sstm8s_adc1$ADC1_ExternalTriggerConfig$96 ==.
                                    573 ;	StdPeriphLib/src/stm8s_adc1.c: 299: void ADC1_ExternalTriggerConfig(ADC1_ExtTrig_TypeDef ADC1_ExtTrigger, FunctionalState NewState)
                                    574 ;	-----------------------------------------
                                    575 ;	 function ADC1_ExternalTriggerConfig
                                    576 ;	-----------------------------------------
      000260                        577 _ADC1_ExternalTriggerConfig:
      000260 3Bu00u01         [ 1]  578 	push	_fp_+1
      000263 3Bu00u00         [ 1]  579 	push	_fp_
      000266 90 96            [ 1]  580 	ldw	y, sp
      000268 90 CFu00u00      [ 2]  581 	ldw	_fp_, y
                           00026C   582 	Sstm8s_adc1$ADC1_ExternalTriggerConfig$97 ==.
                           00026C   583 	Sstm8s_adc1$ADC1_ExternalTriggerConfig$98 ==.
                                    584 ;	StdPeriphLib/src/stm8s_adc1.c: 302: ADC1->CR2 &= (uint8_t)(~ADC1_CR2_EXTSEL);
      00026C AE 54 02         [ 2]  585 	ldw	x, #0x5402
      00026F F6               [ 1]  586 	ld	a, (x)
      000270 A4 CF            [ 1]  587 	and	a, #0xcf
      000272 F7               [ 1]  588 	ld	(x), a
                           000273   589 	Sstm8s_adc1$ADC1_ExternalTriggerConfig$99 ==.
                                    590 ;	StdPeriphLib/src/stm8s_adc1.c: 304: if (NewState != DISABLE)
      000273 0D 06            [ 1]  591 	tnz	(0x06, sp)
      000275 27 09            [ 1]  592 	jreq	00102$
                           000277   593 	Sstm8s_adc1$ADC1_ExternalTriggerConfig$100 ==.
                                    594 ;	StdPeriphLib/src/stm8s_adc1.c: 307: ADC1->CR2 |= (uint8_t)(ADC1_CR2_EXTTRIG);
      000277 AE 54 02         [ 2]  595 	ldw	x, #0x5402
      00027A F6               [ 1]  596 	ld	a, (x)
      00027B AA 40            [ 1]  597 	or	a, #0x40
      00027D F7               [ 1]  598 	ld	(x), a
      00027E 20 07            [ 2]  599 	jra	00103$
      000280                        600 00102$:
                           000280   601 	Sstm8s_adc1$ADC1_ExternalTriggerConfig$101 ==.
                                    602 ;	StdPeriphLib/src/stm8s_adc1.c: 312: ADC1->CR2 &= (uint8_t)(~ADC1_CR2_EXTTRIG);
      000280 AE 54 02         [ 2]  603 	ldw	x, #0x5402
      000283 F6               [ 1]  604 	ld	a, (x)
      000284 A4 BF            [ 1]  605 	and	a, #0xbf
      000286 F7               [ 1]  606 	ld	(x), a
      000287                        607 00103$:
                           000287   608 	Sstm8s_adc1$ADC1_ExternalTriggerConfig$102 ==.
                                    609 ;	StdPeriphLib/src/stm8s_adc1.c: 316: ADC1->CR2 |= (uint8_t)(ADC1_ExtTrigger);
      000287 AE 54 02         [ 2]  610 	ldw	x, #0x5402
      00028A F6               [ 1]  611 	ld	a, (x)
      00028B 1A 05            [ 1]  612 	or	a, (0x05, sp)
      00028D AE 54 02         [ 2]  613 	ldw	x, #0x5402
      000290 F7               [ 1]  614 	ld	(x), a
                           000291   615 	Sstm8s_adc1$ADC1_ExternalTriggerConfig$103 ==.
                                    616 ;	StdPeriphLib/src/stm8s_adc1.c: 317: }
                           000291   617 	Sstm8s_adc1$ADC1_ExternalTriggerConfig$104 ==.
                           000291   618 	XG$ADC1_ExternalTriggerConfig$0$0 ==.
      000291 32u00u00         [ 1]  619 	pop	_fp_
      000294 32u00u01         [ 1]  620 	pop	_fp_+1
      000297 81               [ 4]  621 	ret
                           000298   622 	Sstm8s_adc1$ADC1_ExternalTriggerConfig$105 ==.
                           000298   623 	Sstm8s_adc1$ADC1_StartConversion$106 ==.
                                    624 ;	StdPeriphLib/src/stm8s_adc1.c: 328: void ADC1_StartConversion(void)
                                    625 ;	-----------------------------------------
                                    626 ;	 function ADC1_StartConversion
                                    627 ;	-----------------------------------------
      000298                        628 _ADC1_StartConversion:
      000298 3Bu00u01         [ 1]  629 	push	_fp_+1
      00029B 3Bu00u00         [ 1]  630 	push	_fp_
      00029E 90 96            [ 1]  631 	ldw	y, sp
      0002A0 90 CFu00u00      [ 2]  632 	ldw	_fp_, y
                           0002A4   633 	Sstm8s_adc1$ADC1_StartConversion$107 ==.
                           0002A4   634 	Sstm8s_adc1$ADC1_StartConversion$108 ==.
                                    635 ;	StdPeriphLib/src/stm8s_adc1.c: 330: ADC1->CR1 |= ADC1_CR1_ADON;
      0002A4 72 10 54 01      [ 1]  636 	bset	0x5401, #0
                           0002A8   637 	Sstm8s_adc1$ADC1_StartConversion$109 ==.
                                    638 ;	StdPeriphLib/src/stm8s_adc1.c: 331: }
                           0002A8   639 	Sstm8s_adc1$ADC1_StartConversion$110 ==.
                           0002A8   640 	XG$ADC1_StartConversion$0$0 ==.
      0002A8 32u00u00         [ 1]  641 	pop	_fp_
      0002AB 32u00u01         [ 1]  642 	pop	_fp_+1
      0002AE 81               [ 4]  643 	ret
                           0002AF   644 	Sstm8s_adc1$ADC1_StartConversion$111 ==.
                           0002AF   645 	Sstm8s_adc1$ADC1_GetConversionValue$112 ==.
                                    646 ;	StdPeriphLib/src/stm8s_adc1.c: 340: uint16_t ADC1_GetConversionValue(void)
                                    647 ;	-----------------------------------------
                                    648 ;	 function ADC1_GetConversionValue
                                    649 ;	-----------------------------------------
      0002AF                        650 _ADC1_GetConversionValue:
      0002AF 3Bu00u01         [ 1]  651 	push	_fp_+1
      0002B2 3Bu00u00         [ 1]  652 	push	_fp_
      0002B5 90 96            [ 1]  653 	ldw	y, sp
      0002B7 90 CFu00u00      [ 2]  654 	ldw	_fp_, y
                           0002BB   655 	Sstm8s_adc1$ADC1_GetConversionValue$113 ==.
      0002BB 52 09            [ 2]  656 	sub	sp, #9
                           0002BD   657 	Sstm8s_adc1$ADC1_GetConversionValue$114 ==.
                                    658 ;	StdPeriphLib/src/stm8s_adc1.c: 345: if ((ADC1->CR2 & ADC1_CR2_ALIGN) != 0) /* Right alignment */
      0002BD AE 54 02         [ 2]  659 	ldw	x, #0x5402
      0002C0 F6               [ 1]  660 	ld	a, (x)
      0002C1 A5 08            [ 1]  661 	bcp	a, #0x08
      0002C3 27 22            [ 1]  662 	jreq	00102$
                           0002C5   663 	Sstm8s_adc1$ADC1_GetConversionValue$115 ==.
                                    664 ;	StdPeriphLib/src/stm8s_adc1.c: 348: templ = ADC1->DRL;
      0002C5 AE 54 05         [ 2]  665 	ldw	x, #0x5405
      0002C8 F6               [ 1]  666 	ld	a, (x)
      0002C9 6B 01            [ 1]  667 	ld	(0x01, sp), a
                           0002CB   668 	Sstm8s_adc1$ADC1_GetConversionValue$116 ==.
                                    669 ;	StdPeriphLib/src/stm8s_adc1.c: 350: temph = ADC1->DRH;
      0002CB AE 54 04         [ 2]  670 	ldw	x, #0x5404
      0002CE F6               [ 1]  671 	ld	a, (x)
      0002CF 5F               [ 1]  672 	clrw	x
      0002D0 97               [ 1]  673 	ld	xl, a
      0002D1 1F 02            [ 2]  674 	ldw	(0x02, sp), x
                           0002D3   675 	Sstm8s_adc1$ADC1_GetConversionValue$117 ==.
                                    676 ;	StdPeriphLib/src/stm8s_adc1.c: 352: temph = (uint16_t)(templ | (uint16_t)(temph << (uint8_t)8));
      0002D3 7B 03            [ 1]  677 	ld	a, (0x03, sp)
      0002D5 0F 05            [ 1]  678 	clr	(0x05, sp)
      0002D7 41               [ 1]  679 	exg	a, xl
      0002D8 7B 01            [ 1]  680 	ld	a, (0x01, sp)
      0002DA 41               [ 1]  681 	exg	a, xl
      0002DB 0F 08            [ 1]  682 	clr	(0x08, sp)
      0002DD 1A 08            [ 1]  683 	or	a, (0x08, sp)
      0002DF 01               [ 1]  684 	rrwa	x
      0002E0 1A 05            [ 1]  685 	or	a, (0x05, sp)
      0002E2 97               [ 1]  686 	ld	xl, a
      0002E3 1F 02            [ 2]  687 	ldw	(0x02, sp), x
      0002E5 20 26            [ 2]  688 	jra	00103$
      0002E7                        689 00102$:
                           0002E7   690 	Sstm8s_adc1$ADC1_GetConversionValue$118 ==.
                                    691 ;	StdPeriphLib/src/stm8s_adc1.c: 357: temph = ADC1->DRH;
      0002E7 AE 54 04         [ 2]  692 	ldw	x, #0x5404
      0002EA F6               [ 1]  693 	ld	a, (x)
      0002EB 5F               [ 1]  694 	clrw	x
      0002EC 97               [ 1]  695 	ld	xl, a
      0002ED 1F 02            [ 2]  696 	ldw	(0x02, sp), x
                           0002EF   697 	Sstm8s_adc1$ADC1_GetConversionValue$119 ==.
                                    698 ;	StdPeriphLib/src/stm8s_adc1.c: 359: templ = ADC1->DRL;
      0002EF AE 54 05         [ 2]  699 	ldw	x, #0x5405
      0002F2 F6               [ 1]  700 	ld	a, (x)
      0002F3 6B 01            [ 1]  701 	ld	(0x01, sp), a
                           0002F5   702 	Sstm8s_adc1$ADC1_GetConversionValue$120 ==.
                                    703 ;	StdPeriphLib/src/stm8s_adc1.c: 361: temph = (uint16_t)((uint16_t)((uint16_t)templ << 6) | (uint16_t)((uint16_t)temph << 8));
      0002F5 5F               [ 1]  704 	clrw	x
      0002F6 7B 01            [ 1]  705 	ld	a, (0x01, sp)
      0002F8 97               [ 1]  706 	ld	xl, a
      0002F9 58               [ 2]  707 	sllw	x
      0002FA 58               [ 2]  708 	sllw	x
      0002FB 58               [ 2]  709 	sllw	x
      0002FC 58               [ 2]  710 	sllw	x
      0002FD 58               [ 2]  711 	sllw	x
      0002FE 58               [ 2]  712 	sllw	x
      0002FF 1F 06            [ 2]  713 	ldw	(0x06, sp), x
      000301 7B 03            [ 1]  714 	ld	a, (0x03, sp)
      000303 95               [ 1]  715 	ld	xh, a
      000304 4F               [ 1]  716 	clr	a
      000305 1A 07            [ 1]  717 	or	a, (0x07, sp)
      000307 02               [ 1]  718 	rlwa	x
      000308 1A 06            [ 1]  719 	or	a, (0x06, sp)
      00030A 95               [ 1]  720 	ld	xh, a
      00030B 1F 02            [ 2]  721 	ldw	(0x02, sp), x
      00030D                        722 00103$:
                           00030D   723 	Sstm8s_adc1$ADC1_GetConversionValue$121 ==.
                                    724 ;	StdPeriphLib/src/stm8s_adc1.c: 364: return ((uint16_t)temph);
      00030D 1E 02            [ 2]  725 	ldw	x, (0x02, sp)
                           00030F   726 	Sstm8s_adc1$ADC1_GetConversionValue$122 ==.
                                    727 ;	StdPeriphLib/src/stm8s_adc1.c: 365: }
      00030F 5B 09            [ 2]  728 	addw	sp, #9
                           000311   729 	Sstm8s_adc1$ADC1_GetConversionValue$123 ==.
                           000311   730 	XG$ADC1_GetConversionValue$0$0 ==.
      000311 32u00u00         [ 1]  731 	pop	_fp_
      000314 32u00u01         [ 1]  732 	pop	_fp_+1
      000317 81               [ 4]  733 	ret
                           000318   734 	Sstm8s_adc1$ADC1_GetConversionValue$124 ==.
                           000318   735 	Sstm8s_adc1$ADC1_AWDChannelConfig$125 ==.
                                    736 ;	StdPeriphLib/src/stm8s_adc1.c: 375: void ADC1_AWDChannelConfig(ADC1_Channel_TypeDef Channel, FunctionalState NewState)
                                    737 ;	-----------------------------------------
                                    738 ;	 function ADC1_AWDChannelConfig
                                    739 ;	-----------------------------------------
      000318                        740 _ADC1_AWDChannelConfig:
      000318 3Bu00u01         [ 1]  741 	push	_fp_+1
      00031B 3Bu00u00         [ 1]  742 	push	_fp_
      00031E 90 96            [ 1]  743 	ldw	y, sp
      000320 90 CFu00u00      [ 2]  744 	ldw	_fp_, y
                           000324   745 	Sstm8s_adc1$ADC1_AWDChannelConfig$126 ==.
      000324 52 04            [ 2]  746 	sub	sp, #4
                           000326   747 	Sstm8s_adc1$ADC1_AWDChannelConfig$127 ==.
                                    748 ;	StdPeriphLib/src/stm8s_adc1.c: 381: if (Channel < (uint8_t)8)
      000326 7B 09            [ 1]  749 	ld	a, (0x09, sp)
      000328 A1 08            [ 1]  750 	cp	a, #0x08
      00032A 24 3B            [ 1]  751 	jrnc	00108$
                           00032C   752 	Sstm8s_adc1$ADC1_AWDChannelConfig$128 ==.
                                    753 ;	StdPeriphLib/src/stm8s_adc1.c: 383: if (NewState != DISABLE)
      00032C 0D 0A            [ 1]  754 	tnz	(0x0a, sp)
      00032E 27 1B            [ 1]  755 	jreq	00102$
                           000330   756 	Sstm8s_adc1$ADC1_AWDChannelConfig$129 ==.
                                    757 ;	StdPeriphLib/src/stm8s_adc1.c: 385: ADC1->AWCRL |= (uint8_t)((uint8_t)1 << Channel);
      000330 AE 54 0F         [ 2]  758 	ldw	x, #0x540f
      000333 F6               [ 1]  759 	ld	a, (x)
      000334 88               [ 1]  760 	push	a
      000335 A6 01            [ 1]  761 	ld	a, #0x01
      000337 6B 02            [ 1]  762 	ld	(0x02, sp), a
      000339 7B 0A            [ 1]  763 	ld	a, (0x0a, sp)
      00033B 27 05            [ 1]  764 	jreq	00124$
      00033D                        765 00123$:
      00033D 08 02            [ 1]  766 	sll	(0x02, sp)
      00033F 4A               [ 1]  767 	dec	a
      000340 26 FB            [ 1]  768 	jrne	00123$
      000342                        769 00124$:
      000342 84               [ 1]  770 	pop	a
      000343 1A 01            [ 1]  771 	or	a, (0x01, sp)
      000345 AE 54 0F         [ 2]  772 	ldw	x, #0x540f
      000348 F7               [ 1]  773 	ld	(x), a
      000349 20 5F            [ 2]  774 	jra	00110$
      00034B                        775 00102$:
                           00034B   776 	Sstm8s_adc1$ADC1_AWDChannelConfig$130 ==.
                                    777 ;	StdPeriphLib/src/stm8s_adc1.c: 389: ADC1->AWCRL &= (uint8_t)~(uint8_t)((uint8_t)1 << Channel);
      00034B AE 54 0F         [ 2]  778 	ldw	x, #0x540f
      00034E F6               [ 1]  779 	ld	a, (x)
      00034F 6B 04            [ 1]  780 	ld	(0x04, sp), a
      000351 A6 01            [ 1]  781 	ld	a, #0x01
      000353 88               [ 1]  782 	push	a
      000354 7B 0A            [ 1]  783 	ld	a, (0x0a, sp)
      000356 27 05            [ 1]  784 	jreq	00126$
      000358                        785 00125$:
      000358 08 01            [ 1]  786 	sll	(1, sp)
      00035A 4A               [ 1]  787 	dec	a
      00035B 26 FB            [ 1]  788 	jrne	00125$
      00035D                        789 00126$:
      00035D 84               [ 1]  790 	pop	a
      00035E 43               [ 1]  791 	cpl	a
      00035F 14 04            [ 1]  792 	and	a, (0x04, sp)
      000361 AE 54 0F         [ 2]  793 	ldw	x, #0x540f
      000364 F7               [ 1]  794 	ld	(x), a
      000365 20 43            [ 2]  795 	jra	00110$
      000367                        796 00108$:
                           000367   797 	Sstm8s_adc1$ADC1_AWDChannelConfig$131 ==.
                                    798 ;	StdPeriphLib/src/stm8s_adc1.c: 394: if (NewState != DISABLE)
      000367 0D 0A            [ 1]  799 	tnz	(0x0a, sp)
      000369 27 20            [ 1]  800 	jreq	00105$
                           00036B   801 	Sstm8s_adc1$ADC1_AWDChannelConfig$132 ==.
                                    802 ;	StdPeriphLib/src/stm8s_adc1.c: 396: ADC1->AWCRH |= (uint8_t)((uint8_t)1 << (Channel - (uint8_t)8));
      00036B AE 54 0E         [ 2]  803 	ldw	x, #0x540e
      00036E F6               [ 1]  804 	ld	a, (x)
      00036F 97               [ 1]  805 	ld	xl, a
      000370 7B 09            [ 1]  806 	ld	a, (0x09, sp)
      000372 A0 08            [ 1]  807 	sub	a, #0x08
      000374 88               [ 1]  808 	push	a
      000375 A6 01            [ 1]  809 	ld	a, #0x01
      000377 6B 04            [ 1]  810 	ld	(0x04, sp), a
      000379 84               [ 1]  811 	pop	a
      00037A 4D               [ 1]  812 	tnz	a
      00037B 27 05            [ 1]  813 	jreq	00129$
      00037D                        814 00128$:
      00037D 08 03            [ 1]  815 	sll	(0x03, sp)
      00037F 4A               [ 1]  816 	dec	a
      000380 26 FB            [ 1]  817 	jrne	00128$
      000382                        818 00129$:
      000382 9F               [ 1]  819 	ld	a, xl
      000383 1A 03            [ 1]  820 	or	a, (0x03, sp)
      000385 AE 54 0E         [ 2]  821 	ldw	x, #0x540e
      000388 F7               [ 1]  822 	ld	(x), a
      000389 20 1F            [ 2]  823 	jra	00110$
      00038B                        824 00105$:
                           00038B   825 	Sstm8s_adc1$ADC1_AWDChannelConfig$133 ==.
                                    826 ;	StdPeriphLib/src/stm8s_adc1.c: 400: ADC1->AWCRH &= (uint8_t)~(uint8_t)((uint8_t)1 << (uint8_t)(Channel - (uint8_t)8));
      00038B AE 54 0E         [ 2]  827 	ldw	x, #0x540e
      00038E F6               [ 1]  828 	ld	a, (x)
      00038F 6B 02            [ 1]  829 	ld	(0x02, sp), a
      000391 7B 09            [ 1]  830 	ld	a, (0x09, sp)
      000393 A0 08            [ 1]  831 	sub	a, #0x08
      000395 97               [ 1]  832 	ld	xl, a
      000396 A6 01            [ 1]  833 	ld	a, #0x01
      000398 88               [ 1]  834 	push	a
      000399 9F               [ 1]  835 	ld	a, xl
      00039A 4D               [ 1]  836 	tnz	a
      00039B 27 05            [ 1]  837 	jreq	00131$
      00039D                        838 00130$:
      00039D 08 01            [ 1]  839 	sll	(1, sp)
      00039F 4A               [ 1]  840 	dec	a
      0003A0 26 FB            [ 1]  841 	jrne	00130$
      0003A2                        842 00131$:
      0003A2 84               [ 1]  843 	pop	a
      0003A3 43               [ 1]  844 	cpl	a
      0003A4 14 02            [ 1]  845 	and	a, (0x02, sp)
      0003A6 AE 54 0E         [ 2]  846 	ldw	x, #0x540e
      0003A9 F7               [ 1]  847 	ld	(x), a
      0003AA                        848 00110$:
                           0003AA   849 	Sstm8s_adc1$ADC1_AWDChannelConfig$134 ==.
                                    850 ;	StdPeriphLib/src/stm8s_adc1.c: 403: }
      0003AA 5B 04            [ 2]  851 	addw	sp, #4
                           0003AC   852 	Sstm8s_adc1$ADC1_AWDChannelConfig$135 ==.
                           0003AC   853 	XG$ADC1_AWDChannelConfig$0$0 ==.
      0003AC 32u00u00         [ 1]  854 	pop	_fp_
      0003AF 32u00u01         [ 1]  855 	pop	_fp_+1
      0003B2 81               [ 4]  856 	ret
                           0003B3   857 	Sstm8s_adc1$ADC1_AWDChannelConfig$136 ==.
                           0003B3   858 	Sstm8s_adc1$ADC1_SetHighThreshold$137 ==.
                                    859 ;	StdPeriphLib/src/stm8s_adc1.c: 411: void ADC1_SetHighThreshold(uint16_t Threshold)
                                    860 ;	-----------------------------------------
                                    861 ;	 function ADC1_SetHighThreshold
                                    862 ;	-----------------------------------------
      0003B3                        863 _ADC1_SetHighThreshold:
      0003B3 3Bu00u01         [ 1]  864 	push	_fp_+1
      0003B6 3Bu00u00         [ 1]  865 	push	_fp_
      0003B9 90 96            [ 1]  866 	ldw	y, sp
      0003BB 90 CFu00u00      [ 2]  867 	ldw	_fp_, y
                           0003BF   868 	Sstm8s_adc1$ADC1_SetHighThreshold$138 ==.
                           0003BF   869 	Sstm8s_adc1$ADC1_SetHighThreshold$139 ==.
                                    870 ;	StdPeriphLib/src/stm8s_adc1.c: 413: ADC1->HTRH = (uint8_t)(Threshold >> (uint8_t)2);
      0003BF 1E 05            [ 2]  871 	ldw	x, (0x05, sp)
      0003C1 54               [ 2]  872 	srlw	x
      0003C2 54               [ 2]  873 	srlw	x
      0003C3 9F               [ 1]  874 	ld	a, xl
      0003C4 AE 54 08         [ 2]  875 	ldw	x, #0x5408
      0003C7 F7               [ 1]  876 	ld	(x), a
                           0003C8   877 	Sstm8s_adc1$ADC1_SetHighThreshold$140 ==.
                                    878 ;	StdPeriphLib/src/stm8s_adc1.c: 414: ADC1->HTRL = (uint8_t)Threshold;
      0003C8 7B 06            [ 1]  879 	ld	a, (0x06, sp)
      0003CA AE 54 09         [ 2]  880 	ldw	x, #0x5409
      0003CD F7               [ 1]  881 	ld	(x), a
                           0003CE   882 	Sstm8s_adc1$ADC1_SetHighThreshold$141 ==.
                                    883 ;	StdPeriphLib/src/stm8s_adc1.c: 415: }
                           0003CE   884 	Sstm8s_adc1$ADC1_SetHighThreshold$142 ==.
                           0003CE   885 	XG$ADC1_SetHighThreshold$0$0 ==.
      0003CE 32u00u00         [ 1]  886 	pop	_fp_
      0003D1 32u00u01         [ 1]  887 	pop	_fp_+1
      0003D4 81               [ 4]  888 	ret
                           0003D5   889 	Sstm8s_adc1$ADC1_SetHighThreshold$143 ==.
                           0003D5   890 	Sstm8s_adc1$ADC1_SetLowThreshold$144 ==.
                                    891 ;	StdPeriphLib/src/stm8s_adc1.c: 423: void ADC1_SetLowThreshold(uint16_t Threshold)
                                    892 ;	-----------------------------------------
                                    893 ;	 function ADC1_SetLowThreshold
                                    894 ;	-----------------------------------------
      0003D5                        895 _ADC1_SetLowThreshold:
      0003D5 3Bu00u01         [ 1]  896 	push	_fp_+1
      0003D8 3Bu00u00         [ 1]  897 	push	_fp_
      0003DB 90 96            [ 1]  898 	ldw	y, sp
      0003DD 90 CFu00u00      [ 2]  899 	ldw	_fp_, y
                           0003E1   900 	Sstm8s_adc1$ADC1_SetLowThreshold$145 ==.
                           0003E1   901 	Sstm8s_adc1$ADC1_SetLowThreshold$146 ==.
                                    902 ;	StdPeriphLib/src/stm8s_adc1.c: 425: ADC1->LTRL = (uint8_t)Threshold;
      0003E1 7B 06            [ 1]  903 	ld	a, (0x06, sp)
      0003E3 AE 54 0B         [ 2]  904 	ldw	x, #0x540b
      0003E6 F7               [ 1]  905 	ld	(x), a
                           0003E7   906 	Sstm8s_adc1$ADC1_SetLowThreshold$147 ==.
                                    907 ;	StdPeriphLib/src/stm8s_adc1.c: 426: ADC1->LTRH = (uint8_t)(Threshold >> (uint8_t)2);
      0003E7 1E 05            [ 2]  908 	ldw	x, (0x05, sp)
      0003E9 54               [ 2]  909 	srlw	x
      0003EA 54               [ 2]  910 	srlw	x
      0003EB 9F               [ 1]  911 	ld	a, xl
      0003EC AE 54 0A         [ 2]  912 	ldw	x, #0x540a
      0003EF F7               [ 1]  913 	ld	(x), a
                           0003F0   914 	Sstm8s_adc1$ADC1_SetLowThreshold$148 ==.
                                    915 ;	StdPeriphLib/src/stm8s_adc1.c: 427: }
                           0003F0   916 	Sstm8s_adc1$ADC1_SetLowThreshold$149 ==.
                           0003F0   917 	XG$ADC1_SetLowThreshold$0$0 ==.
      0003F0 32u00u00         [ 1]  918 	pop	_fp_
      0003F3 32u00u01         [ 1]  919 	pop	_fp_+1
      0003F6 81               [ 4]  920 	ret
                           0003F7   921 	Sstm8s_adc1$ADC1_SetLowThreshold$150 ==.
                           0003F7   922 	Sstm8s_adc1$ADC1_GetBufferValue$151 ==.
                                    923 ;	StdPeriphLib/src/stm8s_adc1.c: 436: uint16_t ADC1_GetBufferValue(uint8_t Buffer)
                                    924 ;	-----------------------------------------
                                    925 ;	 function ADC1_GetBufferValue
                                    926 ;	-----------------------------------------
      0003F7                        927 _ADC1_GetBufferValue:
      0003F7 3Bu00u01         [ 1]  928 	push	_fp_+1
      0003FA 3Bu00u00         [ 1]  929 	push	_fp_
      0003FD 90 96            [ 1]  930 	ldw	y, sp
      0003FF 90 CFu00u00      [ 2]  931 	ldw	_fp_, y
                           000403   932 	Sstm8s_adc1$ADC1_GetBufferValue$152 ==.
      000403 52 0D            [ 2]  933 	sub	sp, #13
                           000405   934 	Sstm8s_adc1$ADC1_GetBufferValue$153 ==.
                                    935 ;	StdPeriphLib/src/stm8s_adc1.c: 444: if ((ADC1->CR2 & ADC1_CR2_ALIGN) != 0) /* Right alignment */
      000405 AE 54 02         [ 2]  936 	ldw	x, #0x5402
      000408 F6               [ 1]  937 	ld	a, (x)
      000409 A5 08            [ 1]  938 	bcp	a, #0x08
      00040B 27 2D            [ 1]  939 	jreq	00102$
                           00040D   940 	Sstm8s_adc1$ADC1_GetBufferValue$154 ==.
                                    941 ;	StdPeriphLib/src/stm8s_adc1.c: 447: templ = *(uint8_t*)(uint16_t)((uint16_t)ADC1_BaseAddress + (uint8_t)(Buffer << 1) + 1);
      00040D 7B 12            [ 1]  942 	ld	a, (0x12, sp)
      00040F 48               [ 1]  943 	sll	a
      000410 5F               [ 1]  944 	clrw	x
      000411 97               [ 1]  945 	ld	xl, a
      000412 1F 08            [ 2]  946 	ldw	(0x08, sp), x
      000414 1E 08            [ 2]  947 	ldw	x, (0x08, sp)
      000416 1C 53 E1         [ 2]  948 	addw	x, #0x53e1
      000419 F6               [ 1]  949 	ld	a, (x)
      00041A 6B 01            [ 1]  950 	ld	(0x01, sp), a
                           00041C   951 	Sstm8s_adc1$ADC1_GetBufferValue$155 ==.
                                    952 ;	StdPeriphLib/src/stm8s_adc1.c: 449: temph = *(uint8_t*)(uint16_t)((uint16_t)ADC1_BaseAddress + (uint8_t)(Buffer << 1));
      00041C 1E 08            [ 2]  953 	ldw	x, (0x08, sp)
      00041E 1C 53 E0         [ 2]  954 	addw	x, #0x53e0
      000421 F6               [ 1]  955 	ld	a, (x)
      000422 5F               [ 1]  956 	clrw	x
      000423 97               [ 1]  957 	ld	xl, a
      000424 1F 02            [ 2]  958 	ldw	(0x02, sp), x
                           000426   959 	Sstm8s_adc1$ADC1_GetBufferValue$156 ==.
                                    960 ;	StdPeriphLib/src/stm8s_adc1.c: 451: temph = (uint16_t)(templ | (uint16_t)(temph << (uint8_t)8));
      000426 7B 03            [ 1]  961 	ld	a, (0x03, sp)
      000428 0F 07            [ 1]  962 	clr	(0x07, sp)
      00042A 41               [ 1]  963 	exg	a, xl
      00042B 7B 01            [ 1]  964 	ld	a, (0x01, sp)
      00042D 41               [ 1]  965 	exg	a, xl
      00042E 0F 04            [ 1]  966 	clr	(0x04, sp)
      000430 1A 04            [ 1]  967 	or	a, (0x04, sp)
      000432 01               [ 1]  968 	rrwa	x
      000433 1A 07            [ 1]  969 	or	a, (0x07, sp)
      000435 97               [ 1]  970 	ld	xl, a
      000436 1F 02            [ 2]  971 	ldw	(0x02, sp), x
      000438 20 31            [ 2]  972 	jra	00103$
      00043A                        973 00102$:
                           00043A   974 	Sstm8s_adc1$ADC1_GetBufferValue$157 ==.
                                    975 ;	StdPeriphLib/src/stm8s_adc1.c: 456: temph = *(uint8_t*)(uint16_t)((uint16_t)ADC1_BaseAddress + (uint8_t)(Buffer << 1));
      00043A 7B 12            [ 1]  976 	ld	a, (0x12, sp)
      00043C 48               [ 1]  977 	sll	a
      00043D 5F               [ 1]  978 	clrw	x
      00043E 97               [ 1]  979 	ld	xl, a
      00043F 1F 0C            [ 2]  980 	ldw	(0x0c, sp), x
      000441 1E 0C            [ 2]  981 	ldw	x, (0x0c, sp)
      000443 1C 53 E0         [ 2]  982 	addw	x, #0x53e0
      000446 F6               [ 1]  983 	ld	a, (x)
      000447 5F               [ 1]  984 	clrw	x
      000448 97               [ 1]  985 	ld	xl, a
      000449 1F 02            [ 2]  986 	ldw	(0x02, sp), x
                           00044B   987 	Sstm8s_adc1$ADC1_GetBufferValue$158 ==.
                                    988 ;	StdPeriphLib/src/stm8s_adc1.c: 458: templ = *(uint8_t*)(uint16_t)((uint16_t)ADC1_BaseAddress + (uint8_t)(Buffer << 1) + 1);
      00044B 1E 0C            [ 2]  989 	ldw	x, (0x0c, sp)
      00044D 1C 53 E1         [ 2]  990 	addw	x, #0x53e1
      000450 F6               [ 1]  991 	ld	a, (x)
      000451 6B 01            [ 1]  992 	ld	(0x01, sp), a
                           000453   993 	Sstm8s_adc1$ADC1_GetBufferValue$159 ==.
                                    994 ;	StdPeriphLib/src/stm8s_adc1.c: 460: temph = (uint16_t)((uint16_t)((uint16_t)templ << 6) | (uint16_t)(temph << 8));
      000453 5F               [ 1]  995 	clrw	x
      000454 7B 01            [ 1]  996 	ld	a, (0x01, sp)
      000456 97               [ 1]  997 	ld	xl, a
      000457 58               [ 2]  998 	sllw	x
      000458 58               [ 2]  999 	sllw	x
      000459 58               [ 2] 1000 	sllw	x
      00045A 58               [ 2] 1001 	sllw	x
      00045B 58               [ 2] 1002 	sllw	x
      00045C 58               [ 2] 1003 	sllw	x
      00045D 1F 0A            [ 2] 1004 	ldw	(0x0a, sp), x
      00045F 7B 03            [ 1] 1005 	ld	a, (0x03, sp)
      000461 95               [ 1] 1006 	ld	xh, a
      000462 4F               [ 1] 1007 	clr	a
      000463 1A 0B            [ 1] 1008 	or	a, (0x0b, sp)
      000465 02               [ 1] 1009 	rlwa	x
      000466 1A 0A            [ 1] 1010 	or	a, (0x0a, sp)
      000468 95               [ 1] 1011 	ld	xh, a
      000469 1F 02            [ 2] 1012 	ldw	(0x02, sp), x
      00046B                       1013 00103$:
                           00046B  1014 	Sstm8s_adc1$ADC1_GetBufferValue$160 ==.
                                   1015 ;	StdPeriphLib/src/stm8s_adc1.c: 463: return ((uint16_t)temph);
      00046B 1E 02            [ 2] 1016 	ldw	x, (0x02, sp)
                           00046D  1017 	Sstm8s_adc1$ADC1_GetBufferValue$161 ==.
                                   1018 ;	StdPeriphLib/src/stm8s_adc1.c: 464: }
      00046D 5B 0D            [ 2] 1019 	addw	sp, #13
                           00046F  1020 	Sstm8s_adc1$ADC1_GetBufferValue$162 ==.
                           00046F  1021 	XG$ADC1_GetBufferValue$0$0 ==.
      00046F 32u00u00         [ 1] 1022 	pop	_fp_
      000472 32u00u01         [ 1] 1023 	pop	_fp_+1
      000475 81               [ 4] 1024 	ret
                           000476  1025 	Sstm8s_adc1$ADC1_GetBufferValue$163 ==.
                           000476  1026 	Sstm8s_adc1$ADC1_GetAWDChannelStatus$164 ==.
                                   1027 ;	StdPeriphLib/src/stm8s_adc1.c: 472: FlagStatus ADC1_GetAWDChannelStatus(ADC1_Channel_TypeDef Channel)
                                   1028 ;	-----------------------------------------
                                   1029 ;	 function ADC1_GetAWDChannelStatus
                                   1030 ;	-----------------------------------------
      000476                       1031 _ADC1_GetAWDChannelStatus:
      000476 3Bu00u01         [ 1] 1032 	push	_fp_+1
      000479 3Bu00u00         [ 1] 1033 	push	_fp_
      00047C 90 96            [ 1] 1034 	ldw	y, sp
      00047E 90 CFu00u00      [ 2] 1035 	ldw	_fp_, y
                           000482  1036 	Sstm8s_adc1$ADC1_GetAWDChannelStatus$165 ==.
      000482 52 02            [ 2] 1037 	sub	sp, #2
                           000484  1038 	Sstm8s_adc1$ADC1_GetAWDChannelStatus$166 ==.
                                   1039 ;	StdPeriphLib/src/stm8s_adc1.c: 479: if (Channel < (uint8_t)8)
      000484 7B 07            [ 1] 1040 	ld	a, (0x07, sp)
      000486 A1 08            [ 1] 1041 	cp	a, #0x08
      000488 24 17            [ 1] 1042 	jrnc	00102$
                           00048A  1043 	Sstm8s_adc1$ADC1_GetAWDChannelStatus$167 ==.
                                   1044 ;	StdPeriphLib/src/stm8s_adc1.c: 481: status = (uint8_t)(ADC1->AWSRL & (uint8_t)((uint8_t)1 << Channel));
      00048A AE 54 0D         [ 2] 1045 	ldw	x, #0x540d
      00048D F6               [ 1] 1046 	ld	a, (x)
      00048E 88               [ 1] 1047 	push	a
      00048F A6 01            [ 1] 1048 	ld	a, #0x01
      000491 6B 02            [ 1] 1049 	ld	(0x02, sp), a
      000493 7B 08            [ 1] 1050 	ld	a, (0x08, sp)
      000495 27 05            [ 1] 1051 	jreq	00111$
      000497                       1052 00110$:
      000497 08 02            [ 1] 1053 	sll	(0x02, sp)
      000499 4A               [ 1] 1054 	dec	a
      00049A 26 FB            [ 1] 1055 	jrne	00110$
      00049C                       1056 00111$:
      00049C 84               [ 1] 1057 	pop	a
      00049D 14 01            [ 1] 1058 	and	a, (0x01, sp)
      00049F 20 1A            [ 2] 1059 	jra	00103$
      0004A1                       1060 00102$:
                           0004A1  1061 	Sstm8s_adc1$ADC1_GetAWDChannelStatus$168 ==.
                                   1062 ;	StdPeriphLib/src/stm8s_adc1.c: 485: status = (uint8_t)(ADC1->AWSRH & (uint8_t)((uint8_t)1 << (Channel - (uint8_t)8)));
      0004A1 AE 54 0C         [ 2] 1063 	ldw	x, #0x540c
      0004A4 F6               [ 1] 1064 	ld	a, (x)
      0004A5 97               [ 1] 1065 	ld	xl, a
      0004A6 7B 07            [ 1] 1066 	ld	a, (0x07, sp)
      0004A8 A0 08            [ 1] 1067 	sub	a, #0x08
      0004AA 88               [ 1] 1068 	push	a
      0004AB A6 01            [ 1] 1069 	ld	a, #0x01
      0004AD 6B 03            [ 1] 1070 	ld	(0x03, sp), a
      0004AF 84               [ 1] 1071 	pop	a
      0004B0 4D               [ 1] 1072 	tnz	a
      0004B1 27 05            [ 1] 1073 	jreq	00113$
      0004B3                       1074 00112$:
      0004B3 08 02            [ 1] 1075 	sll	(0x02, sp)
      0004B5 4A               [ 1] 1076 	dec	a
      0004B6 26 FB            [ 1] 1077 	jrne	00112$
      0004B8                       1078 00113$:
      0004B8 9F               [ 1] 1079 	ld	a, xl
      0004B9 14 02            [ 1] 1080 	and	a, (0x02, sp)
      0004BB                       1081 00103$:
                           0004BB  1082 	Sstm8s_adc1$ADC1_GetAWDChannelStatus$169 ==.
                                   1083 ;	StdPeriphLib/src/stm8s_adc1.c: 488: return ((FlagStatus)status);
                           0004BB  1084 	Sstm8s_adc1$ADC1_GetAWDChannelStatus$170 ==.
                                   1085 ;	StdPeriphLib/src/stm8s_adc1.c: 489: }
      0004BB 5B 02            [ 2] 1086 	addw	sp, #2
                           0004BD  1087 	Sstm8s_adc1$ADC1_GetAWDChannelStatus$171 ==.
                           0004BD  1088 	XG$ADC1_GetAWDChannelStatus$0$0 ==.
      0004BD 32u00u00         [ 1] 1089 	pop	_fp_
      0004C0 32u00u01         [ 1] 1090 	pop	_fp_+1
      0004C3 81               [ 4] 1091 	ret
                           0004C4  1092 	Sstm8s_adc1$ADC1_GetAWDChannelStatus$172 ==.
                           0004C4  1093 	Sstm8s_adc1$ADC1_GetFlagStatus$173 ==.
                                   1094 ;	StdPeriphLib/src/stm8s_adc1.c: 497: FlagStatus ADC1_GetFlagStatus(ADC1_Flag_TypeDef Flag)
                                   1095 ;	-----------------------------------------
                                   1096 ;	 function ADC1_GetFlagStatus
                                   1097 ;	-----------------------------------------
      0004C4                       1098 _ADC1_GetFlagStatus:
      0004C4 3Bu00u01         [ 1] 1099 	push	_fp_+1
      0004C7 3Bu00u00         [ 1] 1100 	push	_fp_
      0004CA 90 96            [ 1] 1101 	ldw	y, sp
      0004CC 90 CFu00u00      [ 2] 1102 	ldw	_fp_, y
                           0004D0  1103 	Sstm8s_adc1$ADC1_GetFlagStatus$174 ==.
      0004D0 52 03            [ 2] 1104 	sub	sp, #3
                           0004D2  1105 	Sstm8s_adc1$ADC1_GetFlagStatus$175 ==.
                                   1106 ;	StdPeriphLib/src/stm8s_adc1.c: 502: if ((Flag & 0x0F) == 0x01)
      0004D2 7B 08            [ 1] 1107 	ld	a, (0x08, sp)
      0004D4 A4 0F            [ 1] 1108 	and	a, #0x0f
      0004D6 6B 03            [ 1] 1109 	ld	(0x03, sp), a
      0004D8 7B 03            [ 1] 1110 	ld	a, (0x03, sp)
      0004DA A1 01            [ 1] 1111 	cp	a, #0x01
      0004DC 26 08            [ 1] 1112 	jrne	00108$
                           0004DE  1113 	Sstm8s_adc1$ADC1_GetFlagStatus$176 ==.
                                   1114 ;	StdPeriphLib/src/stm8s_adc1.c: 505: flagstatus = (uint8_t)(ADC1->CR3 & ADC1_CR3_OVR);
      0004DE AE 54 03         [ 2] 1115 	ldw	x, #0x5403
      0004E1 F6               [ 1] 1116 	ld	a, (x)
      0004E2 A4 40            [ 1] 1117 	and	a, #0x40
      0004E4 20 48            [ 2] 1118 	jra	00109$
      0004E6                       1119 00108$:
                           0004E6  1120 	Sstm8s_adc1$ADC1_GetFlagStatus$177 ==.
                                   1121 ;	StdPeriphLib/src/stm8s_adc1.c: 507: else if ((Flag & 0xF0) == 0x10)
      0004E6 7B 08            [ 1] 1122 	ld	a, (0x08, sp)
      0004E8 A4 F0            [ 1] 1123 	and	a, #0xf0
      0004EA A1 10            [ 1] 1124 	cp	a, #0x10
      0004EC 26 3A            [ 1] 1125 	jrne	00105$
                           0004EE  1126 	Sstm8s_adc1$ADC1_GetFlagStatus$178 ==.
                                   1127 ;	StdPeriphLib/src/stm8s_adc1.c: 510: temp = (uint8_t)(Flag & (uint8_t)0x0F);
      0004EE 7B 03            [ 1] 1128 	ld	a, (0x03, sp)
                           0004F0  1129 	Sstm8s_adc1$ADC1_GetFlagStatus$179 ==.
                                   1130 ;	StdPeriphLib/src/stm8s_adc1.c: 511: if (temp < 8)
      0004F0 A1 08            [ 1] 1131 	cp	a, #0x08
      0004F2 24 18            [ 1] 1132 	jrnc	00102$
                           0004F4  1133 	Sstm8s_adc1$ADC1_GetFlagStatus$180 ==.
                                   1134 ;	StdPeriphLib/src/stm8s_adc1.c: 513: flagstatus = (uint8_t)(ADC1->AWSRL & (uint8_t)((uint8_t)1 << temp));
      0004F4 AE 54 0D         [ 2] 1135 	ldw	x, #0x540d
      0004F7 88               [ 1] 1136 	push	a
      0004F8 F6               [ 1] 1137 	ld	a, (x)
      0004F9 97               [ 1] 1138 	ld	xl, a
      0004FA A6 01            [ 1] 1139 	ld	a, #0x01
      0004FC 6B 02            [ 1] 1140 	ld	(0x02, sp), a
      0004FE 84               [ 1] 1141 	pop	a
      0004FF 4D               [ 1] 1142 	tnz	a
      000500 27 05            [ 1] 1143 	jreq	00129$
      000502                       1144 00128$:
      000502 08 01            [ 1] 1145 	sll	(0x01, sp)
      000504 4A               [ 1] 1146 	dec	a
      000505 26 FB            [ 1] 1147 	jrne	00128$
      000507                       1148 00129$:
      000507 9F               [ 1] 1149 	ld	a, xl
      000508 14 01            [ 1] 1150 	and	a, (0x01, sp)
      00050A 20 22            [ 2] 1151 	jra	00109$
      00050C                       1152 00102$:
                           00050C  1153 	Sstm8s_adc1$ADC1_GetFlagStatus$181 ==.
                                   1154 ;	StdPeriphLib/src/stm8s_adc1.c: 517: flagstatus = (uint8_t)(ADC1->AWSRH & (uint8_t)((uint8_t)1 << (temp - 8)));
      00050C AE 54 0C         [ 2] 1155 	ldw	x, #0x540c
      00050F 88               [ 1] 1156 	push	a
      000510 F6               [ 1] 1157 	ld	a, (x)
      000511 6B 03            [ 1] 1158 	ld	(0x03, sp), a
      000513 84               [ 1] 1159 	pop	a
      000514 A0 08            [ 1] 1160 	sub	a, #0x08
      000516 97               [ 1] 1161 	ld	xl, a
      000517 A6 01            [ 1] 1162 	ld	a, #0x01
      000519 88               [ 1] 1163 	push	a
      00051A 9F               [ 1] 1164 	ld	a, xl
      00051B 4D               [ 1] 1165 	tnz	a
      00051C 27 05            [ 1] 1166 	jreq	00131$
      00051E                       1167 00130$:
      00051E 08 01            [ 1] 1168 	sll	(1, sp)
      000520 4A               [ 1] 1169 	dec	a
      000521 26 FB            [ 1] 1170 	jrne	00130$
      000523                       1171 00131$:
      000523 84               [ 1] 1172 	pop	a
      000524 14 02            [ 1] 1173 	and	a, (0x02, sp)
      000526 20 06            [ 2] 1174 	jra	00109$
      000528                       1175 00105$:
                           000528  1176 	Sstm8s_adc1$ADC1_GetFlagStatus$182 ==.
                                   1177 ;	StdPeriphLib/src/stm8s_adc1.c: 522: flagstatus = (uint8_t)(ADC1->CSR & Flag);
      000528 AE 54 00         [ 2] 1178 	ldw	x, #0x5400
      00052B F6               [ 1] 1179 	ld	a, (x)
      00052C 14 08            [ 1] 1180 	and	a, (0x08, sp)
      00052E                       1181 00109$:
                           00052E  1182 	Sstm8s_adc1$ADC1_GetFlagStatus$183 ==.
                                   1183 ;	StdPeriphLib/src/stm8s_adc1.c: 524: return ((FlagStatus)flagstatus);
                           00052E  1184 	Sstm8s_adc1$ADC1_GetFlagStatus$184 ==.
                                   1185 ;	StdPeriphLib/src/stm8s_adc1.c: 526: }
      00052E 5B 03            [ 2] 1186 	addw	sp, #3
                           000530  1187 	Sstm8s_adc1$ADC1_GetFlagStatus$185 ==.
                           000530  1188 	XG$ADC1_GetFlagStatus$0$0 ==.
      000530 32u00u00         [ 1] 1189 	pop	_fp_
      000533 32u00u01         [ 1] 1190 	pop	_fp_+1
      000536 81               [ 4] 1191 	ret
                           000537  1192 	Sstm8s_adc1$ADC1_GetFlagStatus$186 ==.
                           000537  1193 	Sstm8s_adc1$ADC1_ClearFlag$187 ==.
                                   1194 ;	StdPeriphLib/src/stm8s_adc1.c: 534: void ADC1_ClearFlag(ADC1_Flag_TypeDef Flag)
                                   1195 ;	-----------------------------------------
                                   1196 ;	 function ADC1_ClearFlag
                                   1197 ;	-----------------------------------------
      000537                       1198 _ADC1_ClearFlag:
      000537 3Bu00u01         [ 1] 1199 	push	_fp_+1
      00053A 3Bu00u00         [ 1] 1200 	push	_fp_
      00053D 90 96            [ 1] 1201 	ldw	y, sp
      00053F 90 CFu00u00      [ 2] 1202 	ldw	_fp_, y
                           000543  1203 	Sstm8s_adc1$ADC1_ClearFlag$188 ==.
      000543 52 03            [ 2] 1204 	sub	sp, #3
                           000545  1205 	Sstm8s_adc1$ADC1_ClearFlag$189 ==.
                                   1206 ;	StdPeriphLib/src/stm8s_adc1.c: 541: if ((Flag & 0x0F) == 0x01)
      000545 7B 08            [ 1] 1207 	ld	a, (0x08, sp)
      000547 A4 0F            [ 1] 1208 	and	a, #0x0f
      000549 97               [ 1] 1209 	ld	xl, a
      00054A A1 01            [ 1] 1210 	cp	a, #0x01
      00054C 26 0A            [ 1] 1211 	jrne	00108$
                           00054E  1212 	Sstm8s_adc1$ADC1_ClearFlag$190 ==.
                                   1213 ;	StdPeriphLib/src/stm8s_adc1.c: 544: ADC1->CR3 &= (uint8_t)(~ADC1_CR3_OVR);
      00054E AE 54 03         [ 2] 1214 	ldw	x, #0x5403
      000551 F6               [ 1] 1215 	ld	a, (x)
      000552 A4 BF            [ 1] 1216 	and	a, #0xbf
      000554 F7               [ 1] 1217 	ld	(x), a
      000555 CCr05rB3         [ 2] 1218 	jp	00110$
      000558                       1219 00108$:
                           000558  1220 	Sstm8s_adc1$ADC1_ClearFlag$191 ==.
                                   1221 ;	StdPeriphLib/src/stm8s_adc1.c: 546: else if ((Flag & 0xF0) == 0x10)
      000558 7B 08            [ 1] 1222 	ld	a, (0x08, sp)
      00055A A4 F0            [ 1] 1223 	and	a, #0xf0
      00055C A1 10            [ 1] 1224 	cp	a, #0x10
      00055E 26 44            [ 1] 1225 	jrne	00105$
                           000560  1226 	Sstm8s_adc1$ADC1_ClearFlag$192 ==.
                                   1227 ;	StdPeriphLib/src/stm8s_adc1.c: 549: temp = (uint8_t)(Flag & (uint8_t)0x0F);
                           000560  1228 	Sstm8s_adc1$ADC1_ClearFlag$193 ==.
                                   1229 ;	StdPeriphLib/src/stm8s_adc1.c: 550: if (temp < 8)
      000560 9F               [ 1] 1230 	ld	a, xl
      000561 A1 08            [ 1] 1231 	cp	a, #0x08
      000563 24 1E            [ 1] 1232 	jrnc	00102$
                           000565  1233 	Sstm8s_adc1$ADC1_ClearFlag$194 ==.
                                   1234 ;	StdPeriphLib/src/stm8s_adc1.c: 552: ADC1->AWSRL &= (uint8_t)~(uint8_t)((uint8_t)1 << temp);
      000565 90 AE 54 0D      [ 2] 1235 	ldw	y, #0x540d
      000569 90 F6            [ 1] 1236 	ld	a, (y)
      00056B 6B 03            [ 1] 1237 	ld	(0x03, sp), a
      00056D A6 01            [ 1] 1238 	ld	a, #0x01
      00056F 88               [ 1] 1239 	push	a
      000570 9F               [ 1] 1240 	ld	a, xl
      000571 4D               [ 1] 1241 	tnz	a
      000572 27 05            [ 1] 1242 	jreq	00129$
      000574                       1243 00128$:
      000574 08 01            [ 1] 1244 	sll	(1, sp)
      000576 4A               [ 1] 1245 	dec	a
      000577 26 FB            [ 1] 1246 	jrne	00128$
      000579                       1247 00129$:
      000579 84               [ 1] 1248 	pop	a
      00057A 43               [ 1] 1249 	cpl	a
      00057B 14 03            [ 1] 1250 	and	a, (0x03, sp)
      00057D AE 54 0D         [ 2] 1251 	ldw	x, #0x540d
      000580 F7               [ 1] 1252 	ld	(x), a
      000581 20 30            [ 2] 1253 	jra	00110$
      000583                       1254 00102$:
                           000583  1255 	Sstm8s_adc1$ADC1_ClearFlag$195 ==.
                                   1256 ;	StdPeriphLib/src/stm8s_adc1.c: 556: ADC1->AWSRH &= (uint8_t)~(uint8_t)((uint8_t)1 << (temp - 8));
      000583 90 AE 54 0C      [ 2] 1257 	ldw	y, #0x540c
      000587 90 F6            [ 1] 1258 	ld	a, (y)
      000589 6B 02            [ 1] 1259 	ld	(0x02, sp), a
      00058B 1D 00 08         [ 2] 1260 	subw	x, #8
      00058E A6 01            [ 1] 1261 	ld	a, #0x01
      000590 88               [ 1] 1262 	push	a
      000591 9F               [ 1] 1263 	ld	a, xl
      000592 4D               [ 1] 1264 	tnz	a
      000593 27 05            [ 1] 1265 	jreq	00131$
      000595                       1266 00130$:
      000595 08 01            [ 1] 1267 	sll	(1, sp)
      000597 4A               [ 1] 1268 	dec	a
      000598 26 FB            [ 1] 1269 	jrne	00130$
      00059A                       1270 00131$:
      00059A 84               [ 1] 1271 	pop	a
      00059B 43               [ 1] 1272 	cpl	a
      00059C 14 02            [ 1] 1273 	and	a, (0x02, sp)
      00059E AE 54 0C         [ 2] 1274 	ldw	x, #0x540c
      0005A1 F7               [ 1] 1275 	ld	(x), a
      0005A2 20 0F            [ 2] 1276 	jra	00110$
      0005A4                       1277 00105$:
                           0005A4  1278 	Sstm8s_adc1$ADC1_ClearFlag$196 ==.
                                   1279 ;	StdPeriphLib/src/stm8s_adc1.c: 561: ADC1->CSR &= (uint8_t) (~Flag);
      0005A4 AE 54 00         [ 2] 1280 	ldw	x, #0x5400
      0005A7 F6               [ 1] 1281 	ld	a, (x)
      0005A8 6B 01            [ 1] 1282 	ld	(0x01, sp), a
      0005AA 7B 08            [ 1] 1283 	ld	a, (0x08, sp)
      0005AC 43               [ 1] 1284 	cpl	a
      0005AD 14 01            [ 1] 1285 	and	a, (0x01, sp)
      0005AF AE 54 00         [ 2] 1286 	ldw	x, #0x5400
      0005B2 F7               [ 1] 1287 	ld	(x), a
      0005B3                       1288 00110$:
                           0005B3  1289 	Sstm8s_adc1$ADC1_ClearFlag$197 ==.
                                   1290 ;	StdPeriphLib/src/stm8s_adc1.c: 563: }
      0005B3 5B 03            [ 2] 1291 	addw	sp, #3
                           0005B5  1292 	Sstm8s_adc1$ADC1_ClearFlag$198 ==.
                           0005B5  1293 	XG$ADC1_ClearFlag$0$0 ==.
      0005B5 32u00u00         [ 1] 1294 	pop	_fp_
      0005B8 32u00u01         [ 1] 1295 	pop	_fp_+1
      0005BB 81               [ 4] 1296 	ret
                           0005BC  1297 	Sstm8s_adc1$ADC1_ClearFlag$199 ==.
                           0005BC  1298 	Sstm8s_adc1$ADC1_GetITStatus$200 ==.
                                   1299 ;	StdPeriphLib/src/stm8s_adc1.c: 583: ITStatus ADC1_GetITStatus(ADC1_IT_TypeDef ITPendingBit)
                                   1300 ;	-----------------------------------------
                                   1301 ;	 function ADC1_GetITStatus
                                   1302 ;	-----------------------------------------
      0005BC                       1303 _ADC1_GetITStatus:
      0005BC 3Bu00u01         [ 1] 1304 	push	_fp_+1
      0005BF 3Bu00u00         [ 1] 1305 	push	_fp_
      0005C2 90 96            [ 1] 1306 	ldw	y, sp
      0005C4 90 CFu00u00      [ 2] 1307 	ldw	_fp_, y
                           0005C8  1308 	Sstm8s_adc1$ADC1_GetITStatus$201 ==.
      0005C8 52 03            [ 2] 1309 	sub	sp, #3
                           0005CA  1310 	Sstm8s_adc1$ADC1_GetITStatus$202 ==.
                                   1311 ;	StdPeriphLib/src/stm8s_adc1.c: 591: if (((uint16_t)ITPendingBit & 0xF0) == 0x10)
      0005CA 7B 09            [ 1] 1312 	ld	a, (0x09, sp)
      0005CC A4 F0            [ 1] 1313 	and	a, #0xf0
      0005CE 97               [ 1] 1314 	ld	xl, a
      0005CF 4F               [ 1] 1315 	clr	a
      0005D0 95               [ 1] 1316 	ld	xh, a
      0005D1 A3 00 10         [ 2] 1317 	cpw	x, #0x0010
      0005D4 26 40            [ 1] 1318 	jrne	00105$
                           0005D6  1319 	Sstm8s_adc1$ADC1_GetITStatus$203 ==.
                                   1320 ;	StdPeriphLib/src/stm8s_adc1.c: 594: temp = (uint8_t)((uint16_t)ITPendingBit & 0x0F);
      0005D6 7B 09            [ 1] 1321 	ld	a, (0x09, sp)
      0005D8 A4 0F            [ 1] 1322 	and	a, #0x0f
      0005DA 97               [ 1] 1323 	ld	xl, a
      0005DB 4F               [ 1] 1324 	clr	a
                           0005DC  1325 	Sstm8s_adc1$ADC1_GetITStatus$204 ==.
                                   1326 ;	StdPeriphLib/src/stm8s_adc1.c: 595: if (temp < 8)
      0005DC 9F               [ 1] 1327 	ld	a, xl
      0005DD A1 08            [ 1] 1328 	cp	a, #0x08
      0005DF 24 19            [ 1] 1329 	jrnc	00102$
                           0005E1  1330 	Sstm8s_adc1$ADC1_GetITStatus$205 ==.
                                   1331 ;	StdPeriphLib/src/stm8s_adc1.c: 597: itstatus = (ITStatus)(ADC1->AWSRL & (uint8_t)((uint8_t)1 << temp));
      0005E1 90 AE 54 0D      [ 2] 1332 	ldw	y, #0x540d
      0005E5 90 F6            [ 1] 1333 	ld	a, (y)
      0005E7 6B 01            [ 1] 1334 	ld	(0x01, sp), a
      0005E9 A6 01            [ 1] 1335 	ld	a, #0x01
      0005EB 88               [ 1] 1336 	push	a
      0005EC 9F               [ 1] 1337 	ld	a, xl
      0005ED 4D               [ 1] 1338 	tnz	a
      0005EE 27 05            [ 1] 1339 	jreq	00120$
      0005F0                       1340 00119$:
      0005F0 08 01            [ 1] 1341 	sll	(1, sp)
      0005F2 4A               [ 1] 1342 	dec	a
      0005F3 26 FB            [ 1] 1343 	jrne	00119$
      0005F5                       1344 00120$:
      0005F5 84               [ 1] 1345 	pop	a
      0005F6 14 01            [ 1] 1346 	and	a, (0x01, sp)
      0005F8 20 26            [ 2] 1347 	jra	00106$
      0005FA                       1348 00102$:
                           0005FA  1349 	Sstm8s_adc1$ADC1_GetITStatus$206 ==.
                                   1350 ;	StdPeriphLib/src/stm8s_adc1.c: 601: itstatus = (ITStatus)(ADC1->AWSRH & (uint8_t)((uint8_t)1 << (temp - 8)));
      0005FA 90 AE 54 0C      [ 2] 1351 	ldw	y, #0x540c
      0005FE 90 F6            [ 1] 1352 	ld	a, (y)
      000600 6B 03            [ 1] 1353 	ld	(0x03, sp), a
      000602 1D 00 08         [ 2] 1354 	subw	x, #8
      000605 A6 01            [ 1] 1355 	ld	a, #0x01
      000607 88               [ 1] 1356 	push	a
      000608 9F               [ 1] 1357 	ld	a, xl
      000609 4D               [ 1] 1358 	tnz	a
      00060A 27 05            [ 1] 1359 	jreq	00122$
      00060C                       1360 00121$:
      00060C 08 01            [ 1] 1361 	sll	(1, sp)
      00060E 4A               [ 1] 1362 	dec	a
      00060F 26 FB            [ 1] 1363 	jrne	00121$
      000611                       1364 00122$:
      000611 84               [ 1] 1365 	pop	a
      000612 14 03            [ 1] 1366 	and	a, (0x03, sp)
      000614 20 0A            [ 2] 1367 	jra	00106$
      000616                       1368 00105$:
                           000616  1369 	Sstm8s_adc1$ADC1_GetITStatus$207 ==.
                                   1370 ;	StdPeriphLib/src/stm8s_adc1.c: 606: itstatus = (ITStatus)(ADC1->CSR & (uint8_t)ITPendingBit);
      000616 AE 54 00         [ 2] 1371 	ldw	x, #0x5400
      000619 F6               [ 1] 1372 	ld	a, (x)
      00061A 6B 02            [ 1] 1373 	ld	(0x02, sp), a
      00061C 7B 09            [ 1] 1374 	ld	a, (0x09, sp)
      00061E 14 02            [ 1] 1375 	and	a, (0x02, sp)
      000620                       1376 00106$:
                           000620  1377 	Sstm8s_adc1$ADC1_GetITStatus$208 ==.
                                   1378 ;	StdPeriphLib/src/stm8s_adc1.c: 608: return ((ITStatus)itstatus);
                           000620  1379 	Sstm8s_adc1$ADC1_GetITStatus$209 ==.
                                   1380 ;	StdPeriphLib/src/stm8s_adc1.c: 609: }
      000620 5B 03            [ 2] 1381 	addw	sp, #3
                           000622  1382 	Sstm8s_adc1$ADC1_GetITStatus$210 ==.
                           000622  1383 	XG$ADC1_GetITStatus$0$0 ==.
      000622 32u00u00         [ 1] 1384 	pop	_fp_
      000625 32u00u01         [ 1] 1385 	pop	_fp_+1
      000628 81               [ 4] 1386 	ret
                           000629  1387 	Sstm8s_adc1$ADC1_GetITStatus$211 ==.
                           000629  1388 	Sstm8s_adc1$ADC1_ClearITPendingBit$212 ==.
                                   1389 ;	StdPeriphLib/src/stm8s_adc1.c: 629: void ADC1_ClearITPendingBit(ADC1_IT_TypeDef ITPendingBit)
                                   1390 ;	-----------------------------------------
                                   1391 ;	 function ADC1_ClearITPendingBit
                                   1392 ;	-----------------------------------------
      000629                       1393 _ADC1_ClearITPendingBit:
      000629 3Bu00u01         [ 1] 1394 	push	_fp_+1
      00062C 3Bu00u00         [ 1] 1395 	push	_fp_
      00062F 90 96            [ 1] 1396 	ldw	y, sp
      000631 90 CFu00u00      [ 2] 1397 	ldw	_fp_, y
                           000635  1398 	Sstm8s_adc1$ADC1_ClearITPendingBit$213 ==.
      000635 52 02            [ 2] 1399 	sub	sp, #2
                           000637  1400 	Sstm8s_adc1$ADC1_ClearITPendingBit$214 ==.
                                   1401 ;	StdPeriphLib/src/stm8s_adc1.c: 636: if (((uint16_t)ITPendingBit & 0xF0) == 0x10)
      000637 7B 08            [ 1] 1402 	ld	a, (0x08, sp)
      000639 A4 F0            [ 1] 1403 	and	a, #0xf0
      00063B 97               [ 1] 1404 	ld	xl, a
      00063C 4F               [ 1] 1405 	clr	a
      00063D 95               [ 1] 1406 	ld	xh, a
      00063E A3 00 10         [ 2] 1407 	cpw	x, #0x0010
      000641 26 4A            [ 1] 1408 	jrne	00105$
                           000643  1409 	Sstm8s_adc1$ADC1_ClearITPendingBit$215 ==.
                                   1410 ;	StdPeriphLib/src/stm8s_adc1.c: 639: temp = (uint8_t)((uint16_t)ITPendingBit & 0x0F);
      000643 7B 08            [ 1] 1411 	ld	a, (0x08, sp)
      000645 A4 0F            [ 1] 1412 	and	a, #0x0f
      000647 97               [ 1] 1413 	ld	xl, a
      000648 4F               [ 1] 1414 	clr	a
                           000649  1415 	Sstm8s_adc1$ADC1_ClearITPendingBit$216 ==.
                                   1416 ;	StdPeriphLib/src/stm8s_adc1.c: 640: if (temp < 8)
      000649 9F               [ 1] 1417 	ld	a, xl
      00064A A1 08            [ 1] 1418 	cp	a, #0x08
      00064C 24 1E            [ 1] 1419 	jrnc	00102$
                           00064E  1420 	Sstm8s_adc1$ADC1_ClearITPendingBit$217 ==.
                                   1421 ;	StdPeriphLib/src/stm8s_adc1.c: 642: ADC1->AWSRL &= (uint8_t)~(uint8_t)((uint8_t)1 << temp);
      00064E 90 AE 54 0D      [ 2] 1422 	ldw	y, #0x540d
      000652 90 F6            [ 1] 1423 	ld	a, (y)
      000654 6B 01            [ 1] 1424 	ld	(0x01, sp), a
      000656 A6 01            [ 1] 1425 	ld	a, #0x01
      000658 88               [ 1] 1426 	push	a
      000659 9F               [ 1] 1427 	ld	a, xl
      00065A 4D               [ 1] 1428 	tnz	a
      00065B 27 05            [ 1] 1429 	jreq	00120$
      00065D                       1430 00119$:
      00065D 08 01            [ 1] 1431 	sll	(1, sp)
      00065F 4A               [ 1] 1432 	dec	a
      000660 26 FB            [ 1] 1433 	jrne	00119$
      000662                       1434 00120$:
      000662 84               [ 1] 1435 	pop	a
      000663 43               [ 1] 1436 	cpl	a
      000664 14 01            [ 1] 1437 	and	a, (0x01, sp)
      000666 AE 54 0D         [ 2] 1438 	ldw	x, #0x540d
      000669 F7               [ 1] 1439 	ld	(x), a
      00066A 20 30            [ 2] 1440 	jra	00107$
      00066C                       1441 00102$:
                           00066C  1442 	Sstm8s_adc1$ADC1_ClearITPendingBit$218 ==.
                                   1443 ;	StdPeriphLib/src/stm8s_adc1.c: 646: ADC1->AWSRH &= (uint8_t)~(uint8_t)((uint8_t)1 << (temp - 8));
      00066C 90 AE 54 0C      [ 2] 1444 	ldw	y, #0x540c
      000670 90 F6            [ 1] 1445 	ld	a, (y)
      000672 6B 02            [ 1] 1446 	ld	(0x02, sp), a
      000674 1D 00 08         [ 2] 1447 	subw	x, #8
      000677 A6 01            [ 1] 1448 	ld	a, #0x01
      000679 88               [ 1] 1449 	push	a
      00067A 9F               [ 1] 1450 	ld	a, xl
      00067B 4D               [ 1] 1451 	tnz	a
      00067C 27 05            [ 1] 1452 	jreq	00122$
      00067E                       1453 00121$:
      00067E 08 01            [ 1] 1454 	sll	(1, sp)
      000680 4A               [ 1] 1455 	dec	a
      000681 26 FB            [ 1] 1456 	jrne	00121$
      000683                       1457 00122$:
      000683 84               [ 1] 1458 	pop	a
      000684 43               [ 1] 1459 	cpl	a
      000685 14 02            [ 1] 1460 	and	a, (0x02, sp)
      000687 AE 54 0C         [ 2] 1461 	ldw	x, #0x540c
      00068A F7               [ 1] 1462 	ld	(x), a
      00068B 20 0F            [ 2] 1463 	jra	00107$
      00068D                       1464 00105$:
                           00068D  1465 	Sstm8s_adc1$ADC1_ClearITPendingBit$219 ==.
                                   1466 ;	StdPeriphLib/src/stm8s_adc1.c: 651: ADC1->CSR &= (uint8_t)((uint16_t)~(uint16_t)ITPendingBit);
      00068D AE 54 00         [ 2] 1467 	ldw	x, #0x5400
      000690 F6               [ 1] 1468 	ld	a, (x)
      000691 1E 07            [ 2] 1469 	ldw	x, (0x07, sp)
      000693 53               [ 2] 1470 	cplw	x
      000694 89               [ 2] 1471 	pushw	x
      000695 14 02            [ 1] 1472 	and	a, (2, sp)
      000697 85               [ 2] 1473 	popw	x
      000698 AE 54 00         [ 2] 1474 	ldw	x, #0x5400
      00069B F7               [ 1] 1475 	ld	(x), a
      00069C                       1476 00107$:
                           00069C  1477 	Sstm8s_adc1$ADC1_ClearITPendingBit$220 ==.
                                   1478 ;	StdPeriphLib/src/stm8s_adc1.c: 653: }
      00069C 5B 02            [ 2] 1479 	addw	sp, #2
                           00069E  1480 	Sstm8s_adc1$ADC1_ClearITPendingBit$221 ==.
                           00069E  1481 	XG$ADC1_ClearITPendingBit$0$0 ==.
      00069E 32u00u00         [ 1] 1482 	pop	_fp_
      0006A1 32u00u01         [ 1] 1483 	pop	_fp_+1
      0006A4 81               [ 4] 1484 	ret
                           0006A5  1485 	Sstm8s_adc1$ADC1_ClearITPendingBit$222 ==.
                                   1486 	.area CODE
                                   1487 	.area INITIALIZER
                                   1488 	.area CABS (ABS)
                                   1489 
                                   1490 	.area .debug_line (NOLOAD)
      000000 00 00 05 C5           1491 	.dw	0,Ldebug_line_end-Ldebug_line_start
      000004                       1492 Ldebug_line_start:
      000004 00 02                 1493 	.dw	2
      000006 00 00 01 19           1494 	.dw	0,Ldebug_line_stmt-6-Ldebug_line_start
      00000A 01                    1495 	.db	1
      00000B 01                    1496 	.db	1
      00000C FB                    1497 	.db	-5
      00000D 0F                    1498 	.db	15
      00000E 0A                    1499 	.db	10
      00000F 00                    1500 	.db	0
      000010 01                    1501 	.db	1
      000011 01                    1502 	.db	1
      000012 01                    1503 	.db	1
      000013 01                    1504 	.db	1
      000014 00                    1505 	.db	0
      000015 00                    1506 	.db	0
      000016 00                    1507 	.db	0
      000017 01                    1508 	.db	1
      000018 2F 68 6F 6D 65 2F 63  1509 	.ascii "/home/cas/software/stm8-binutils/bin/../share/sdcc/include/stm8"
             61 73 2F 73 6F 66 74
             77 61 72 65 2F 73 74
             6D 38 2D 62 69 6E 75
             74 69 6C 73 2F 62 69
             6E 2F 2E 2E 2F 73 68
             61 72 65 2F 73 64 63
             63 2F 69 6E 63 6C 75
             64 65 2F 73 74 6D 38
      000057 00                    1510 	.db	0
      000058 2F 68 6F 6D 65 2F 63  1511 	.ascii "/home/cas/software/stm8-binutils/share/sdcc/include/stm8"
             61 73 2F 73 6F 66 74
             77 61 72 65 2F 73 74
             6D 38 2D 62 69 6E 75
             74 69 6C 73 2F 73 68
             61 72 65 2F 73 64 63
             63 2F 69 6E 63 6C 75
             64 65 2F 73 74 6D 38
      000090 00                    1512 	.db	0
      000091 2F 68 6F 6D 65 2F 63  1513 	.ascii "/home/cas/software/stm8-binutils/bin/../share/sdcc/include"
             61 73 2F 73 6F 66 74
             77 61 72 65 2F 73 74
             6D 38 2D 62 69 6E 75
             74 69 6C 73 2F 62 69
             6E 2F 2E 2E 2F 73 68
             61 72 65 2F 73 64 63
             63 2F 69 6E 63 6C 75
             64 65
      0000CB 00                    1514 	.db	0
      0000CC 2F 68 6F 6D 65 2F 63  1515 	.ascii "/home/cas/software/stm8-binutils/share/sdcc/include"
             61 73 2F 73 6F 66 74
             77 61 72 65 2F 73 74
             6D 38 2D 62 69 6E 75
             74 69 6C 73 2F 73 68
             61 72 65 2F 73 64 63
             63 2F 69 6E 63 6C 75
             64 65
      0000FF 00                    1516 	.db	0
      000100 00                    1517 	.db	0
      000101 53 74 64 50 65 72 69  1518 	.ascii "StdPeriphLib/src/stm8s_adc1.c"
             70 68 4C 69 62 2F 73
             72 63 2F 73 74 6D 38
             73 5F 61 64 63 31 2E
             63
      00011E 00                    1519 	.db	0
      00011F 00                    1520 	.uleb128	0
      000120 00                    1521 	.uleb128	0
      000121 00                    1522 	.uleb128	0
      000122 00                    1523 	.db	0
      000123                       1524 Ldebug_line_stmt:
      000123 00                    1525 	.db	0
      000124 05                    1526 	.uleb128	5
      000125 02                    1527 	.db	2
      000126 00 00r00r00           1528 	.dw	0,(Sstm8s_adc1$ADC1_DeInit$0)
      00012A 03                    1529 	.db	3
      00012B 33                    1530 	.sleb128	51
      00012C 01                    1531 	.db	1
      00012D 09                    1532 	.db	9
      00012E 00 0C                 1533 	.dw	Sstm8s_adc1$ADC1_DeInit$2-Sstm8s_adc1$ADC1_DeInit$0
      000130 03                    1534 	.db	3
      000131 02                    1535 	.sleb128	2
      000132 01                    1536 	.db	1
      000133 09                    1537 	.db	9
      000134 00 04                 1538 	.dw	Sstm8s_adc1$ADC1_DeInit$3-Sstm8s_adc1$ADC1_DeInit$2
      000136 03                    1539 	.db	3
      000137 01                    1540 	.sleb128	1
      000138 01                    1541 	.db	1
      000139 09                    1542 	.db	9
      00013A 00 04                 1543 	.dw	Sstm8s_adc1$ADC1_DeInit$4-Sstm8s_adc1$ADC1_DeInit$3
      00013C 03                    1544 	.db	3
      00013D 01                    1545 	.sleb128	1
      00013E 01                    1546 	.db	1
      00013F 09                    1547 	.db	9
      000140 00 04                 1548 	.dw	Sstm8s_adc1$ADC1_DeInit$5-Sstm8s_adc1$ADC1_DeInit$4
      000142 03                    1549 	.db	3
      000143 01                    1550 	.sleb128	1
      000144 01                    1551 	.db	1
      000145 09                    1552 	.db	9
      000146 00 04                 1553 	.dw	Sstm8s_adc1$ADC1_DeInit$6-Sstm8s_adc1$ADC1_DeInit$5
      000148 03                    1554 	.db	3
      000149 01                    1555 	.sleb128	1
      00014A 01                    1556 	.db	1
      00014B 09                    1557 	.db	9
      00014C 00 04                 1558 	.dw	Sstm8s_adc1$ADC1_DeInit$7-Sstm8s_adc1$ADC1_DeInit$6
      00014E 03                    1559 	.db	3
      00014F 01                    1560 	.sleb128	1
      000150 01                    1561 	.db	1
      000151 09                    1562 	.db	9
      000152 00 04                 1563 	.dw	Sstm8s_adc1$ADC1_DeInit$8-Sstm8s_adc1$ADC1_DeInit$7
      000154 03                    1564 	.db	3
      000155 01                    1565 	.sleb128	1
      000156 01                    1566 	.db	1
      000157 09                    1567 	.db	9
      000158 00 04                 1568 	.dw	Sstm8s_adc1$ADC1_DeInit$9-Sstm8s_adc1$ADC1_DeInit$8
      00015A 03                    1569 	.db	3
      00015B 01                    1570 	.sleb128	1
      00015C 01                    1571 	.db	1
      00015D 09                    1572 	.db	9
      00015E 00 04                 1573 	.dw	Sstm8s_adc1$ADC1_DeInit$10-Sstm8s_adc1$ADC1_DeInit$9
      000160 03                    1574 	.db	3
      000161 01                    1575 	.sleb128	1
      000162 01                    1576 	.db	1
      000163 09                    1577 	.db	9
      000164 00 04                 1578 	.dw	Sstm8s_adc1$ADC1_DeInit$11-Sstm8s_adc1$ADC1_DeInit$10
      000166 03                    1579 	.db	3
      000167 01                    1580 	.sleb128	1
      000168 01                    1581 	.db	1
      000169 09                    1582 	.db	9
      00016A 00 04                 1583 	.dw	Sstm8s_adc1$ADC1_DeInit$12-Sstm8s_adc1$ADC1_DeInit$11
      00016C 03                    1584 	.db	3
      00016D 01                    1585 	.sleb128	1
      00016E 01                    1586 	.db	1
      00016F 09                    1587 	.db	9
      000170 00 04                 1588 	.dw	Sstm8s_adc1$ADC1_DeInit$13-Sstm8s_adc1$ADC1_DeInit$12
      000172 03                    1589 	.db	3
      000173 01                    1590 	.sleb128	1
      000174 01                    1591 	.db	1
      000175 09                    1592 	.db	9
      000176 00 04                 1593 	.dw	Sstm8s_adc1$ADC1_DeInit$14-Sstm8s_adc1$ADC1_DeInit$13
      000178 03                    1594 	.db	3
      000179 01                    1595 	.sleb128	1
      00017A 01                    1596 	.db	1
      00017B 09                    1597 	.db	9
      00017C 00 07                 1598 	.dw	7+Sstm8s_adc1$ADC1_DeInit$15-Sstm8s_adc1$ADC1_DeInit$14
      00017E 00                    1599 	.db	0
      00017F 01                    1600 	.uleb128	1
      000180 01                    1601 	.db	1
      000181 00                    1602 	.db	0
      000182 05                    1603 	.uleb128	5
      000183 02                    1604 	.db	2
      000184 00 00r00r43           1605 	.dw	0,(Sstm8s_adc1$ADC1_Init$17)
      000188 03                    1606 	.db	3
      000189 D7 00                 1607 	.sleb128	87
      00018B 01                    1608 	.db	1
      00018C 09                    1609 	.db	9
      00018D 00 0C                 1610 	.dw	Sstm8s_adc1$ADC1_Init$19-Sstm8s_adc1$ADC1_Init$17
      00018F 03                    1611 	.db	3
      000190 05                    1612 	.sleb128	5
      000191 01                    1613 	.db	1
      000192 09                    1614 	.db	9
      000193 00 0E                 1615 	.dw	Sstm8s_adc1$ADC1_Init$20-Sstm8s_adc1$ADC1_Init$19
      000195 03                    1616 	.db	3
      000196 02                    1617 	.sleb128	2
      000197 01                    1618 	.db	1
      000198 09                    1619 	.db	9
      000199 00 07                 1620 	.dw	Sstm8s_adc1$ADC1_Init$21-Sstm8s_adc1$ADC1_Init$20
      00019B 03                    1621 	.db	3
      00019C 05                    1622 	.sleb128	5
      00019D 01                    1623 	.db	1
      00019E 09                    1624 	.db	9
      00019F 00 0B                 1625 	.dw	Sstm8s_adc1$ADC1_Init$22-Sstm8s_adc1$ADC1_Init$21
      0001A1 03                    1626 	.db	3
      0001A2 05                    1627 	.sleb128	5
      0001A3 01                    1628 	.db	1
      0001A4 09                    1629 	.db	9
      0001A5 00 0B                 1630 	.dw	Sstm8s_adc1$ADC1_Init$23-Sstm8s_adc1$ADC1_Init$22
      0001A7 03                    1631 	.db	3
      0001A8 03                    1632 	.sleb128	3
      0001A9 01                    1633 	.db	1
      0001AA 09                    1634 	.db	9
      0001AB 00 04                 1635 	.dw	Sstm8s_adc1$ADC1_Init$24-Sstm8s_adc1$ADC1_Init$23
      0001AD 03                    1636 	.db	3
      0001AE 01                    1637 	.sleb128	1
      0001AF 01                    1638 	.db	1
      0001B0 09                    1639 	.db	9
      0001B1 00 07                 1640 	.dw	7+Sstm8s_adc1$ADC1_Init$25-Sstm8s_adc1$ADC1_Init$24
      0001B3 00                    1641 	.db	0
      0001B4 01                    1642 	.uleb128	1
      0001B5 01                    1643 	.db	1
      0001B6 00                    1644 	.db	0
      0001B7 05                    1645 	.uleb128	5
      0001B8 02                    1646 	.db	2
      0001B9 00 00r00r85           1647 	.dw	0,(Sstm8s_adc1$ADC1_Cmd$27)
      0001BD 03                    1648 	.db	3
      0001BE F3 00                 1649 	.sleb128	115
      0001C0 01                    1650 	.db	1
      0001C1 09                    1651 	.db	9
      0001C2 00 0C                 1652 	.dw	Sstm8s_adc1$ADC1_Cmd$29-Sstm8s_adc1$ADC1_Cmd$27
      0001C4 03                    1653 	.db	3
      0001C5 05                    1654 	.sleb128	5
      0001C6 01                    1655 	.db	1
      0001C7 09                    1656 	.db	9
      0001C8 00 04                 1657 	.dw	Sstm8s_adc1$ADC1_Cmd$30-Sstm8s_adc1$ADC1_Cmd$29
      0001CA 03                    1658 	.db	3
      0001CB 02                    1659 	.sleb128	2
      0001CC 01                    1660 	.db	1
      0001CD 09                    1661 	.db	9
      0001CE 00 06                 1662 	.dw	Sstm8s_adc1$ADC1_Cmd$31-Sstm8s_adc1$ADC1_Cmd$30
      0001D0 03                    1663 	.db	3
      0001D1 04                    1664 	.sleb128	4
      0001D2 01                    1665 	.db	1
      0001D3 09                    1666 	.db	9
      0001D4 00 04                 1667 	.dw	Sstm8s_adc1$ADC1_Cmd$32-Sstm8s_adc1$ADC1_Cmd$31
      0001D6 03                    1668 	.db	3
      0001D7 02                    1669 	.sleb128	2
      0001D8 01                    1670 	.db	1
      0001D9 09                    1671 	.db	9
      0001DA 00 07                 1672 	.dw	7+Sstm8s_adc1$ADC1_Cmd$33-Sstm8s_adc1$ADC1_Cmd$32
      0001DC 00                    1673 	.db	0
      0001DD 01                    1674 	.uleb128	1
      0001DE 01                    1675 	.db	1
      0001DF 00                    1676 	.db	0
      0001E0 05                    1677 	.uleb128	5
      0001E1 02                    1678 	.db	2
      0001E2 00 00r00rA6           1679 	.dw	0,(Sstm8s_adc1$ADC1_ScanModeCmd$35)
      0001E6 03                    1680 	.db	3
      0001E7 87 01                 1681 	.sleb128	135
      0001E9 01                    1682 	.db	1
      0001EA 09                    1683 	.db	9
      0001EB 00 0C                 1684 	.dw	Sstm8s_adc1$ADC1_ScanModeCmd$37-Sstm8s_adc1$ADC1_ScanModeCmd$35
      0001ED 03                    1685 	.db	3
      0001EE 05                    1686 	.sleb128	5
      0001EF 01                    1687 	.db	1
      0001F0 09                    1688 	.db	9
      0001F1 00 04                 1689 	.dw	Sstm8s_adc1$ADC1_ScanModeCmd$38-Sstm8s_adc1$ADC1_ScanModeCmd$37
      0001F3 03                    1690 	.db	3
      0001F4 02                    1691 	.sleb128	2
      0001F5 01                    1692 	.db	1
      0001F6 09                    1693 	.db	9
      0001F7 00 09                 1694 	.dw	Sstm8s_adc1$ADC1_ScanModeCmd$39-Sstm8s_adc1$ADC1_ScanModeCmd$38
      0001F9 03                    1695 	.db	3
      0001FA 04                    1696 	.sleb128	4
      0001FB 01                    1697 	.db	1
      0001FC 09                    1698 	.db	9
      0001FD 00 07                 1699 	.dw	Sstm8s_adc1$ADC1_ScanModeCmd$40-Sstm8s_adc1$ADC1_ScanModeCmd$39
      0001FF 03                    1700 	.db	3
      000200 02                    1701 	.sleb128	2
      000201 01                    1702 	.db	1
      000202 09                    1703 	.db	9
      000203 00 07                 1704 	.dw	7+Sstm8s_adc1$ADC1_ScanModeCmd$41-Sstm8s_adc1$ADC1_ScanModeCmd$40
      000205 00                    1705 	.db	0
      000206 01                    1706 	.uleb128	1
      000207 01                    1707 	.db	1
      000208 00                    1708 	.db	0
      000209 05                    1709 	.uleb128	5
      00020A 02                    1710 	.db	2
      00020B 00 00r00rCD           1711 	.dw	0,(Sstm8s_adc1$ADC1_DataBufferCmd$43)
      00020F 03                    1712 	.db	3
      000210 9B 01                 1713 	.sleb128	155
      000212 01                    1714 	.db	1
      000213 09                    1715 	.db	9
      000214 00 0C                 1716 	.dw	Sstm8s_adc1$ADC1_DataBufferCmd$45-Sstm8s_adc1$ADC1_DataBufferCmd$43
      000216 03                    1717 	.db	3
      000217 05                    1718 	.sleb128	5
      000218 01                    1719 	.db	1
      000219 09                    1720 	.db	9
      00021A 00 04                 1721 	.dw	Sstm8s_adc1$ADC1_DataBufferCmd$46-Sstm8s_adc1$ADC1_DataBufferCmd$45
      00021C 03                    1722 	.db	3
      00021D 02                    1723 	.sleb128	2
      00021E 01                    1724 	.db	1
      00021F 09                    1725 	.db	9
      000220 00 06                 1726 	.dw	Sstm8s_adc1$ADC1_DataBufferCmd$47-Sstm8s_adc1$ADC1_DataBufferCmd$46
      000222 03                    1727 	.db	3
      000223 04                    1728 	.sleb128	4
      000224 01                    1729 	.db	1
      000225 09                    1730 	.db	9
      000226 00 04                 1731 	.dw	Sstm8s_adc1$ADC1_DataBufferCmd$48-Sstm8s_adc1$ADC1_DataBufferCmd$47
      000228 03                    1732 	.db	3
      000229 02                    1733 	.sleb128	2
      00022A 01                    1734 	.db	1
      00022B 09                    1735 	.db	9
      00022C 00 07                 1736 	.dw	7+Sstm8s_adc1$ADC1_DataBufferCmd$49-Sstm8s_adc1$ADC1_DataBufferCmd$48
      00022E 00                    1737 	.db	0
      00022F 01                    1738 	.uleb128	1
      000230 01                    1739 	.db	1
      000231 00                    1740 	.db	0
      000232 05                    1741 	.uleb128	5
      000233 02                    1742 	.db	2
      000234 00 00r00rEE           1743 	.dw	0,(Sstm8s_adc1$ADC1_ITConfig$51)
      000238 03                    1744 	.db	3
      000239 B3 01                 1745 	.sleb128	179
      00023B 01                    1746 	.db	1
      00023C 09                    1747 	.db	9
      00023D 00 0D                 1748 	.dw	Sstm8s_adc1$ADC1_ITConfig$53-Sstm8s_adc1$ADC1_ITConfig$51
      00023F 03                    1749 	.db	3
      000240 02                    1750 	.sleb128	2
      000241 01                    1751 	.db	1
      000242 09                    1752 	.db	9
      000243 00 04                 1753 	.dw	Sstm8s_adc1$ADC1_ITConfig$54-Sstm8s_adc1$ADC1_ITConfig$53
      000245 03                    1754 	.db	3
      000246 03                    1755 	.sleb128	3
      000247 01                    1756 	.db	1
      000248 09                    1757 	.db	9
      000249 00 10                 1758 	.dw	Sstm8s_adc1$ADC1_ITConfig$55-Sstm8s_adc1$ADC1_ITConfig$54
      00024B 03                    1759 	.db	3
      00024C 05                    1760 	.sleb128	5
      00024D 01                    1761 	.db	1
      00024E 09                    1762 	.db	9
      00024F 00 0F                 1763 	.dw	Sstm8s_adc1$ADC1_ITConfig$56-Sstm8s_adc1$ADC1_ITConfig$55
      000251 03                    1764 	.db	3
      000252 02                    1765 	.sleb128	2
      000253 01                    1766 	.db	1
      000254 09                    1767 	.db	9
      000255 00 08                 1768 	.dw	7+Sstm8s_adc1$ADC1_ITConfig$57-Sstm8s_adc1$ADC1_ITConfig$56
      000257 00                    1769 	.db	0
      000258 01                    1770 	.uleb128	1
      000259 01                    1771 	.db	1
      00025A 00                    1772 	.db	0
      00025B 05                    1773 	.uleb128	5
      00025C 02                    1774 	.db	2
      00025D 00 00r01r26           1775 	.dw	0,(Sstm8s_adc1$ADC1_PrescalerConfig$59)
      000261 03                    1776 	.db	3
      000262 C7 01                 1777 	.sleb128	199
      000264 01                    1778 	.db	1
      000265 09                    1779 	.db	9
      000266 00 0C                 1780 	.dw	Sstm8s_adc1$ADC1_PrescalerConfig$61-Sstm8s_adc1$ADC1_PrescalerConfig$59
      000268 03                    1781 	.db	3
      000269 03                    1782 	.sleb128	3
      00026A 01                    1783 	.db	1
      00026B 09                    1784 	.db	9
      00026C 00 07                 1785 	.dw	Sstm8s_adc1$ADC1_PrescalerConfig$62-Sstm8s_adc1$ADC1_PrescalerConfig$61
      00026E 03                    1786 	.db	3
      00026F 02                    1787 	.sleb128	2
      000270 01                    1788 	.db	1
      000271 09                    1789 	.db	9
      000272 00 0A                 1790 	.dw	Sstm8s_adc1$ADC1_PrescalerConfig$63-Sstm8s_adc1$ADC1_PrescalerConfig$62
      000274 03                    1791 	.db	3
      000275 01                    1792 	.sleb128	1
      000276 01                    1793 	.db	1
      000277 09                    1794 	.db	9
      000278 00 07                 1795 	.dw	7+Sstm8s_adc1$ADC1_PrescalerConfig$64-Sstm8s_adc1$ADC1_PrescalerConfig$63
      00027A 00                    1796 	.db	0
      00027B 01                    1797 	.uleb128	1
      00027C 01                    1798 	.db	1
      00027D 00                    1799 	.db	0
      00027E 05                    1800 	.uleb128	5
      00027F 02                    1801 	.db	2
      000280 00 00r01r4A           1802 	.dw	0,(Sstm8s_adc1$ADC1_SchmittTriggerConfig$66)
      000284 03                    1803 	.db	3
      000285 D7 01                 1804 	.sleb128	215
      000287 01                    1805 	.db	1
      000288 09                    1806 	.db	9
      000289 00 0E                 1807 	.dw	Sstm8s_adc1$ADC1_SchmittTriggerConfig$68-Sstm8s_adc1$ADC1_SchmittTriggerConfig$66
      00028B 03                    1808 	.db	3
      00028C 02                    1809 	.sleb128	2
      00028D 01                    1810 	.db	1
      00028E 09                    1811 	.db	9
      00028F 00 06                 1812 	.dw	Sstm8s_adc1$ADC1_SchmittTriggerConfig$69-Sstm8s_adc1$ADC1_SchmittTriggerConfig$68
      000291 03                    1813 	.db	3
      000292 02                    1814 	.sleb128	2
      000293 01                    1815 	.db	1
      000294 09                    1816 	.db	9
      000295 00 04                 1817 	.dw	Sstm8s_adc1$ADC1_SchmittTriggerConfig$70-Sstm8s_adc1$ADC1_SchmittTriggerConfig$69
      000297 03                    1818 	.db	3
      000298 02                    1819 	.sleb128	2
      000299 01                    1820 	.db	1
      00029A 09                    1821 	.db	9
      00029B 00 08                 1822 	.dw	Sstm8s_adc1$ADC1_SchmittTriggerConfig$71-Sstm8s_adc1$ADC1_SchmittTriggerConfig$70
      00029D 03                    1823 	.db	3
      00029E 01                    1824 	.sleb128	1
      00029F 01                    1825 	.db	1
      0002A0 09                    1826 	.db	9
      0002A1 00 0B                 1827 	.dw	Sstm8s_adc1$ADC1_SchmittTriggerConfig$72-Sstm8s_adc1$ADC1_SchmittTriggerConfig$71
      0002A3 03                    1828 	.db	3
      0002A4 04                    1829 	.sleb128	4
      0002A5 01                    1830 	.db	1
      0002A6 09                    1831 	.db	9
      0002A7 00 08                 1832 	.dw	Sstm8s_adc1$ADC1_SchmittTriggerConfig$73-Sstm8s_adc1$ADC1_SchmittTriggerConfig$72
      0002A9 03                    1833 	.db	3
      0002AA 01                    1834 	.sleb128	1
      0002AB 01                    1835 	.db	1
      0002AC 09                    1836 	.db	9
      0002AD 00 0B                 1837 	.dw	Sstm8s_adc1$ADC1_SchmittTriggerConfig$74-Sstm8s_adc1$ADC1_SchmittTriggerConfig$73
      0002AF 03                    1838 	.db	3
      0002B0 03                    1839 	.sleb128	3
      0002B1 01                    1840 	.db	1
      0002B2 09                    1841 	.db	9
      0002B3 00 06                 1842 	.dw	Sstm8s_adc1$ADC1_SchmittTriggerConfig$75-Sstm8s_adc1$ADC1_SchmittTriggerConfig$74
      0002B5 03                    1843 	.db	3
      0002B6 02                    1844 	.sleb128	2
      0002B7 01                    1845 	.db	1
      0002B8 09                    1846 	.db	9
      0002B9 00 04                 1847 	.dw	Sstm8s_adc1$ADC1_SchmittTriggerConfig$76-Sstm8s_adc1$ADC1_SchmittTriggerConfig$75
      0002BB 03                    1848 	.db	3
      0002BC 02                    1849 	.sleb128	2
      0002BD 01                    1850 	.db	1
      0002BE 09                    1851 	.db	9
      0002BF 00 1C                 1852 	.dw	Sstm8s_adc1$ADC1_SchmittTriggerConfig$77-Sstm8s_adc1$ADC1_SchmittTriggerConfig$76
      0002C1 03                    1853 	.db	3
      0002C2 04                    1854 	.sleb128	4
      0002C3 01                    1855 	.db	1
      0002C4 09                    1856 	.db	9
      0002C5 00 1B                 1857 	.dw	Sstm8s_adc1$ADC1_SchmittTriggerConfig$78-Sstm8s_adc1$ADC1_SchmittTriggerConfig$77
      0002C7 03                    1858 	.db	3
      0002C8 05                    1859 	.sleb128	5
      0002C9 01                    1860 	.db	1
      0002CA 09                    1861 	.db	9
      0002CB 00 04                 1862 	.dw	Sstm8s_adc1$ADC1_SchmittTriggerConfig$79-Sstm8s_adc1$ADC1_SchmittTriggerConfig$78
      0002CD 03                    1863 	.db	3
      0002CE 02                    1864 	.sleb128	2
      0002CF 01                    1865 	.db	1
      0002D0 09                    1866 	.db	9
      0002D1 00 21                 1867 	.dw	Sstm8s_adc1$ADC1_SchmittTriggerConfig$80-Sstm8s_adc1$ADC1_SchmittTriggerConfig$79
      0002D3 03                    1868 	.db	3
      0002D4 04                    1869 	.sleb128	4
      0002D5 01                    1870 	.db	1
      0002D6 09                    1871 	.db	9
      0002D7 00 1E                 1872 	.dw	Sstm8s_adc1$ADC1_SchmittTriggerConfig$81-Sstm8s_adc1$ADC1_SchmittTriggerConfig$80
      0002D9 03                    1873 	.db	3
      0002DA 03                    1874 	.sleb128	3
      0002DB 01                    1875 	.db	1
      0002DC 09                    1876 	.db	9
      0002DD 00 09                 1877 	.dw	7+Sstm8s_adc1$ADC1_SchmittTriggerConfig$82-Sstm8s_adc1$ADC1_SchmittTriggerConfig$81
      0002DF 00                    1878 	.db	0
      0002E0 01                    1879 	.uleb128	1
      0002E1 01                    1880 	.db	1
      0002E2 00                    1881 	.db	0
      0002E3 05                    1882 	.uleb128	5
      0002E4 02                    1883 	.db	2
      0002E5 00 00r02r15           1884 	.dw	0,(Sstm8s_adc1$ADC1_ConversionConfig$84)
      0002E9 03                    1885 	.db	3
      0002EA 88 02                 1886 	.sleb128	264
      0002EC 01                    1887 	.db	1
      0002ED 09                    1888 	.db	9
      0002EE 00 0C                 1889 	.dw	Sstm8s_adc1$ADC1_ConversionConfig$86-Sstm8s_adc1$ADC1_ConversionConfig$84
      0002F0 03                    1890 	.db	3
      0002F1 03                    1891 	.sleb128	3
      0002F2 01                    1892 	.db	1
      0002F3 09                    1893 	.db	9
      0002F4 00 07                 1894 	.dw	Sstm8s_adc1$ADC1_ConversionConfig$87-Sstm8s_adc1$ADC1_ConversionConfig$86
      0002F6 03                    1895 	.db	3
      0002F7 02                    1896 	.sleb128	2
      0002F8 01                    1897 	.db	1
      0002F9 09                    1898 	.db	9
      0002FA 00 0A                 1899 	.dw	Sstm8s_adc1$ADC1_ConversionConfig$88-Sstm8s_adc1$ADC1_ConversionConfig$87
      0002FC 03                    1900 	.db	3
      0002FD 02                    1901 	.sleb128	2
      0002FE 01                    1902 	.db	1
      0002FF 09                    1903 	.db	9
      000300 00 06                 1904 	.dw	Sstm8s_adc1$ADC1_ConversionConfig$89-Sstm8s_adc1$ADC1_ConversionConfig$88
      000302 03                    1905 	.db	3
      000303 03                    1906 	.sleb128	3
      000304 01                    1907 	.db	1
      000305 09                    1908 	.db	9
      000306 00 09                 1909 	.dw	Sstm8s_adc1$ADC1_ConversionConfig$90-Sstm8s_adc1$ADC1_ConversionConfig$89
      000308 03                    1910 	.db	3
      000309 05                    1911 	.sleb128	5
      00030A 01                    1912 	.db	1
      00030B 09                    1913 	.db	9
      00030C 00 07                 1914 	.dw	Sstm8s_adc1$ADC1_ConversionConfig$91-Sstm8s_adc1$ADC1_ConversionConfig$90
      00030E 03                    1915 	.db	3
      00030F 04                    1916 	.sleb128	4
      000310 01                    1917 	.db	1
      000311 09                    1918 	.db	9
      000312 00 07                 1919 	.dw	Sstm8s_adc1$ADC1_ConversionConfig$92-Sstm8s_adc1$ADC1_ConversionConfig$91
      000314 03                    1920 	.db	3
      000315 02                    1921 	.sleb128	2
      000316 01                    1922 	.db	1
      000317 09                    1923 	.db	9
      000318 00 0A                 1924 	.dw	Sstm8s_adc1$ADC1_ConversionConfig$93-Sstm8s_adc1$ADC1_ConversionConfig$92
      00031A 03                    1925 	.db	3
      00031B 01                    1926 	.sleb128	1
      00031C 01                    1927 	.db	1
      00031D 09                    1928 	.db	9
      00031E 00 07                 1929 	.dw	7+Sstm8s_adc1$ADC1_ConversionConfig$94-Sstm8s_adc1$ADC1_ConversionConfig$93
      000320 00                    1930 	.db	0
      000321 01                    1931 	.uleb128	1
      000322 01                    1932 	.db	1
      000323 00                    1933 	.db	0
      000324 05                    1934 	.uleb128	5
      000325 02                    1935 	.db	2
      000326 00 00r02r60           1936 	.dw	0,(Sstm8s_adc1$ADC1_ExternalTriggerConfig$96)
      00032A 03                    1937 	.db	3
      00032B AA 02                 1938 	.sleb128	298
      00032D 01                    1939 	.db	1
      00032E 09                    1940 	.db	9
      00032F 00 0C                 1941 	.dw	Sstm8s_adc1$ADC1_ExternalTriggerConfig$98-Sstm8s_adc1$ADC1_ExternalTriggerConfig$96
      000331 03                    1942 	.db	3
      000332 03                    1943 	.sleb128	3
      000333 01                    1944 	.db	1
      000334 09                    1945 	.db	9
      000335 00 07                 1946 	.dw	Sstm8s_adc1$ADC1_ExternalTriggerConfig$99-Sstm8s_adc1$ADC1_ExternalTriggerConfig$98
      000337 03                    1947 	.db	3
      000338 02                    1948 	.sleb128	2
      000339 01                    1949 	.db	1
      00033A 09                    1950 	.db	9
      00033B 00 04                 1951 	.dw	Sstm8s_adc1$ADC1_ExternalTriggerConfig$100-Sstm8s_adc1$ADC1_ExternalTriggerConfig$99
      00033D 03                    1952 	.db	3
      00033E 03                    1953 	.sleb128	3
      00033F 01                    1954 	.db	1
      000340 09                    1955 	.db	9
      000341 00 09                 1956 	.dw	Sstm8s_adc1$ADC1_ExternalTriggerConfig$101-Sstm8s_adc1$ADC1_ExternalTriggerConfig$100
      000343 03                    1957 	.db	3
      000344 05                    1958 	.sleb128	5
      000345 01                    1959 	.db	1
      000346 09                    1960 	.db	9
      000347 00 07                 1961 	.dw	Sstm8s_adc1$ADC1_ExternalTriggerConfig$102-Sstm8s_adc1$ADC1_ExternalTriggerConfig$101
      000349 03                    1962 	.db	3
      00034A 04                    1963 	.sleb128	4
      00034B 01                    1964 	.db	1
      00034C 09                    1965 	.db	9
      00034D 00 0A                 1966 	.dw	Sstm8s_adc1$ADC1_ExternalTriggerConfig$103-Sstm8s_adc1$ADC1_ExternalTriggerConfig$102
      00034F 03                    1967 	.db	3
      000350 01                    1968 	.sleb128	1
      000351 01                    1969 	.db	1
      000352 09                    1970 	.db	9
      000353 00 07                 1971 	.dw	7+Sstm8s_adc1$ADC1_ExternalTriggerConfig$104-Sstm8s_adc1$ADC1_ExternalTriggerConfig$103
      000355 00                    1972 	.db	0
      000356 01                    1973 	.uleb128	1
      000357 01                    1974 	.db	1
      000358 00                    1975 	.db	0
      000359 05                    1976 	.uleb128	5
      00035A 02                    1977 	.db	2
      00035B 00 00r02r98           1978 	.dw	0,(Sstm8s_adc1$ADC1_StartConversion$106)
      00035F 03                    1979 	.db	3
      000360 C7 02                 1980 	.sleb128	327
      000362 01                    1981 	.db	1
      000363 09                    1982 	.db	9
      000364 00 0C                 1983 	.dw	Sstm8s_adc1$ADC1_StartConversion$108-Sstm8s_adc1$ADC1_StartConversion$106
      000366 03                    1984 	.db	3
      000367 02                    1985 	.sleb128	2
      000368 01                    1986 	.db	1
      000369 09                    1987 	.db	9
      00036A 00 04                 1988 	.dw	Sstm8s_adc1$ADC1_StartConversion$109-Sstm8s_adc1$ADC1_StartConversion$108
      00036C 03                    1989 	.db	3
      00036D 01                    1990 	.sleb128	1
      00036E 01                    1991 	.db	1
      00036F 09                    1992 	.db	9
      000370 00 07                 1993 	.dw	7+Sstm8s_adc1$ADC1_StartConversion$110-Sstm8s_adc1$ADC1_StartConversion$109
      000372 00                    1994 	.db	0
      000373 01                    1995 	.uleb128	1
      000374 01                    1996 	.db	1
      000375 00                    1997 	.db	0
      000376 05                    1998 	.uleb128	5
      000377 02                    1999 	.db	2
      000378 00 00r02rAF           2000 	.dw	0,(Sstm8s_adc1$ADC1_GetConversionValue$112)
      00037C 03                    2001 	.db	3
      00037D D3 02                 2002 	.sleb128	339
      00037F 01                    2003 	.db	1
      000380 09                    2004 	.db	9
      000381 00 0E                 2005 	.dw	Sstm8s_adc1$ADC1_GetConversionValue$114-Sstm8s_adc1$ADC1_GetConversionValue$112
      000383 03                    2006 	.db	3
      000384 05                    2007 	.sleb128	5
      000385 01                    2008 	.db	1
      000386 09                    2009 	.db	9
      000387 00 08                 2010 	.dw	Sstm8s_adc1$ADC1_GetConversionValue$115-Sstm8s_adc1$ADC1_GetConversionValue$114
      000389 03                    2011 	.db	3
      00038A 03                    2012 	.sleb128	3
      00038B 01                    2013 	.db	1
      00038C 09                    2014 	.db	9
      00038D 00 06                 2015 	.dw	Sstm8s_adc1$ADC1_GetConversionValue$116-Sstm8s_adc1$ADC1_GetConversionValue$115
      00038F 03                    2016 	.db	3
      000390 02                    2017 	.sleb128	2
      000391 01                    2018 	.db	1
      000392 09                    2019 	.db	9
      000393 00 08                 2020 	.dw	Sstm8s_adc1$ADC1_GetConversionValue$117-Sstm8s_adc1$ADC1_GetConversionValue$116
      000395 03                    2021 	.db	3
      000396 02                    2022 	.sleb128	2
      000397 01                    2023 	.db	1
      000398 09                    2024 	.db	9
      000399 00 14                 2025 	.dw	Sstm8s_adc1$ADC1_GetConversionValue$118-Sstm8s_adc1$ADC1_GetConversionValue$117
      00039B 03                    2026 	.db	3
      00039C 05                    2027 	.sleb128	5
      00039D 01                    2028 	.db	1
      00039E 09                    2029 	.db	9
      00039F 00 08                 2030 	.dw	Sstm8s_adc1$ADC1_GetConversionValue$119-Sstm8s_adc1$ADC1_GetConversionValue$118
      0003A1 03                    2031 	.db	3
      0003A2 02                    2032 	.sleb128	2
      0003A3 01                    2033 	.db	1
      0003A4 09                    2034 	.db	9
      0003A5 00 06                 2035 	.dw	Sstm8s_adc1$ADC1_GetConversionValue$120-Sstm8s_adc1$ADC1_GetConversionValue$119
      0003A7 03                    2036 	.db	3
      0003A8 02                    2037 	.sleb128	2
      0003A9 01                    2038 	.db	1
      0003AA 09                    2039 	.db	9
      0003AB 00 18                 2040 	.dw	Sstm8s_adc1$ADC1_GetConversionValue$121-Sstm8s_adc1$ADC1_GetConversionValue$120
      0003AD 03                    2041 	.db	3
      0003AE 03                    2042 	.sleb128	3
      0003AF 01                    2043 	.db	1
      0003B0 09                    2044 	.db	9
      0003B1 00 02                 2045 	.dw	Sstm8s_adc1$ADC1_GetConversionValue$122-Sstm8s_adc1$ADC1_GetConversionValue$121
      0003B3 03                    2046 	.db	3
      0003B4 01                    2047 	.sleb128	1
      0003B5 01                    2048 	.db	1
      0003B6 09                    2049 	.db	9
      0003B7 00 09                 2050 	.dw	7+Sstm8s_adc1$ADC1_GetConversionValue$123-Sstm8s_adc1$ADC1_GetConversionValue$122
      0003B9 00                    2051 	.db	0
      0003BA 01                    2052 	.uleb128	1
      0003BB 01                    2053 	.db	1
      0003BC 00                    2054 	.db	0
      0003BD 05                    2055 	.uleb128	5
      0003BE 02                    2056 	.db	2
      0003BF 00 00r03r18           2057 	.dw	0,(Sstm8s_adc1$ADC1_AWDChannelConfig$125)
      0003C3 03                    2058 	.db	3
      0003C4 F6 02                 2059 	.sleb128	374
      0003C6 01                    2060 	.db	1
      0003C7 09                    2061 	.db	9
      0003C8 00 0E                 2062 	.dw	Sstm8s_adc1$ADC1_AWDChannelConfig$127-Sstm8s_adc1$ADC1_AWDChannelConfig$125
      0003CA 03                    2063 	.db	3
      0003CB 06                    2064 	.sleb128	6
      0003CC 01                    2065 	.db	1
      0003CD 09                    2066 	.db	9
      0003CE 00 06                 2067 	.dw	Sstm8s_adc1$ADC1_AWDChannelConfig$128-Sstm8s_adc1$ADC1_AWDChannelConfig$127
      0003D0 03                    2068 	.db	3
      0003D1 02                    2069 	.sleb128	2
      0003D2 01                    2070 	.db	1
      0003D3 09                    2071 	.db	9
      0003D4 00 04                 2072 	.dw	Sstm8s_adc1$ADC1_AWDChannelConfig$129-Sstm8s_adc1$ADC1_AWDChannelConfig$128
      0003D6 03                    2073 	.db	3
      0003D7 02                    2074 	.sleb128	2
      0003D8 01                    2075 	.db	1
      0003D9 09                    2076 	.db	9
      0003DA 00 1B                 2077 	.dw	Sstm8s_adc1$ADC1_AWDChannelConfig$130-Sstm8s_adc1$ADC1_AWDChannelConfig$129
      0003DC 03                    2078 	.db	3
      0003DD 04                    2079 	.sleb128	4
      0003DE 01                    2080 	.db	1
      0003DF 09                    2081 	.db	9
      0003E0 00 1C                 2082 	.dw	Sstm8s_adc1$ADC1_AWDChannelConfig$131-Sstm8s_adc1$ADC1_AWDChannelConfig$130
      0003E2 03                    2083 	.db	3
      0003E3 05                    2084 	.sleb128	5
      0003E4 01                    2085 	.db	1
      0003E5 09                    2086 	.db	9
      0003E6 00 04                 2087 	.dw	Sstm8s_adc1$ADC1_AWDChannelConfig$132-Sstm8s_adc1$ADC1_AWDChannelConfig$131
      0003E8 03                    2088 	.db	3
      0003E9 02                    2089 	.sleb128	2
      0003EA 01                    2090 	.db	1
      0003EB 09                    2091 	.db	9
      0003EC 00 20                 2092 	.dw	Sstm8s_adc1$ADC1_AWDChannelConfig$133-Sstm8s_adc1$ADC1_AWDChannelConfig$132
      0003EE 03                    2093 	.db	3
      0003EF 04                    2094 	.sleb128	4
      0003F0 01                    2095 	.db	1
      0003F1 09                    2096 	.db	9
      0003F2 00 1F                 2097 	.dw	Sstm8s_adc1$ADC1_AWDChannelConfig$134-Sstm8s_adc1$ADC1_AWDChannelConfig$133
      0003F4 03                    2098 	.db	3
      0003F5 03                    2099 	.sleb128	3
      0003F6 01                    2100 	.db	1
      0003F7 09                    2101 	.db	9
      0003F8 00 09                 2102 	.dw	7+Sstm8s_adc1$ADC1_AWDChannelConfig$135-Sstm8s_adc1$ADC1_AWDChannelConfig$134
      0003FA 00                    2103 	.db	0
      0003FB 01                    2104 	.uleb128	1
      0003FC 01                    2105 	.db	1
      0003FD 00                    2106 	.db	0
      0003FE 05                    2107 	.uleb128	5
      0003FF 02                    2108 	.db	2
      000400 00 00r03rB3           2109 	.dw	0,(Sstm8s_adc1$ADC1_SetHighThreshold$137)
      000404 03                    2110 	.db	3
      000405 9A 03                 2111 	.sleb128	410
      000407 01                    2112 	.db	1
      000408 09                    2113 	.db	9
      000409 00 0C                 2114 	.dw	Sstm8s_adc1$ADC1_SetHighThreshold$139-Sstm8s_adc1$ADC1_SetHighThreshold$137
      00040B 03                    2115 	.db	3
      00040C 02                    2116 	.sleb128	2
      00040D 01                    2117 	.db	1
      00040E 09                    2118 	.db	9
      00040F 00 09                 2119 	.dw	Sstm8s_adc1$ADC1_SetHighThreshold$140-Sstm8s_adc1$ADC1_SetHighThreshold$139
      000411 03                    2120 	.db	3
      000412 01                    2121 	.sleb128	1
      000413 01                    2122 	.db	1
      000414 09                    2123 	.db	9
      000415 00 06                 2124 	.dw	Sstm8s_adc1$ADC1_SetHighThreshold$141-Sstm8s_adc1$ADC1_SetHighThreshold$140
      000417 03                    2125 	.db	3
      000418 01                    2126 	.sleb128	1
      000419 01                    2127 	.db	1
      00041A 09                    2128 	.db	9
      00041B 00 07                 2129 	.dw	7+Sstm8s_adc1$ADC1_SetHighThreshold$142-Sstm8s_adc1$ADC1_SetHighThreshold$141
      00041D 00                    2130 	.db	0
      00041E 01                    2131 	.uleb128	1
      00041F 01                    2132 	.db	1
      000420 00                    2133 	.db	0
      000421 05                    2134 	.uleb128	5
      000422 02                    2135 	.db	2
      000423 00 00r03rD5           2136 	.dw	0,(Sstm8s_adc1$ADC1_SetLowThreshold$144)
      000427 03                    2137 	.db	3
      000428 A6 03                 2138 	.sleb128	422
      00042A 01                    2139 	.db	1
      00042B 09                    2140 	.db	9
      00042C 00 0C                 2141 	.dw	Sstm8s_adc1$ADC1_SetLowThreshold$146-Sstm8s_adc1$ADC1_SetLowThreshold$144
      00042E 03                    2142 	.db	3
      00042F 02                    2143 	.sleb128	2
      000430 01                    2144 	.db	1
      000431 09                    2145 	.db	9
      000432 00 06                 2146 	.dw	Sstm8s_adc1$ADC1_SetLowThreshold$147-Sstm8s_adc1$ADC1_SetLowThreshold$146
      000434 03                    2147 	.db	3
      000435 01                    2148 	.sleb128	1
      000436 01                    2149 	.db	1
      000437 09                    2150 	.db	9
      000438 00 09                 2151 	.dw	Sstm8s_adc1$ADC1_SetLowThreshold$148-Sstm8s_adc1$ADC1_SetLowThreshold$147
      00043A 03                    2152 	.db	3
      00043B 01                    2153 	.sleb128	1
      00043C 01                    2154 	.db	1
      00043D 09                    2155 	.db	9
      00043E 00 07                 2156 	.dw	7+Sstm8s_adc1$ADC1_SetLowThreshold$149-Sstm8s_adc1$ADC1_SetLowThreshold$148
      000440 00                    2157 	.db	0
      000441 01                    2158 	.uleb128	1
      000442 01                    2159 	.db	1
      000443 00                    2160 	.db	0
      000444 05                    2161 	.uleb128	5
      000445 02                    2162 	.db	2
      000446 00 00r03rF7           2163 	.dw	0,(Sstm8s_adc1$ADC1_GetBufferValue$151)
      00044A 03                    2164 	.db	3
      00044B B3 03                 2165 	.sleb128	435
      00044D 01                    2166 	.db	1
      00044E 09                    2167 	.db	9
      00044F 00 0E                 2168 	.dw	Sstm8s_adc1$ADC1_GetBufferValue$153-Sstm8s_adc1$ADC1_GetBufferValue$151
      000451 03                    2169 	.db	3
      000452 08                    2170 	.sleb128	8
      000453 01                    2171 	.db	1
      000454 09                    2172 	.db	9
      000455 00 08                 2173 	.dw	Sstm8s_adc1$ADC1_GetBufferValue$154-Sstm8s_adc1$ADC1_GetBufferValue$153
      000457 03                    2174 	.db	3
      000458 03                    2175 	.sleb128	3
      000459 01                    2176 	.db	1
      00045A 09                    2177 	.db	9
      00045B 00 0F                 2178 	.dw	Sstm8s_adc1$ADC1_GetBufferValue$155-Sstm8s_adc1$ADC1_GetBufferValue$154
      00045D 03                    2179 	.db	3
      00045E 02                    2180 	.sleb128	2
      00045F 01                    2181 	.db	1
      000460 09                    2182 	.db	9
      000461 00 0A                 2183 	.dw	Sstm8s_adc1$ADC1_GetBufferValue$156-Sstm8s_adc1$ADC1_GetBufferValue$155
      000463 03                    2184 	.db	3
      000464 02                    2185 	.sleb128	2
      000465 01                    2186 	.db	1
      000466 09                    2187 	.db	9
      000467 00 14                 2188 	.dw	Sstm8s_adc1$ADC1_GetBufferValue$157-Sstm8s_adc1$ADC1_GetBufferValue$156
      000469 03                    2189 	.db	3
      00046A 05                    2190 	.sleb128	5
      00046B 01                    2191 	.db	1
      00046C 09                    2192 	.db	9
      00046D 00 11                 2193 	.dw	Sstm8s_adc1$ADC1_GetBufferValue$158-Sstm8s_adc1$ADC1_GetBufferValue$157
      00046F 03                    2194 	.db	3
      000470 02                    2195 	.sleb128	2
      000471 01                    2196 	.db	1
      000472 09                    2197 	.db	9
      000473 00 08                 2198 	.dw	Sstm8s_adc1$ADC1_GetBufferValue$159-Sstm8s_adc1$ADC1_GetBufferValue$158
      000475 03                    2199 	.db	3
      000476 02                    2200 	.sleb128	2
      000477 01                    2201 	.db	1
      000478 09                    2202 	.db	9
      000479 00 18                 2203 	.dw	Sstm8s_adc1$ADC1_GetBufferValue$160-Sstm8s_adc1$ADC1_GetBufferValue$159
      00047B 03                    2204 	.db	3
      00047C 03                    2205 	.sleb128	3
      00047D 01                    2206 	.db	1
      00047E 09                    2207 	.db	9
      00047F 00 02                 2208 	.dw	Sstm8s_adc1$ADC1_GetBufferValue$161-Sstm8s_adc1$ADC1_GetBufferValue$160
      000481 03                    2209 	.db	3
      000482 01                    2210 	.sleb128	1
      000483 01                    2211 	.db	1
      000484 09                    2212 	.db	9
      000485 00 09                 2213 	.dw	7+Sstm8s_adc1$ADC1_GetBufferValue$162-Sstm8s_adc1$ADC1_GetBufferValue$161
      000487 00                    2214 	.db	0
      000488 01                    2215 	.uleb128	1
      000489 01                    2216 	.db	1
      00048A 00                    2217 	.db	0
      00048B 05                    2218 	.uleb128	5
      00048C 02                    2219 	.db	2
      00048D 00 00r04r76           2220 	.dw	0,(Sstm8s_adc1$ADC1_GetAWDChannelStatus$164)
      000491 03                    2221 	.db	3
      000492 D7 03                 2222 	.sleb128	471
      000494 01                    2223 	.db	1
      000495 09                    2224 	.db	9
      000496 00 0E                 2225 	.dw	Sstm8s_adc1$ADC1_GetAWDChannelStatus$166-Sstm8s_adc1$ADC1_GetAWDChannelStatus$164
      000498 03                    2226 	.db	3
      000499 07                    2227 	.sleb128	7
      00049A 01                    2228 	.db	1
      00049B 09                    2229 	.db	9
      00049C 00 06                 2230 	.dw	Sstm8s_adc1$ADC1_GetAWDChannelStatus$167-Sstm8s_adc1$ADC1_GetAWDChannelStatus$166
      00049E 03                    2231 	.db	3
      00049F 02                    2232 	.sleb128	2
      0004A0 01                    2233 	.db	1
      0004A1 09                    2234 	.db	9
      0004A2 00 17                 2235 	.dw	Sstm8s_adc1$ADC1_GetAWDChannelStatus$168-Sstm8s_adc1$ADC1_GetAWDChannelStatus$167
      0004A4 03                    2236 	.db	3
      0004A5 04                    2237 	.sleb128	4
      0004A6 01                    2238 	.db	1
      0004A7 09                    2239 	.db	9
      0004A8 00 1A                 2240 	.dw	Sstm8s_adc1$ADC1_GetAWDChannelStatus$169-Sstm8s_adc1$ADC1_GetAWDChannelStatus$168
      0004AA 03                    2241 	.db	3
      0004AB 03                    2242 	.sleb128	3
      0004AC 01                    2243 	.db	1
      0004AD 09                    2244 	.db	9
      0004AE 00 00                 2245 	.dw	Sstm8s_adc1$ADC1_GetAWDChannelStatus$170-Sstm8s_adc1$ADC1_GetAWDChannelStatus$169
      0004B0 03                    2246 	.db	3
      0004B1 01                    2247 	.sleb128	1
      0004B2 01                    2248 	.db	1
      0004B3 09                    2249 	.db	9
      0004B4 00 09                 2250 	.dw	7+Sstm8s_adc1$ADC1_GetAWDChannelStatus$171-Sstm8s_adc1$ADC1_GetAWDChannelStatus$170
      0004B6 00                    2251 	.db	0
      0004B7 01                    2252 	.uleb128	1
      0004B8 01                    2253 	.db	1
      0004B9 00                    2254 	.db	0
      0004BA 05                    2255 	.uleb128	5
      0004BB 02                    2256 	.db	2
      0004BC 00 00r04rC4           2257 	.dw	0,(Sstm8s_adc1$ADC1_GetFlagStatus$173)
      0004C0 03                    2258 	.db	3
      0004C1 F0 03                 2259 	.sleb128	496
      0004C3 01                    2260 	.db	1
      0004C4 09                    2261 	.db	9
      0004C5 00 0E                 2262 	.dw	Sstm8s_adc1$ADC1_GetFlagStatus$175-Sstm8s_adc1$ADC1_GetFlagStatus$173
      0004C7 03                    2263 	.db	3
      0004C8 05                    2264 	.sleb128	5
      0004C9 01                    2265 	.db	1
      0004CA 09                    2266 	.db	9
      0004CB 00 0C                 2267 	.dw	Sstm8s_adc1$ADC1_GetFlagStatus$176-Sstm8s_adc1$ADC1_GetFlagStatus$175
      0004CD 03                    2268 	.db	3
      0004CE 03                    2269 	.sleb128	3
      0004CF 01                    2270 	.db	1
      0004D0 09                    2271 	.db	9
      0004D1 00 08                 2272 	.dw	Sstm8s_adc1$ADC1_GetFlagStatus$177-Sstm8s_adc1$ADC1_GetFlagStatus$176
      0004D3 03                    2273 	.db	3
      0004D4 02                    2274 	.sleb128	2
      0004D5 01                    2275 	.db	1
      0004D6 09                    2276 	.db	9
      0004D7 00 08                 2277 	.dw	Sstm8s_adc1$ADC1_GetFlagStatus$178-Sstm8s_adc1$ADC1_GetFlagStatus$177
      0004D9 03                    2278 	.db	3
      0004DA 03                    2279 	.sleb128	3
      0004DB 01                    2280 	.db	1
      0004DC 09                    2281 	.db	9
      0004DD 00 02                 2282 	.dw	Sstm8s_adc1$ADC1_GetFlagStatus$179-Sstm8s_adc1$ADC1_GetFlagStatus$178
      0004DF 03                    2283 	.db	3
      0004E0 01                    2284 	.sleb128	1
      0004E1 01                    2285 	.db	1
      0004E2 09                    2286 	.db	9
      0004E3 00 04                 2287 	.dw	Sstm8s_adc1$ADC1_GetFlagStatus$180-Sstm8s_adc1$ADC1_GetFlagStatus$179
      0004E5 03                    2288 	.db	3
      0004E6 02                    2289 	.sleb128	2
      0004E7 01                    2290 	.db	1
      0004E8 09                    2291 	.db	9
      0004E9 00 18                 2292 	.dw	Sstm8s_adc1$ADC1_GetFlagStatus$181-Sstm8s_adc1$ADC1_GetFlagStatus$180
      0004EB 03                    2293 	.db	3
      0004EC 04                    2294 	.sleb128	4
      0004ED 01                    2295 	.db	1
      0004EE 09                    2296 	.db	9
      0004EF 00 1C                 2297 	.dw	Sstm8s_adc1$ADC1_GetFlagStatus$182-Sstm8s_adc1$ADC1_GetFlagStatus$181
      0004F1 03                    2298 	.db	3
      0004F2 05                    2299 	.sleb128	5
      0004F3 01                    2300 	.db	1
      0004F4 09                    2301 	.db	9
      0004F5 00 06                 2302 	.dw	Sstm8s_adc1$ADC1_GetFlagStatus$183-Sstm8s_adc1$ADC1_GetFlagStatus$182
      0004F7 03                    2303 	.db	3
      0004F8 02                    2304 	.sleb128	2
      0004F9 01                    2305 	.db	1
      0004FA 09                    2306 	.db	9
      0004FB 00 00                 2307 	.dw	Sstm8s_adc1$ADC1_GetFlagStatus$184-Sstm8s_adc1$ADC1_GetFlagStatus$183
      0004FD 03                    2308 	.db	3
      0004FE 02                    2309 	.sleb128	2
      0004FF 01                    2310 	.db	1
      000500 09                    2311 	.db	9
      000501 00 09                 2312 	.dw	7+Sstm8s_adc1$ADC1_GetFlagStatus$185-Sstm8s_adc1$ADC1_GetFlagStatus$184
      000503 00                    2313 	.db	0
      000504 01                    2314 	.uleb128	1
      000505 01                    2315 	.db	1
      000506 00                    2316 	.db	0
      000507 05                    2317 	.uleb128	5
      000508 02                    2318 	.db	2
      000509 00 00r05r37           2319 	.dw	0,(Sstm8s_adc1$ADC1_ClearFlag$187)
      00050D 03                    2320 	.db	3
      00050E 95 04                 2321 	.sleb128	533
      000510 01                    2322 	.db	1
      000511 09                    2323 	.db	9
      000512 00 0E                 2324 	.dw	Sstm8s_adc1$ADC1_ClearFlag$189-Sstm8s_adc1$ADC1_ClearFlag$187
      000514 03                    2325 	.db	3
      000515 07                    2326 	.sleb128	7
      000516 01                    2327 	.db	1
      000517 09                    2328 	.db	9
      000518 00 09                 2329 	.dw	Sstm8s_adc1$ADC1_ClearFlag$190-Sstm8s_adc1$ADC1_ClearFlag$189
      00051A 03                    2330 	.db	3
      00051B 03                    2331 	.sleb128	3
      00051C 01                    2332 	.db	1
      00051D 09                    2333 	.db	9
      00051E 00 0A                 2334 	.dw	Sstm8s_adc1$ADC1_ClearFlag$191-Sstm8s_adc1$ADC1_ClearFlag$190
      000520 03                    2335 	.db	3
      000521 02                    2336 	.sleb128	2
      000522 01                    2337 	.db	1
      000523 09                    2338 	.db	9
      000524 00 08                 2339 	.dw	Sstm8s_adc1$ADC1_ClearFlag$192-Sstm8s_adc1$ADC1_ClearFlag$191
      000526 03                    2340 	.db	3
      000527 03                    2341 	.sleb128	3
      000528 01                    2342 	.db	1
      000529 09                    2343 	.db	9
      00052A 00 00                 2344 	.dw	Sstm8s_adc1$ADC1_ClearFlag$193-Sstm8s_adc1$ADC1_ClearFlag$192
      00052C 03                    2345 	.db	3
      00052D 01                    2346 	.sleb128	1
      00052E 01                    2347 	.db	1
      00052F 09                    2348 	.db	9
      000530 00 05                 2349 	.dw	Sstm8s_adc1$ADC1_ClearFlag$194-Sstm8s_adc1$ADC1_ClearFlag$193
      000532 03                    2350 	.db	3
      000533 02                    2351 	.sleb128	2
      000534 01                    2352 	.db	1
      000535 09                    2353 	.db	9
      000536 00 1E                 2354 	.dw	Sstm8s_adc1$ADC1_ClearFlag$195-Sstm8s_adc1$ADC1_ClearFlag$194
      000538 03                    2355 	.db	3
      000539 04                    2356 	.sleb128	4
      00053A 01                    2357 	.db	1
      00053B 09                    2358 	.db	9
      00053C 00 21                 2359 	.dw	Sstm8s_adc1$ADC1_ClearFlag$196-Sstm8s_adc1$ADC1_ClearFlag$195
      00053E 03                    2360 	.db	3
      00053F 05                    2361 	.sleb128	5
      000540 01                    2362 	.db	1
      000541 09                    2363 	.db	9
      000542 00 0F                 2364 	.dw	Sstm8s_adc1$ADC1_ClearFlag$197-Sstm8s_adc1$ADC1_ClearFlag$196
      000544 03                    2365 	.db	3
      000545 02                    2366 	.sleb128	2
      000546 01                    2367 	.db	1
      000547 09                    2368 	.db	9
      000548 00 09                 2369 	.dw	7+Sstm8s_adc1$ADC1_ClearFlag$198-Sstm8s_adc1$ADC1_ClearFlag$197
      00054A 00                    2370 	.db	0
      00054B 01                    2371 	.uleb128	1
      00054C 01                    2372 	.db	1
      00054D 00                    2373 	.db	0
      00054E 05                    2374 	.uleb128	5
      00054F 02                    2375 	.db	2
      000550 00 00r05rBC           2376 	.dw	0,(Sstm8s_adc1$ADC1_GetITStatus$200)
      000554 03                    2377 	.db	3
      000555 C6 04                 2378 	.sleb128	582
      000557 01                    2379 	.db	1
      000558 09                    2380 	.db	9
      000559 00 0E                 2381 	.dw	Sstm8s_adc1$ADC1_GetITStatus$202-Sstm8s_adc1$ADC1_GetITStatus$200
      00055B 03                    2382 	.db	3
      00055C 08                    2383 	.sleb128	8
      00055D 01                    2384 	.db	1
      00055E 09                    2385 	.db	9
      00055F 00 0C                 2386 	.dw	Sstm8s_adc1$ADC1_GetITStatus$203-Sstm8s_adc1$ADC1_GetITStatus$202
      000561 03                    2387 	.db	3
      000562 03                    2388 	.sleb128	3
      000563 01                    2389 	.db	1
      000564 09                    2390 	.db	9
      000565 00 06                 2391 	.dw	Sstm8s_adc1$ADC1_GetITStatus$204-Sstm8s_adc1$ADC1_GetITStatus$203
      000567 03                    2392 	.db	3
      000568 01                    2393 	.sleb128	1
      000569 01                    2394 	.db	1
      00056A 09                    2395 	.db	9
      00056B 00 05                 2396 	.dw	Sstm8s_adc1$ADC1_GetITStatus$205-Sstm8s_adc1$ADC1_GetITStatus$204
      00056D 03                    2397 	.db	3
      00056E 02                    2398 	.sleb128	2
      00056F 01                    2399 	.db	1
      000570 09                    2400 	.db	9
      000571 00 19                 2401 	.dw	Sstm8s_adc1$ADC1_GetITStatus$206-Sstm8s_adc1$ADC1_GetITStatus$205
      000573 03                    2402 	.db	3
      000574 04                    2403 	.sleb128	4
      000575 01                    2404 	.db	1
      000576 09                    2405 	.db	9
      000577 00 1C                 2406 	.dw	Sstm8s_adc1$ADC1_GetITStatus$207-Sstm8s_adc1$ADC1_GetITStatus$206
      000579 03                    2407 	.db	3
      00057A 05                    2408 	.sleb128	5
      00057B 01                    2409 	.db	1
      00057C 09                    2410 	.db	9
      00057D 00 0A                 2411 	.dw	Sstm8s_adc1$ADC1_GetITStatus$208-Sstm8s_adc1$ADC1_GetITStatus$207
      00057F 03                    2412 	.db	3
      000580 02                    2413 	.sleb128	2
      000581 01                    2414 	.db	1
      000582 09                    2415 	.db	9
      000583 00 00                 2416 	.dw	Sstm8s_adc1$ADC1_GetITStatus$209-Sstm8s_adc1$ADC1_GetITStatus$208
      000585 03                    2417 	.db	3
      000586 01                    2418 	.sleb128	1
      000587 01                    2419 	.db	1
      000588 09                    2420 	.db	9
      000589 00 09                 2421 	.dw	7+Sstm8s_adc1$ADC1_GetITStatus$210-Sstm8s_adc1$ADC1_GetITStatus$209
      00058B 00                    2422 	.db	0
      00058C 01                    2423 	.uleb128	1
      00058D 01                    2424 	.db	1
      00058E 00                    2425 	.db	0
      00058F 05                    2426 	.uleb128	5
      000590 02                    2427 	.db	2
      000591 00 00r06r29           2428 	.dw	0,(Sstm8s_adc1$ADC1_ClearITPendingBit$212)
      000595 03                    2429 	.db	3
      000596 F4 04                 2430 	.sleb128	628
      000598 01                    2431 	.db	1
      000599 09                    2432 	.db	9
      00059A 00 0E                 2433 	.dw	Sstm8s_adc1$ADC1_ClearITPendingBit$214-Sstm8s_adc1$ADC1_ClearITPendingBit$212
      00059C 03                    2434 	.db	3
      00059D 07                    2435 	.sleb128	7
      00059E 01                    2436 	.db	1
      00059F 09                    2437 	.db	9
      0005A0 00 0C                 2438 	.dw	Sstm8s_adc1$ADC1_ClearITPendingBit$215-Sstm8s_adc1$ADC1_ClearITPendingBit$214
      0005A2 03                    2439 	.db	3
      0005A3 03                    2440 	.sleb128	3
      0005A4 01                    2441 	.db	1
      0005A5 09                    2442 	.db	9
      0005A6 00 06                 2443 	.dw	Sstm8s_adc1$ADC1_ClearITPendingBit$216-Sstm8s_adc1$ADC1_ClearITPendingBit$215
      0005A8 03                    2444 	.db	3
      0005A9 01                    2445 	.sleb128	1
      0005AA 01                    2446 	.db	1
      0005AB 09                    2447 	.db	9
      0005AC 00 05                 2448 	.dw	Sstm8s_adc1$ADC1_ClearITPendingBit$217-Sstm8s_adc1$ADC1_ClearITPendingBit$216
      0005AE 03                    2449 	.db	3
      0005AF 02                    2450 	.sleb128	2
      0005B0 01                    2451 	.db	1
      0005B1 09                    2452 	.db	9
      0005B2 00 1E                 2453 	.dw	Sstm8s_adc1$ADC1_ClearITPendingBit$218-Sstm8s_adc1$ADC1_ClearITPendingBit$217
      0005B4 03                    2454 	.db	3
      0005B5 04                    2455 	.sleb128	4
      0005B6 01                    2456 	.db	1
      0005B7 09                    2457 	.db	9
      0005B8 00 21                 2458 	.dw	Sstm8s_adc1$ADC1_ClearITPendingBit$219-Sstm8s_adc1$ADC1_ClearITPendingBit$218
      0005BA 03                    2459 	.db	3
      0005BB 05                    2460 	.sleb128	5
      0005BC 01                    2461 	.db	1
      0005BD 09                    2462 	.db	9
      0005BE 00 0F                 2463 	.dw	Sstm8s_adc1$ADC1_ClearITPendingBit$220-Sstm8s_adc1$ADC1_ClearITPendingBit$219
      0005C0 03                    2464 	.db	3
      0005C1 02                    2465 	.sleb128	2
      0005C2 01                    2466 	.db	1
      0005C3 09                    2467 	.db	9
      0005C4 00 09                 2468 	.dw	7+Sstm8s_adc1$ADC1_ClearITPendingBit$221-Sstm8s_adc1$ADC1_ClearITPendingBit$220
      0005C6 00                    2469 	.db	0
      0005C7 01                    2470 	.uleb128	1
      0005C8 01                    2471 	.db	1
      0005C9                       2472 Ldebug_line_end:
                                   2473 
                                   2474 	.area .debug_loc (NOLOAD)
      000000                       2475 Ldebug_loc_start:
      000000 00 00r06r35           2476 	.dw	0,(Sstm8s_adc1$ADC1_ClearITPendingBit$213)
      000004 00 00r06rA5           2477 	.dw	0,(Sstm8s_adc1$ADC1_ClearITPendingBit$222)
      000008 00 02                 2478 	.dw	2
      00000A 8F                    2479 	.db	143
      00000B 01                    2480 	.sleb128	1
      00000C 00 00 00 00           2481 	.dw	0,0
      000010 00 00 00 00           2482 	.dw	0,0
      000014 00 00r05rC8           2483 	.dw	0,(Sstm8s_adc1$ADC1_GetITStatus$201)
      000018 00 00r06r29           2484 	.dw	0,(Sstm8s_adc1$ADC1_GetITStatus$211)
      00001C 00 02                 2485 	.dw	2
      00001E 8F                    2486 	.db	143
      00001F 01                    2487 	.sleb128	1
      000020 00 00 00 00           2488 	.dw	0,0
      000024 00 00 00 00           2489 	.dw	0,0
      000028 00 00r05r43           2490 	.dw	0,(Sstm8s_adc1$ADC1_ClearFlag$188)
      00002C 00 00r05rBC           2491 	.dw	0,(Sstm8s_adc1$ADC1_ClearFlag$199)
      000030 00 02                 2492 	.dw	2
      000032 8F                    2493 	.db	143
      000033 01                    2494 	.sleb128	1
      000034 00 00 00 00           2495 	.dw	0,0
      000038 00 00 00 00           2496 	.dw	0,0
      00003C 00 00r04rD0           2497 	.dw	0,(Sstm8s_adc1$ADC1_GetFlagStatus$174)
      000040 00 00r05r37           2498 	.dw	0,(Sstm8s_adc1$ADC1_GetFlagStatus$186)
      000044 00 02                 2499 	.dw	2
      000046 8F                    2500 	.db	143
      000047 01                    2501 	.sleb128	1
      000048 00 00 00 00           2502 	.dw	0,0
      00004C 00 00 00 00           2503 	.dw	0,0
      000050 00 00r04r82           2504 	.dw	0,(Sstm8s_adc1$ADC1_GetAWDChannelStatus$165)
      000054 00 00r04rC4           2505 	.dw	0,(Sstm8s_adc1$ADC1_GetAWDChannelStatus$172)
      000058 00 02                 2506 	.dw	2
      00005A 8F                    2507 	.db	143
      00005B 01                    2508 	.sleb128	1
      00005C 00 00 00 00           2509 	.dw	0,0
      000060 00 00 00 00           2510 	.dw	0,0
      000064 00 00r04r03           2511 	.dw	0,(Sstm8s_adc1$ADC1_GetBufferValue$152)
      000068 00 00r04r76           2512 	.dw	0,(Sstm8s_adc1$ADC1_GetBufferValue$163)
      00006C 00 02                 2513 	.dw	2
      00006E 8F                    2514 	.db	143
      00006F 01                    2515 	.sleb128	1
      000070 00 00 00 00           2516 	.dw	0,0
      000074 00 00 00 00           2517 	.dw	0,0
      000078 00 00r03rE1           2518 	.dw	0,(Sstm8s_adc1$ADC1_SetLowThreshold$145)
      00007C 00 00r03rF7           2519 	.dw	0,(Sstm8s_adc1$ADC1_SetLowThreshold$150)
      000080 00 02                 2520 	.dw	2
      000082 8F                    2521 	.db	143
      000083 01                    2522 	.sleb128	1
      000084 00 00 00 00           2523 	.dw	0,0
      000088 00 00 00 00           2524 	.dw	0,0
      00008C 00 00r03rBF           2525 	.dw	0,(Sstm8s_adc1$ADC1_SetHighThreshold$138)
      000090 00 00r03rD5           2526 	.dw	0,(Sstm8s_adc1$ADC1_SetHighThreshold$143)
      000094 00 02                 2527 	.dw	2
      000096 8F                    2528 	.db	143
      000097 01                    2529 	.sleb128	1
      000098 00 00 00 00           2530 	.dw	0,0
      00009C 00 00 00 00           2531 	.dw	0,0
      0000A0 00 00r03r24           2532 	.dw	0,(Sstm8s_adc1$ADC1_AWDChannelConfig$126)
      0000A4 00 00r03rB3           2533 	.dw	0,(Sstm8s_adc1$ADC1_AWDChannelConfig$136)
      0000A8 00 02                 2534 	.dw	2
      0000AA 8F                    2535 	.db	143
      0000AB 01                    2536 	.sleb128	1
      0000AC 00 00 00 00           2537 	.dw	0,0
      0000B0 00 00 00 00           2538 	.dw	0,0
      0000B4 00 00r02rBB           2539 	.dw	0,(Sstm8s_adc1$ADC1_GetConversionValue$113)
      0000B8 00 00r03r18           2540 	.dw	0,(Sstm8s_adc1$ADC1_GetConversionValue$124)
      0000BC 00 02                 2541 	.dw	2
      0000BE 8F                    2542 	.db	143
      0000BF 01                    2543 	.sleb128	1
      0000C0 00 00 00 00           2544 	.dw	0,0
      0000C4 00 00 00 00           2545 	.dw	0,0
      0000C8 00 00r02rA4           2546 	.dw	0,(Sstm8s_adc1$ADC1_StartConversion$107)
      0000CC 00 00r02rAF           2547 	.dw	0,(Sstm8s_adc1$ADC1_StartConversion$111)
      0000D0 00 02                 2548 	.dw	2
      0000D2 8F                    2549 	.db	143
      0000D3 01                    2550 	.sleb128	1
      0000D4 00 00 00 00           2551 	.dw	0,0
      0000D8 00 00 00 00           2552 	.dw	0,0
      0000DC 00 00r02r6C           2553 	.dw	0,(Sstm8s_adc1$ADC1_ExternalTriggerConfig$97)
      0000E0 00 00r02r98           2554 	.dw	0,(Sstm8s_adc1$ADC1_ExternalTriggerConfig$105)
      0000E4 00 02                 2555 	.dw	2
      0000E6 8F                    2556 	.db	143
      0000E7 01                    2557 	.sleb128	1
      0000E8 00 00 00 00           2558 	.dw	0,0
      0000EC 00 00 00 00           2559 	.dw	0,0
      0000F0 00 00r02r21           2560 	.dw	0,(Sstm8s_adc1$ADC1_ConversionConfig$85)
      0000F4 00 00r02r60           2561 	.dw	0,(Sstm8s_adc1$ADC1_ConversionConfig$95)
      0000F8 00 02                 2562 	.dw	2
      0000FA 8F                    2563 	.db	143
      0000FB 01                    2564 	.sleb128	1
      0000FC 00 00 00 00           2565 	.dw	0,0
      000100 00 00 00 00           2566 	.dw	0,0
      000104 00 00r01r56           2567 	.dw	0,(Sstm8s_adc1$ADC1_SchmittTriggerConfig$67)
      000108 00 00r02r15           2568 	.dw	0,(Sstm8s_adc1$ADC1_SchmittTriggerConfig$83)
      00010C 00 02                 2569 	.dw	2
      00010E 8F                    2570 	.db	143
      00010F 01                    2571 	.sleb128	1
      000110 00 00 00 00           2572 	.dw	0,0
      000114 00 00 00 00           2573 	.dw	0,0
      000118 00 00r01r32           2574 	.dw	0,(Sstm8s_adc1$ADC1_PrescalerConfig$60)
      00011C 00 00r01r4A           2575 	.dw	0,(Sstm8s_adc1$ADC1_PrescalerConfig$65)
      000120 00 02                 2576 	.dw	2
      000122 8F                    2577 	.db	143
      000123 01                    2578 	.sleb128	1
      000124 00 00 00 00           2579 	.dw	0,0
      000128 00 00 00 00           2580 	.dw	0,0
      00012C 00 00r00rFA           2581 	.dw	0,(Sstm8s_adc1$ADC1_ITConfig$52)
      000130 00 00r01r26           2582 	.dw	0,(Sstm8s_adc1$ADC1_ITConfig$58)
      000134 00 02                 2583 	.dw	2
      000136 8F                    2584 	.db	143
      000137 01                    2585 	.sleb128	1
      000138 00 00 00 00           2586 	.dw	0,0
      00013C 00 00 00 00           2587 	.dw	0,0
      000140 00 00r00rD9           2588 	.dw	0,(Sstm8s_adc1$ADC1_DataBufferCmd$44)
      000144 00 00r00rEE           2589 	.dw	0,(Sstm8s_adc1$ADC1_DataBufferCmd$50)
      000148 00 02                 2590 	.dw	2
      00014A 8F                    2591 	.db	143
      00014B 01                    2592 	.sleb128	1
      00014C 00 00 00 00           2593 	.dw	0,0
      000150 00 00 00 00           2594 	.dw	0,0
      000154 00 00r00rB2           2595 	.dw	0,(Sstm8s_adc1$ADC1_ScanModeCmd$36)
      000158 00 00r00rCD           2596 	.dw	0,(Sstm8s_adc1$ADC1_ScanModeCmd$42)
      00015C 00 02                 2597 	.dw	2
      00015E 8F                    2598 	.db	143
      00015F 01                    2599 	.sleb128	1
      000160 00 00 00 00           2600 	.dw	0,0
      000164 00 00 00 00           2601 	.dw	0,0
      000168 00 00r00r91           2602 	.dw	0,(Sstm8s_adc1$ADC1_Cmd$28)
      00016C 00 00r00rA6           2603 	.dw	0,(Sstm8s_adc1$ADC1_Cmd$34)
      000170 00 02                 2604 	.dw	2
      000172 8F                    2605 	.db	143
      000173 01                    2606 	.sleb128	1
      000174 00 00 00 00           2607 	.dw	0,0
      000178 00 00 00 00           2608 	.dw	0,0
      00017C 00 00r00r4F           2609 	.dw	0,(Sstm8s_adc1$ADC1_Init$18)
      000180 00 00r00r85           2610 	.dw	0,(Sstm8s_adc1$ADC1_Init$26)
      000184 00 02                 2611 	.dw	2
      000186 8F                    2612 	.db	143
      000187 01                    2613 	.sleb128	1
      000188 00 00 00 00           2614 	.dw	0,0
      00018C 00 00 00 00           2615 	.dw	0,0
      000190 00 00r00r0C           2616 	.dw	0,(Sstm8s_adc1$ADC1_DeInit$1)
      000194 00 00r00r43           2617 	.dw	0,(Sstm8s_adc1$ADC1_DeInit$16)
      000198 00 02                 2618 	.dw	2
      00019A 8F                    2619 	.db	143
      00019B 01                    2620 	.sleb128	1
      00019C 00 00 00 00           2621 	.dw	0,0
      0001A0 00 00 00 00           2622 	.dw	0,0
                                   2623 
                                   2624 	.area .debug_abbrev (NOLOAD)
      000000                       2625 Ldebug_abbrev:
      000000 0B                    2626 	.uleb128	11
      000001 34                    2627 	.uleb128	52
      000002 00                    2628 	.db	0
      000003 03                    2629 	.uleb128	3
      000004 08                    2630 	.uleb128	8
      000005 49                    2631 	.uleb128	73
      000006 13                    2632 	.uleb128	19
      000007 00                    2633 	.uleb128	0
      000008 00                    2634 	.uleb128	0
      000009 06                    2635 	.uleb128	6
      00000A 0B                    2636 	.uleb128	11
      00000B 00                    2637 	.db	0
      00000C 00                    2638 	.uleb128	0
      00000D 00                    2639 	.uleb128	0
      00000E 08                    2640 	.uleb128	8
      00000F 0B                    2641 	.uleb128	11
      000010 01                    2642 	.db	1
      000011 00                    2643 	.uleb128	0
      000012 00                    2644 	.uleb128	0
      000013 04                    2645 	.uleb128	4
      000014 05                    2646 	.uleb128	5
      000015 00                    2647 	.db	0
      000016 02                    2648 	.uleb128	2
      000017 0A                    2649 	.uleb128	10
      000018 03                    2650 	.uleb128	3
      000019 08                    2651 	.uleb128	8
      00001A 49                    2652 	.uleb128	73
      00001B 13                    2653 	.uleb128	19
      00001C 00                    2654 	.uleb128	0
      00001D 00                    2655 	.uleb128	0
      00001E 03                    2656 	.uleb128	3
      00001F 2E                    2657 	.uleb128	46
      000020 01                    2658 	.db	1
      000021 01                    2659 	.uleb128	1
      000022 13                    2660 	.uleb128	19
      000023 03                    2661 	.uleb128	3
      000024 08                    2662 	.uleb128	8
      000025 11                    2663 	.uleb128	17
      000026 01                    2664 	.uleb128	1
      000027 12                    2665 	.uleb128	18
      000028 01                    2666 	.uleb128	1
      000029 3F                    2667 	.uleb128	63
      00002A 0C                    2668 	.uleb128	12
      00002B 40                    2669 	.uleb128	64
      00002C 06                    2670 	.uleb128	6
      00002D 00                    2671 	.uleb128	0
      00002E 00                    2672 	.uleb128	0
      00002F 0A                    2673 	.uleb128	10
      000030 34                    2674 	.uleb128	52
      000031 00                    2675 	.db	0
      000032 02                    2676 	.uleb128	2
      000033 0A                    2677 	.uleb128	10
      000034 03                    2678 	.uleb128	3
      000035 08                    2679 	.uleb128	8
      000036 49                    2680 	.uleb128	73
      000037 13                    2681 	.uleb128	19
      000038 00                    2682 	.uleb128	0
      000039 00                    2683 	.uleb128	0
      00003A 09                    2684 	.uleb128	9
      00003B 2E                    2685 	.uleb128	46
      00003C 01                    2686 	.db	1
      00003D 01                    2687 	.uleb128	1
      00003E 13                    2688 	.uleb128	19
      00003F 03                    2689 	.uleb128	3
      000040 08                    2690 	.uleb128	8
      000041 11                    2691 	.uleb128	17
      000042 01                    2692 	.uleb128	1
      000043 12                    2693 	.uleb128	18
      000044 01                    2694 	.uleb128	1
      000045 3F                    2695 	.uleb128	63
      000046 0C                    2696 	.uleb128	12
      000047 40                    2697 	.uleb128	64
      000048 06                    2698 	.uleb128	6
      000049 49                    2699 	.uleb128	73
      00004A 13                    2700 	.uleb128	19
      00004B 00                    2701 	.uleb128	0
      00004C 00                    2702 	.uleb128	0
      00004D 07                    2703 	.uleb128	7
      00004E 0B                    2704 	.uleb128	11
      00004F 01                    2705 	.db	1
      000050 01                    2706 	.uleb128	1
      000051 13                    2707 	.uleb128	19
      000052 00                    2708 	.uleb128	0
      000053 00                    2709 	.uleb128	0
      000054 01                    2710 	.uleb128	1
      000055 11                    2711 	.uleb128	17
      000056 01                    2712 	.db	1
      000057 03                    2713 	.uleb128	3
      000058 08                    2714 	.uleb128	8
      000059 10                    2715 	.uleb128	16
      00005A 06                    2716 	.uleb128	6
      00005B 13                    2717 	.uleb128	19
      00005C 0B                    2718 	.uleb128	11
      00005D 25                    2719 	.uleb128	37
      00005E 08                    2720 	.uleb128	8
      00005F 00                    2721 	.uleb128	0
      000060 00                    2722 	.uleb128	0
      000061 02                    2723 	.uleb128	2
      000062 2E                    2724 	.uleb128	46
      000063 00                    2725 	.db	0
      000064 03                    2726 	.uleb128	3
      000065 08                    2727 	.uleb128	8
      000066 11                    2728 	.uleb128	17
      000067 01                    2729 	.uleb128	1
      000068 12                    2730 	.uleb128	18
      000069 01                    2731 	.uleb128	1
      00006A 3F                    2732 	.uleb128	63
      00006B 0C                    2733 	.uleb128	12
      00006C 40                    2734 	.uleb128	64
      00006D 06                    2735 	.uleb128	6
      00006E 00                    2736 	.uleb128	0
      00006F 00                    2737 	.uleb128	0
      000070 0C                    2738 	.uleb128	12
      000071 2E                    2739 	.uleb128	46
      000072 01                    2740 	.db	1
      000073 03                    2741 	.uleb128	3
      000074 08                    2742 	.uleb128	8
      000075 11                    2743 	.uleb128	17
      000076 01                    2744 	.uleb128	1
      000077 12                    2745 	.uleb128	18
      000078 01                    2746 	.uleb128	1
      000079 3F                    2747 	.uleb128	63
      00007A 0C                    2748 	.uleb128	12
      00007B 40                    2749 	.uleb128	64
      00007C 06                    2750 	.uleb128	6
      00007D 00                    2751 	.uleb128	0
      00007E 00                    2752 	.uleb128	0
      00007F 05                    2753 	.uleb128	5
      000080 24                    2754 	.uleb128	36
      000081 00                    2755 	.db	0
      000082 03                    2756 	.uleb128	3
      000083 08                    2757 	.uleb128	8
      000084 0B                    2758 	.uleb128	11
      000085 0B                    2759 	.uleb128	11
      000086 3E                    2760 	.uleb128	62
      000087 0B                    2761 	.uleb128	11
      000088 00                    2762 	.uleb128	0
      000089 00                    2763 	.uleb128	0
      00008A 00                    2764 	.uleb128	0
                                   2765 
                                   2766 	.area .debug_info (NOLOAD)
      000000 00 00 07 0E           2767 	.dw	0,Ldebug_info_end-Ldebug_info_start
      000004                       2768 Ldebug_info_start:
      000004 00 02                 2769 	.dw	2
      000006 00 00r00r00           2770 	.dw	0,(Ldebug_abbrev)
      00000A 04                    2771 	.db	4
      00000B 01                    2772 	.uleb128	1
      00000C 53 74 64 50 65 72 69  2773 	.ascii "StdPeriphLib/src/stm8s_adc1.c"
             70 68 4C 69 62 2F 73
             72 63 2F 73 74 6D 38
             73 5F 61 64 63 31 2E
             63
      000029 00                    2774 	.db	0
      00002A 00 00r00r00           2775 	.dw	0,(Ldebug_line_start+-4)
      00002E 01                    2776 	.db	1
      00002F 53 44 43 43 20 76 65  2777 	.ascii "SDCC version 3.6.0 #9615"
             72 73 69 6F 6E 20 33
             2E 36 2E 30 20 23 39
             36 31 35
      000047 00                    2778 	.db	0
      000048 02                    2779 	.uleb128	2
      000049 41 44 43 31 5F 44 65  2780 	.ascii "ADC1_DeInit"
             49 6E 69 74
      000054 00                    2781 	.db	0
      000055 00 00r00r00           2782 	.dw	0,(_ADC1_DeInit)
      000059 00 00r00r43           2783 	.dw	0,(XG$ADC1_DeInit$0$0+7)
      00005D 01                    2784 	.db	1
      00005E 00 00r01r90           2785 	.dw	0,(Ldebug_loc_start+400)
      000062 03                    2786 	.uleb128	3
      000063 00 00 01 5C           2787 	.dw	0,348
      000067 41 44 43 31 5F 49 6E  2788 	.ascii "ADC1_Init"
             69 74
      000070 00                    2789 	.db	0
      000071 00 00r00r43           2790 	.dw	0,(_ADC1_Init)
      000075 00 00r00r85           2791 	.dw	0,(XG$ADC1_Init$0$0+7)
      000079 01                    2792 	.db	1
      00007A 00 00r01r7C           2793 	.dw	0,(Ldebug_loc_start+380)
      00007E 04                    2794 	.uleb128	4
      00007F 02                    2795 	.db	2
      000080 91                    2796 	.db	145
      000081 04                    2797 	.sleb128	4
      000082 41 44 43 31 5F 43 6F  2798 	.ascii "ADC1_ConversionMode"
             6E 76 65 72 73 69 6F
             6E 4D 6F 64 65
      000095 00                    2799 	.db	0
      000096 00 00 01 5C           2800 	.dw	0,348
      00009A 04                    2801 	.uleb128	4
      00009B 02                    2802 	.db	2
      00009C 91                    2803 	.db	145
      00009D 05                    2804 	.sleb128	5
      00009E 41 44 43 31 5F 43 68  2805 	.ascii "ADC1_Channel"
             61 6E 6E 65 6C
      0000AA 00                    2806 	.db	0
      0000AB 00 00 01 5C           2807 	.dw	0,348
      0000AF 04                    2808 	.uleb128	4
      0000B0 02                    2809 	.db	2
      0000B1 91                    2810 	.db	145
      0000B2 06                    2811 	.sleb128	6
      0000B3 41 44 43 31 5F 50 72  2812 	.ascii "ADC1_PrescalerSelection"
             65 73 63 61 6C 65 72
             53 65 6C 65 63 74 69
             6F 6E
      0000CA 00                    2813 	.db	0
      0000CB 00 00 01 5C           2814 	.dw	0,348
      0000CF 04                    2815 	.uleb128	4
      0000D0 02                    2816 	.db	2
      0000D1 91                    2817 	.db	145
      0000D2 07                    2818 	.sleb128	7
      0000D3 41 44 43 31 5F 45 78  2819 	.ascii "ADC1_ExtTrigger"
             74 54 72 69 67 67 65
             72
      0000E2 00                    2820 	.db	0
      0000E3 00 00 01 5C           2821 	.dw	0,348
      0000E7 04                    2822 	.uleb128	4
      0000E8 02                    2823 	.db	2
      0000E9 91                    2824 	.db	145
      0000EA 08                    2825 	.sleb128	8
      0000EB 41 44 43 31 5F 45 78  2826 	.ascii "ADC1_ExtTriggerState"
             74 54 72 69 67 67 65
             72 53 74 61 74 65
      0000FF 00                    2827 	.db	0
      000100 00 00 01 5C           2828 	.dw	0,348
      000104 04                    2829 	.uleb128	4
      000105 02                    2830 	.db	2
      000106 91                    2831 	.db	145
      000107 09                    2832 	.sleb128	9
      000108 41 44 43 31 5F 41 6C  2833 	.ascii "ADC1_Align"
             69 67 6E
      000112 00                    2834 	.db	0
      000113 00 00 01 5C           2835 	.dw	0,348
      000117 04                    2836 	.uleb128	4
      000118 02                    2837 	.db	2
      000119 91                    2838 	.db	145
      00011A 0A                    2839 	.sleb128	10
      00011B 41 44 43 31 5F 53 63  2840 	.ascii "ADC1_SchmittTriggerChannel"
             68 6D 69 74 74 54 72
             69 67 67 65 72 43 68
             61 6E 6E 65 6C
      000135 00                    2841 	.db	0
      000136 00 00 01 5C           2842 	.dw	0,348
      00013A 04                    2843 	.uleb128	4
      00013B 02                    2844 	.db	2
      00013C 91                    2845 	.db	145
      00013D 0B                    2846 	.sleb128	11
      00013E 41 44 43 31 5F 53 63  2847 	.ascii "ADC1_SchmittTriggerState"
             68 6D 69 74 74 54 72
             69 67 67 65 72 53 74
             61 74 65
      000156 00                    2848 	.db	0
      000157 00 00 01 5C           2849 	.dw	0,348
      00015B 00                    2850 	.uleb128	0
      00015C 05                    2851 	.uleb128	5
      00015D 75 6E 73 69 67 6E 65  2852 	.ascii "unsigned char"
             64 20 63 68 61 72
      00016A 00                    2853 	.db	0
      00016B 01                    2854 	.db	1
      00016C 08                    2855 	.db	8
      00016D 03                    2856 	.uleb128	3
      00016E 00 00 01 9C           2857 	.dw	0,412
      000172 41 44 43 31 5F 43 6D  2858 	.ascii "ADC1_Cmd"
             64
      00017A 00                    2859 	.db	0
      00017B 00 00r00r85           2860 	.dw	0,(_ADC1_Cmd)
      00017F 00 00r00rA6           2861 	.dw	0,(XG$ADC1_Cmd$0$0+7)
      000183 01                    2862 	.db	1
      000184 00 00r01r68           2863 	.dw	0,(Ldebug_loc_start+360)
      000188 04                    2864 	.uleb128	4
      000189 02                    2865 	.db	2
      00018A 91                    2866 	.db	145
      00018B 04                    2867 	.sleb128	4
      00018C 4E 65 77 53 74 61 74  2868 	.ascii "NewState"
             65
      000194 00                    2869 	.db	0
      000195 00 00 01 5C           2870 	.dw	0,348
      000199 06                    2871 	.uleb128	6
      00019A 06                    2872 	.uleb128	6
      00019B 00                    2873 	.uleb128	0
      00019C 03                    2874 	.uleb128	3
      00019D 00 00 01 D3           2875 	.dw	0,467
      0001A1 41 44 43 31 5F 53 63  2876 	.ascii "ADC1_ScanModeCmd"
             61 6E 4D 6F 64 65 43
             6D 64
      0001B1 00                    2877 	.db	0
      0001B2 00 00r00rA6           2878 	.dw	0,(_ADC1_ScanModeCmd)
      0001B6 00 00r00rCD           2879 	.dw	0,(XG$ADC1_ScanModeCmd$0$0+7)
      0001BA 01                    2880 	.db	1
      0001BB 00 00r01r54           2881 	.dw	0,(Ldebug_loc_start+340)
      0001BF 04                    2882 	.uleb128	4
      0001C0 02                    2883 	.db	2
      0001C1 91                    2884 	.db	145
      0001C2 04                    2885 	.sleb128	4
      0001C3 4E 65 77 53 74 61 74  2886 	.ascii "NewState"
             65
      0001CB 00                    2887 	.db	0
      0001CC 00 00 01 5C           2888 	.dw	0,348
      0001D0 06                    2889 	.uleb128	6
      0001D1 06                    2890 	.uleb128	6
      0001D2 00                    2891 	.uleb128	0
      0001D3 03                    2892 	.uleb128	3
      0001D4 00 00 02 0C           2893 	.dw	0,524
      0001D8 41 44 43 31 5F 44 61  2894 	.ascii "ADC1_DataBufferCmd"
             74 61 42 75 66 66 65
             72 43 6D 64
      0001EA 00                    2895 	.db	0
      0001EB 00 00r00rCD           2896 	.dw	0,(_ADC1_DataBufferCmd)
      0001EF 00 00r00rEE           2897 	.dw	0,(XG$ADC1_DataBufferCmd$0$0+7)
      0001F3 01                    2898 	.db	1
      0001F4 00 00r01r40           2899 	.dw	0,(Ldebug_loc_start+320)
      0001F8 04                    2900 	.uleb128	4
      0001F9 02                    2901 	.db	2
      0001FA 91                    2902 	.db	145
      0001FB 04                    2903 	.sleb128	4
      0001FC 4E 65 77 53 74 61 74  2904 	.ascii "NewState"
             65
      000204 00                    2905 	.db	0
      000205 00 00 01 5C           2906 	.dw	0,348
      000209 06                    2907 	.uleb128	6
      00020A 06                    2908 	.uleb128	6
      00020B 00                    2909 	.uleb128	0
      00020C 03                    2910 	.uleb128	3
      00020D 00 00 02 50           2911 	.dw	0,592
      000211 41 44 43 31 5F 49 54  2912 	.ascii "ADC1_ITConfig"
             43 6F 6E 66 69 67
      00021E 00                    2913 	.db	0
      00021F 00 00r00rEE           2914 	.dw	0,(_ADC1_ITConfig)
      000223 00 00r01r26           2915 	.dw	0,(XG$ADC1_ITConfig$0$0+7)
      000227 01                    2916 	.db	1
      000228 00 00r01r2C           2917 	.dw	0,(Ldebug_loc_start+300)
      00022C 04                    2918 	.uleb128	4
      00022D 02                    2919 	.db	2
      00022E 91                    2920 	.db	145
      00022F 04                    2921 	.sleb128	4
      000230 41 44 43 31 5F 49 54  2922 	.ascii "ADC1_IT"
      000237 00                    2923 	.db	0
      000238 00 00 02 50           2924 	.dw	0,592
      00023C 04                    2925 	.uleb128	4
      00023D 02                    2926 	.db	2
      00023E 91                    2927 	.db	145
      00023F 06                    2928 	.sleb128	6
      000240 4E 65 77 53 74 61 74  2929 	.ascii "NewState"
             65
      000248 00                    2930 	.db	0
      000249 00 00 01 5C           2931 	.dw	0,348
      00024D 06                    2932 	.uleb128	6
      00024E 06                    2933 	.uleb128	6
      00024F 00                    2934 	.uleb128	0
      000250 05                    2935 	.uleb128	5
      000251 75 6E 73 69 67 6E 65  2936 	.ascii "unsigned int"
             64 20 69 6E 74
      00025D 00                    2937 	.db	0
      00025E 02                    2938 	.db	2
      00025F 07                    2939 	.db	7
      000260 03                    2940 	.uleb128	3
      000261 00 00 02 9F           2941 	.dw	0,671
      000265 41 44 43 31 5F 50 72  2942 	.ascii "ADC1_PrescalerConfig"
             65 73 63 61 6C 65 72
             43 6F 6E 66 69 67
      000279 00                    2943 	.db	0
      00027A 00 00r01r26           2944 	.dw	0,(_ADC1_PrescalerConfig)
      00027E 00 00r01r4A           2945 	.dw	0,(XG$ADC1_PrescalerConfig$0$0+7)
      000282 01                    2946 	.db	1
      000283 00 00r01r18           2947 	.dw	0,(Ldebug_loc_start+280)
      000287 04                    2948 	.uleb128	4
      000288 02                    2949 	.db	2
      000289 91                    2950 	.db	145
      00028A 04                    2951 	.sleb128	4
      00028B 41 44 43 31 5F 50 72  2952 	.ascii "ADC1_Prescaler"
             65 73 63 61 6C 65 72
      000299 00                    2953 	.db	0
      00029A 00 00 01 5C           2954 	.dw	0,348
      00029E 00                    2955 	.uleb128	0
      00029F 03                    2956 	.uleb128	3
      0002A0 00 00 03 14           2957 	.dw	0,788
      0002A4 41 44 43 31 5F 53 63  2958 	.ascii "ADC1_SchmittTriggerConfig"
             68 6D 69 74 74 54 72
             69 67 67 65 72 43 6F
             6E 66 69 67
      0002BD 00                    2959 	.db	0
      0002BE 00 00r01r4A           2960 	.dw	0,(_ADC1_SchmittTriggerConfig)
      0002C2 00 00r02r15           2961 	.dw	0,(XG$ADC1_SchmittTriggerConfig$0$0+7)
      0002C6 01                    2962 	.db	1
      0002C7 00 00r01r04           2963 	.dw	0,(Ldebug_loc_start+260)
      0002CB 04                    2964 	.uleb128	4
      0002CC 02                    2965 	.db	2
      0002CD 91                    2966 	.db	145
      0002CE 04                    2967 	.sleb128	4
      0002CF 41 44 43 31 5F 53 63  2968 	.ascii "ADC1_SchmittTriggerChannel"
             68 6D 69 74 74 54 72
             69 67 67 65 72 43 68
             61 6E 6E 65 6C
      0002E9 00                    2969 	.db	0
      0002EA 00 00 01 5C           2970 	.dw	0,348
      0002EE 04                    2971 	.uleb128	4
      0002EF 02                    2972 	.db	2
      0002F0 91                    2973 	.db	145
      0002F1 05                    2974 	.sleb128	5
      0002F2 4E 65 77 53 74 61 74  2975 	.ascii "NewState"
             65
      0002FA 00                    2976 	.db	0
      0002FB 00 00 01 5C           2977 	.dw	0,348
      0002FF 07                    2978 	.uleb128	7
      000300 00 00 03 07           2979 	.dw	0,775
      000304 06                    2980 	.uleb128	6
      000305 06                    2981 	.uleb128	6
      000306 00                    2982 	.uleb128	0
      000307 07                    2983 	.uleb128	7
      000308 00 00 03 0F           2984 	.dw	0,783
      00030C 06                    2985 	.uleb128	6
      00030D 06                    2986 	.uleb128	6
      00030E 00                    2987 	.uleb128	0
      00030F 08                    2988 	.uleb128	8
      000310 06                    2989 	.uleb128	6
      000311 06                    2990 	.uleb128	6
      000312 00                    2991 	.uleb128	0
      000313 00                    2992 	.uleb128	0
      000314 03                    2993 	.uleb128	3
      000315 00 00 03 83           2994 	.dw	0,899
      000319 41 44 43 31 5F 43 6F  2995 	.ascii "ADC1_ConversionConfig"
             6E 76 65 72 73 69 6F
             6E 43 6F 6E 66 69 67
      00032E 00                    2996 	.db	0
      00032F 00 00r02r15           2997 	.dw	0,(_ADC1_ConversionConfig)
      000333 00 00r02r60           2998 	.dw	0,(XG$ADC1_ConversionConfig$0$0+7)
      000337 01                    2999 	.db	1
      000338 00 00r00rF0           3000 	.dw	0,(Ldebug_loc_start+240)
      00033C 04                    3001 	.uleb128	4
      00033D 02                    3002 	.db	2
      00033E 91                    3003 	.db	145
      00033F 04                    3004 	.sleb128	4
      000340 41 44 43 31 5F 43 6F  3005 	.ascii "ADC1_ConversionMode"
             6E 76 65 72 73 69 6F
             6E 4D 6F 64 65
      000353 00                    3006 	.db	0
      000354 00 00 01 5C           3007 	.dw	0,348
      000358 04                    3008 	.uleb128	4
      000359 02                    3009 	.db	2
      00035A 91                    3010 	.db	145
      00035B 05                    3011 	.sleb128	5
      00035C 41 44 43 31 5F 43 68  3012 	.ascii "ADC1_Channel"
             61 6E 6E 65 6C
      000368 00                    3013 	.db	0
      000369 00 00 01 5C           3014 	.dw	0,348
      00036D 04                    3015 	.uleb128	4
      00036E 02                    3016 	.db	2
      00036F 91                    3017 	.db	145
      000370 06                    3018 	.sleb128	6
      000371 41 44 43 31 5F 41 6C  3019 	.ascii "ADC1_Align"
             69 67 6E
      00037B 00                    3020 	.db	0
      00037C 00 00 01 5C           3021 	.dw	0,348
      000380 06                    3022 	.uleb128	6
      000381 06                    3023 	.uleb128	6
      000382 00                    3024 	.uleb128	0
      000383 03                    3025 	.uleb128	3
      000384 00 00 03 DC           3026 	.dw	0,988
      000388 41 44 43 31 5F 45 78  3027 	.ascii "ADC1_ExternalTriggerConfig"
             74 65 72 6E 61 6C 54
             72 69 67 67 65 72 43
             6F 6E 66 69 67
      0003A2 00                    3028 	.db	0
      0003A3 00 00r02r60           3029 	.dw	0,(_ADC1_ExternalTriggerConfig)
      0003A7 00 00r02r98           3030 	.dw	0,(XG$ADC1_ExternalTriggerConfig$0$0+7)
      0003AB 01                    3031 	.db	1
      0003AC 00 00r00rDC           3032 	.dw	0,(Ldebug_loc_start+220)
      0003B0 04                    3033 	.uleb128	4
      0003B1 02                    3034 	.db	2
      0003B2 91                    3035 	.db	145
      0003B3 04                    3036 	.sleb128	4
      0003B4 41 44 43 31 5F 45 78  3037 	.ascii "ADC1_ExtTrigger"
             74 54 72 69 67 67 65
             72
      0003C3 00                    3038 	.db	0
      0003C4 00 00 01 5C           3039 	.dw	0,348
      0003C8 04                    3040 	.uleb128	4
      0003C9 02                    3041 	.db	2
      0003CA 91                    3042 	.db	145
      0003CB 05                    3043 	.sleb128	5
      0003CC 4E 65 77 53 74 61 74  3044 	.ascii "NewState"
             65
      0003D4 00                    3045 	.db	0
      0003D5 00 00 01 5C           3046 	.dw	0,348
      0003D9 06                    3047 	.uleb128	6
      0003DA 06                    3048 	.uleb128	6
      0003DB 00                    3049 	.uleb128	0
      0003DC 02                    3050 	.uleb128	2
      0003DD 41 44 43 31 5F 53 74  3051 	.ascii "ADC1_StartConversion"
             61 72 74 43 6F 6E 76
             65 72 73 69 6F 6E
      0003F1 00                    3052 	.db	0
      0003F2 00 00r02r98           3053 	.dw	0,(_ADC1_StartConversion)
      0003F6 00 00r02rAF           3054 	.dw	0,(XG$ADC1_StartConversion$0$0+7)
      0003FA 01                    3055 	.db	1
      0003FB 00 00r00rC8           3056 	.dw	0,(Ldebug_loc_start+200)
      0003FF 09                    3057 	.uleb128	9
      000400 00 00 04 4C           3058 	.dw	0,1100
      000404 41 44 43 31 5F 47 65  3059 	.ascii "ADC1_GetConversionValue"
             74 43 6F 6E 76 65 72
             73 69 6F 6E 56 61 6C
             75 65
      00041B 00                    3060 	.db	0
      00041C 00 00r02rAF           3061 	.dw	0,(_ADC1_GetConversionValue)
      000420 00 00r03r18           3062 	.dw	0,(XG$ADC1_GetConversionValue$0$0+7)
      000424 01                    3063 	.db	1
      000425 00 00r00rB4           3064 	.dw	0,(Ldebug_loc_start+180)
      000429 00 00 02 50           3065 	.dw	0,592
      00042D 06                    3066 	.uleb128	6
      00042E 06                    3067 	.uleb128	6
      00042F 0A                    3068 	.uleb128	10
      000430 02                    3069 	.db	2
      000431 91                    3070 	.db	145
      000432 78                    3071 	.sleb128	-8
      000433 74 65 6D 70 68        3072 	.ascii "temph"
      000438 00                    3073 	.db	0
      000439 00 00 02 50           3074 	.dw	0,592
      00043D 0A                    3075 	.uleb128	10
      00043E 02                    3076 	.db	2
      00043F 91                    3077 	.db	145
      000440 77                    3078 	.sleb128	-9
      000441 74 65 6D 70 6C        3079 	.ascii "templ"
      000446 00                    3080 	.db	0
      000447 00 00 01 5C           3081 	.dw	0,348
      00044B 00                    3082 	.uleb128	0
      00044C 03                    3083 	.uleb128	3
      00044D 00 00 04 A2           3084 	.dw	0,1186
      000451 41 44 43 31 5F 41 57  3085 	.ascii "ADC1_AWDChannelConfig"
             44 43 68 61 6E 6E 65
             6C 43 6F 6E 66 69 67
      000466 00                    3086 	.db	0
      000467 00 00r03r18           3087 	.dw	0,(_ADC1_AWDChannelConfig)
      00046B 00 00r03rB3           3088 	.dw	0,(XG$ADC1_AWDChannelConfig$0$0+7)
      00046F 01                    3089 	.db	1
      000470 00 00r00rA0           3090 	.dw	0,(Ldebug_loc_start+160)
      000474 04                    3091 	.uleb128	4
      000475 02                    3092 	.db	2
      000476 91                    3093 	.db	145
      000477 04                    3094 	.sleb128	4
      000478 43 68 61 6E 6E 65 6C  3095 	.ascii "Channel"
      00047F 00                    3096 	.db	0
      000480 00 00 01 5C           3097 	.dw	0,348
      000484 04                    3098 	.uleb128	4
      000485 02                    3099 	.db	2
      000486 91                    3100 	.db	145
      000487 05                    3101 	.sleb128	5
      000488 4E 65 77 53 74 61 74  3102 	.ascii "NewState"
             65
      000490 00                    3103 	.db	0
      000491 00 00 01 5C           3104 	.dw	0,348
      000495 07                    3105 	.uleb128	7
      000496 00 00 04 9D           3106 	.dw	0,1181
      00049A 06                    3107 	.uleb128	6
      00049B 06                    3108 	.uleb128	6
      00049C 00                    3109 	.uleb128	0
      00049D 08                    3110 	.uleb128	8
      00049E 06                    3111 	.uleb128	6
      00049F 06                    3112 	.uleb128	6
      0004A0 00                    3113 	.uleb128	0
      0004A1 00                    3114 	.uleb128	0
      0004A2 03                    3115 	.uleb128	3
      0004A3 00 00 04 DD           3116 	.dw	0,1245
      0004A7 41 44 43 31 5F 53 65  3117 	.ascii "ADC1_SetHighThreshold"
             74 48 69 67 68 54 68
             72 65 73 68 6F 6C 64
      0004BC 00                    3118 	.db	0
      0004BD 00 00r03rB3           3119 	.dw	0,(_ADC1_SetHighThreshold)
      0004C1 00 00r03rD5           3120 	.dw	0,(XG$ADC1_SetHighThreshold$0$0+7)
      0004C5 01                    3121 	.db	1
      0004C6 00 00r00r8C           3122 	.dw	0,(Ldebug_loc_start+140)
      0004CA 04                    3123 	.uleb128	4
      0004CB 02                    3124 	.db	2
      0004CC 91                    3125 	.db	145
      0004CD 04                    3126 	.sleb128	4
      0004CE 54 68 72 65 73 68 6F  3127 	.ascii "Threshold"
             6C 64
      0004D7 00                    3128 	.db	0
      0004D8 00 00 02 50           3129 	.dw	0,592
      0004DC 00                    3130 	.uleb128	0
      0004DD 03                    3131 	.uleb128	3
      0004DE 00 00 05 17           3132 	.dw	0,1303
      0004E2 41 44 43 31 5F 53 65  3133 	.ascii "ADC1_SetLowThreshold"
             74 4C 6F 77 54 68 72
             65 73 68 6F 6C 64
      0004F6 00                    3134 	.db	0
      0004F7 00 00r03rD5           3135 	.dw	0,(_ADC1_SetLowThreshold)
      0004FB 00 00r03rF7           3136 	.dw	0,(XG$ADC1_SetLowThreshold$0$0+7)
      0004FF 01                    3137 	.db	1
      000500 00 00r00r78           3138 	.dw	0,(Ldebug_loc_start+120)
      000504 04                    3139 	.uleb128	4
      000505 02                    3140 	.db	2
      000506 91                    3141 	.db	145
      000507 04                    3142 	.sleb128	4
      000508 54 68 72 65 73 68 6F  3143 	.ascii "Threshold"
             6C 64
      000511 00                    3144 	.db	0
      000512 00 00 02 50           3145 	.dw	0,592
      000516 00                    3146 	.uleb128	0
      000517 09                    3147 	.uleb128	9
      000518 00 00 05 6F           3148 	.dw	0,1391
      00051C 41 44 43 31 5F 47 65  3149 	.ascii "ADC1_GetBufferValue"
             74 42 75 66 66 65 72
             56 61 6C 75 65
      00052F 00                    3150 	.db	0
      000530 00 00r03rF7           3151 	.dw	0,(_ADC1_GetBufferValue)
      000534 00 00r04r76           3152 	.dw	0,(XG$ADC1_GetBufferValue$0$0+7)
      000538 01                    3153 	.db	1
      000539 00 00r00r64           3154 	.dw	0,(Ldebug_loc_start+100)
      00053D 00 00 02 50           3155 	.dw	0,592
      000541 04                    3156 	.uleb128	4
      000542 02                    3157 	.db	2
      000543 91                    3158 	.db	145
      000544 04                    3159 	.sleb128	4
      000545 42 75 66 66 65 72     3160 	.ascii "Buffer"
      00054B 00                    3161 	.db	0
      00054C 00 00 01 5C           3162 	.dw	0,348
      000550 06                    3163 	.uleb128	6
      000551 06                    3164 	.uleb128	6
      000552 0A                    3165 	.uleb128	10
      000553 02                    3166 	.db	2
      000554 91                    3167 	.db	145
      000555 74                    3168 	.sleb128	-12
      000556 74 65 6D 70 68        3169 	.ascii "temph"
      00055B 00                    3170 	.db	0
      00055C 00 00 02 50           3171 	.dw	0,592
      000560 0A                    3172 	.uleb128	10
      000561 02                    3173 	.db	2
      000562 91                    3174 	.db	145
      000563 73                    3175 	.sleb128	-13
      000564 74 65 6D 70 6C        3176 	.ascii "templ"
      000569 00                    3177 	.db	0
      00056A 00 00 01 5C           3178 	.dw	0,348
      00056E 00                    3179 	.uleb128	0
      00056F 09                    3180 	.uleb128	9
      000570 00 00 05 BF           3181 	.dw	0,1471
      000574 41 44 43 31 5F 47 65  3182 	.ascii "ADC1_GetAWDChannelStatus"
             74 41 57 44 43 68 61
             6E 6E 65 6C 53 74 61
             74 75 73
      00058C 00                    3183 	.db	0
      00058D 00 00r04r76           3184 	.dw	0,(_ADC1_GetAWDChannelStatus)
      000591 00 00r04rC4           3185 	.dw	0,(XG$ADC1_GetAWDChannelStatus$0$0+7)
      000595 01                    3186 	.db	1
      000596 00 00r00r50           3187 	.dw	0,(Ldebug_loc_start+80)
      00059A 00 00 01 5C           3188 	.dw	0,348
      00059E 04                    3189 	.uleb128	4
      00059F 02                    3190 	.db	2
      0005A0 91                    3191 	.db	145
      0005A1 04                    3192 	.sleb128	4
      0005A2 43 68 61 6E 6E 65 6C  3193 	.ascii "Channel"
      0005A9 00                    3194 	.db	0
      0005AA 00 00 01 5C           3195 	.dw	0,348
      0005AE 06                    3196 	.uleb128	6
      0005AF 06                    3197 	.uleb128	6
      0005B0 0A                    3198 	.uleb128	10
      0005B1 01                    3199 	.db	1
      0005B2 51                    3200 	.db	81
      0005B3 73 74 61 74 75 73     3201 	.ascii "status"
      0005B9 00                    3202 	.db	0
      0005BA 00 00 01 5C           3203 	.dw	0,348
      0005BE 00                    3204 	.uleb128	0
      0005BF 09                    3205 	.uleb128	9
      0005C0 00 00 06 1E           3206 	.dw	0,1566
      0005C4 41 44 43 31 5F 47 65  3207 	.ascii "ADC1_GetFlagStatus"
             74 46 6C 61 67 53 74
             61 74 75 73
      0005D6 00                    3208 	.db	0
      0005D7 00 00r04rC4           3209 	.dw	0,(_ADC1_GetFlagStatus)
      0005DB 00 00r05r37           3210 	.dw	0,(XG$ADC1_GetFlagStatus$0$0+7)
      0005DF 01                    3211 	.db	1
      0005E0 00 00r00r3C           3212 	.dw	0,(Ldebug_loc_start+60)
      0005E4 00 00 01 5C           3213 	.dw	0,348
      0005E8 04                    3214 	.uleb128	4
      0005E9 02                    3215 	.db	2
      0005EA 91                    3216 	.db	145
      0005EB 04                    3217 	.sleb128	4
      0005EC 46 6C 61 67           3218 	.ascii "Flag"
      0005F0 00                    3219 	.db	0
      0005F1 00 00 01 5C           3220 	.dw	0,348
      0005F5 06                    3221 	.uleb128	6
      0005F6 07                    3222 	.uleb128	7
      0005F7 00 00 05 FE           3223 	.dw	0,1534
      0005FB 06                    3224 	.uleb128	6
      0005FC 06                    3225 	.uleb128	6
      0005FD 00                    3226 	.uleb128	0
      0005FE 06                    3227 	.uleb128	6
      0005FF 0A                    3228 	.uleb128	10
      000600 01                    3229 	.db	1
      000601 51                    3230 	.db	81
      000602 66 6C 61 67 73 74 61  3231 	.ascii "flagstatus"
             74 75 73
      00060C 00                    3232 	.db	0
      00060D 00 00 01 5C           3233 	.dw	0,348
      000611 0A                    3234 	.uleb128	10
      000612 01                    3235 	.db	1
      000613 51                    3236 	.db	81
      000614 74 65 6D 70           3237 	.ascii "temp"
      000618 00                    3238 	.db	0
      000619 00 00 01 5C           3239 	.dw	0,348
      00061D 00                    3240 	.uleb128	0
      00061E 03                    3241 	.uleb128	3
      00061F 00 00 06 61           3242 	.dw	0,1633
      000623 41 44 43 31 5F 43 6C  3243 	.ascii "ADC1_ClearFlag"
             65 61 72 46 6C 61 67
      000631 00                    3244 	.db	0
      000632 00 00r05r37           3245 	.dw	0,(_ADC1_ClearFlag)
      000636 00 00r05rBC           3246 	.dw	0,(XG$ADC1_ClearFlag$0$0+7)
      00063A 01                    3247 	.db	1
      00063B 00 00r00r28           3248 	.dw	0,(Ldebug_loc_start+40)
      00063F 04                    3249 	.uleb128	4
      000640 02                    3250 	.db	2
      000641 91                    3251 	.db	145
      000642 04                    3252 	.sleb128	4
      000643 46 6C 61 67           3253 	.ascii "Flag"
      000647 00                    3254 	.db	0
      000648 00 00 01 5C           3255 	.dw	0,348
      00064C 06                    3256 	.uleb128	6
      00064D 07                    3257 	.uleb128	7
      00064E 00 00 06 55           3258 	.dw	0,1621
      000652 06                    3259 	.uleb128	6
      000653 06                    3260 	.uleb128	6
      000654 00                    3261 	.uleb128	0
      000655 06                    3262 	.uleb128	6
      000656 0B                    3263 	.uleb128	11
      000657 74 65 6D 70           3264 	.ascii "temp"
      00065B 00                    3265 	.db	0
      00065C 00 00 01 5C           3266 	.dw	0,348
      000660 00                    3267 	.uleb128	0
      000661 09                    3268 	.uleb128	9
      000662 00 00 06 C1           3269 	.dw	0,1729
      000666 41 44 43 31 5F 47 65  3270 	.ascii "ADC1_GetITStatus"
             74 49 54 53 74 61 74
             75 73
      000676 00                    3271 	.db	0
      000677 00 00r05rBC           3272 	.dw	0,(_ADC1_GetITStatus)
      00067B 00 00r06r29           3273 	.dw	0,(XG$ADC1_GetITStatus$0$0+7)
      00067F 01                    3274 	.db	1
      000680 00 00r00r14           3275 	.dw	0,(Ldebug_loc_start+20)
      000684 00 00 01 5C           3276 	.dw	0,348
      000688 04                    3277 	.uleb128	4
      000689 02                    3278 	.db	2
      00068A 91                    3279 	.db	145
      00068B 04                    3280 	.sleb128	4
      00068C 49 54 50 65 6E 64 69  3281 	.ascii "ITPendingBit"
             6E 67 42 69 74
      000698 00                    3282 	.db	0
      000699 00 00 02 50           3283 	.dw	0,592
      00069D 07                    3284 	.uleb128	7
      00069E 00 00 06 A5           3285 	.dw	0,1701
      0006A2 06                    3286 	.uleb128	6
      0006A3 06                    3287 	.uleb128	6
      0006A4 00                    3288 	.uleb128	0
      0006A5 06                    3289 	.uleb128	6
      0006A6 0A                    3290 	.uleb128	10
      0006A7 01                    3291 	.db	1
      0006A8 51                    3292 	.db	81
      0006A9 69 74 73 74 61 74 75  3293 	.ascii "itstatus"
             73
      0006B1 00                    3294 	.db	0
      0006B2 00 00 01 5C           3295 	.dw	0,348
      0006B6 0B                    3296 	.uleb128	11
      0006B7 74 65 6D 70           3297 	.ascii "temp"
      0006BB 00                    3298 	.db	0
      0006BC 00 00 01 5C           3299 	.dw	0,348
      0006C0 00                    3300 	.uleb128	0
      0006C1 0C                    3301 	.uleb128	12
      0006C2 41 44 43 31 5F 43 6C  3302 	.ascii "ADC1_ClearITPendingBit"
             65 61 72 49 54 50 65
             6E 64 69 6E 67 42 69
             74
      0006D8 00                    3303 	.db	0
      0006D9 00 00r06r29           3304 	.dw	0,(_ADC1_ClearITPendingBit)
      0006DD 00 00r06rA5           3305 	.dw	0,(XG$ADC1_ClearITPendingBit$0$0+7)
      0006E1 01                    3306 	.db	1
      0006E2 00 00r00r00           3307 	.dw	0,(Ldebug_loc_start)
      0006E6 04                    3308 	.uleb128	4
      0006E7 02                    3309 	.db	2
      0006E8 91                    3310 	.db	145
      0006E9 04                    3311 	.sleb128	4
      0006EA 49 54 50 65 6E 64 69  3312 	.ascii "ITPendingBit"
             6E 67 42 69 74
      0006F6 00                    3313 	.db	0
      0006F7 00 00 02 50           3314 	.dw	0,592
      0006FB 07                    3315 	.uleb128	7
      0006FC 00 00 07 03           3316 	.dw	0,1795
      000700 06                    3317 	.uleb128	6
      000701 06                    3318 	.uleb128	6
      000702 00                    3319 	.uleb128	0
      000703 06                    3320 	.uleb128	6
      000704 0B                    3321 	.uleb128	11
      000705 74 65 6D 70           3322 	.ascii "temp"
      000709 00                    3323 	.db	0
      00070A 00 00 01 5C           3324 	.dw	0,348
      00070E 00                    3325 	.uleb128	0
      00070F 00                    3326 	.uleb128	0
      000710 00                    3327 	.uleb128	0
      000711 00                    3328 	.uleb128	0
      000712                       3329 Ldebug_info_end:
                                   3330 
                                   3331 	.area .debug_pubnames (NOLOAD)
      000000 00 00 01 F8           3332 	.dw	0,Ldebug_pubnames_end-Ldebug_pubnames_start
      000004                       3333 Ldebug_pubnames_start:
      000004 00 02                 3334 	.dw	2
      000006 00 00r00r00           3335 	.dw	0,(Ldebug_info_start-4)
      00000A 00 00 07 12           3336 	.dw	0,4+Ldebug_info_end-Ldebug_info_start
      00000E 00 00 00 48           3337 	.dw	0,72
      000012 41 44 43 31 5F 44 65  3338 	.ascii "ADC1_DeInit"
             49 6E 69 74
      00001D 00                    3339 	.db	0
      00001E 00 00 00 62           3340 	.dw	0,98
      000022 41 44 43 31 5F 49 6E  3341 	.ascii "ADC1_Init"
             69 74
      00002B 00                    3342 	.db	0
      00002C 00 00 01 6D           3343 	.dw	0,365
      000030 41 44 43 31 5F 43 6D  3344 	.ascii "ADC1_Cmd"
             64
      000038 00                    3345 	.db	0
      000039 00 00 01 9C           3346 	.dw	0,412
      00003D 41 44 43 31 5F 53 63  3347 	.ascii "ADC1_ScanModeCmd"
             61 6E 4D 6F 64 65 43
             6D 64
      00004D 00                    3348 	.db	0
      00004E 00 00 01 D3           3349 	.dw	0,467
      000052 41 44 43 31 5F 44 61  3350 	.ascii "ADC1_DataBufferCmd"
             74 61 42 75 66 66 65
             72 43 6D 64
      000064 00                    3351 	.db	0
      000065 00 00 02 0C           3352 	.dw	0,524
      000069 41 44 43 31 5F 49 54  3353 	.ascii "ADC1_ITConfig"
             43 6F 6E 66 69 67
      000076 00                    3354 	.db	0
      000077 00 00 02 60           3355 	.dw	0,608
      00007B 41 44 43 31 5F 50 72  3356 	.ascii "ADC1_PrescalerConfig"
             65 73 63 61 6C 65 72
             43 6F 6E 66 69 67
      00008F 00                    3357 	.db	0
      000090 00 00 02 9F           3358 	.dw	0,671
      000094 41 44 43 31 5F 53 63  3359 	.ascii "ADC1_SchmittTriggerConfig"
             68 6D 69 74 74 54 72
             69 67 67 65 72 43 6F
             6E 66 69 67
      0000AD 00                    3360 	.db	0
      0000AE 00 00 03 14           3361 	.dw	0,788
      0000B2 41 44 43 31 5F 43 6F  3362 	.ascii "ADC1_ConversionConfig"
             6E 76 65 72 73 69 6F
             6E 43 6F 6E 66 69 67
      0000C7 00                    3363 	.db	0
      0000C8 00 00 03 83           3364 	.dw	0,899
      0000CC 41 44 43 31 5F 45 78  3365 	.ascii "ADC1_ExternalTriggerConfig"
             74 65 72 6E 61 6C 54
             72 69 67 67 65 72 43
             6F 6E 66 69 67
      0000E6 00                    3366 	.db	0
      0000E7 00 00 03 DC           3367 	.dw	0,988
      0000EB 41 44 43 31 5F 53 74  3368 	.ascii "ADC1_StartConversion"
             61 72 74 43 6F 6E 76
             65 72 73 69 6F 6E
      0000FF 00                    3369 	.db	0
      000100 00 00 03 FF           3370 	.dw	0,1023
      000104 41 44 43 31 5F 47 65  3371 	.ascii "ADC1_GetConversionValue"
             74 43 6F 6E 76 65 72
             73 69 6F 6E 56 61 6C
             75 65
      00011B 00                    3372 	.db	0
      00011C 00 00 04 4C           3373 	.dw	0,1100
      000120 41 44 43 31 5F 41 57  3374 	.ascii "ADC1_AWDChannelConfig"
             44 43 68 61 6E 6E 65
             6C 43 6F 6E 66 69 67
      000135 00                    3375 	.db	0
      000136 00 00 04 A2           3376 	.dw	0,1186
      00013A 41 44 43 31 5F 53 65  3377 	.ascii "ADC1_SetHighThreshold"
             74 48 69 67 68 54 68
             72 65 73 68 6F 6C 64
      00014F 00                    3378 	.db	0
      000150 00 00 04 DD           3379 	.dw	0,1245
      000154 41 44 43 31 5F 53 65  3380 	.ascii "ADC1_SetLowThreshold"
             74 4C 6F 77 54 68 72
             65 73 68 6F 6C 64
      000168 00                    3381 	.db	0
      000169 00 00 05 17           3382 	.dw	0,1303
      00016D 41 44 43 31 5F 47 65  3383 	.ascii "ADC1_GetBufferValue"
             74 42 75 66 66 65 72
             56 61 6C 75 65
      000180 00                    3384 	.db	0
      000181 00 00 05 6F           3385 	.dw	0,1391
      000185 41 44 43 31 5F 47 65  3386 	.ascii "ADC1_GetAWDChannelStatus"
             74 41 57 44 43 68 61
             6E 6E 65 6C 53 74 61
             74 75 73
      00019D 00                    3387 	.db	0
      00019E 00 00 05 BF           3388 	.dw	0,1471
      0001A2 41 44 43 31 5F 47 65  3389 	.ascii "ADC1_GetFlagStatus"
             74 46 6C 61 67 53 74
             61 74 75 73
      0001B4 00                    3390 	.db	0
      0001B5 00 00 06 1E           3391 	.dw	0,1566
      0001B9 41 44 43 31 5F 43 6C  3392 	.ascii "ADC1_ClearFlag"
             65 61 72 46 6C 61 67
      0001C7 00                    3393 	.db	0
      0001C8 00 00 06 61           3394 	.dw	0,1633
      0001CC 41 44 43 31 5F 47 65  3395 	.ascii "ADC1_GetITStatus"
             74 49 54 53 74 61 74
             75 73
      0001DC 00                    3396 	.db	0
      0001DD 00 00 06 C1           3397 	.dw	0,1729
      0001E1 41 44 43 31 5F 43 6C  3398 	.ascii "ADC1_ClearITPendingBit"
             65 61 72 49 54 50 65
             6E 64 69 6E 67 42 69
             74
      0001F7 00                    3399 	.db	0
      0001F8 00 00 00 00           3400 	.dw	0,0
      0001FC                       3401 Ldebug_pubnames_end:
                                   3402 
                                   3403 	.area .debug_frame (NOLOAD)
      000000 00 00                 3404 	.dw	0
      000002 00 0E                 3405 	.dw	Ldebug_CIE_end-Ldebug_CIE_start
      000004                       3406 Ldebug_CIE_start:
      000004 FF FF                 3407 	.dw	0xffff
      000006 FF FF                 3408 	.dw	0xffff
      000008 01                    3409 	.db	1
      000009 00                    3410 	.db	0
      00000A 01                    3411 	.uleb128	1
      00000B 01                    3412 	.sleb128	1
      00000C 00                    3413 	.db	0
      00000D 0C                    3414 	.db	12
      00000E 00                    3415 	.uleb128	0
      00000F 00                    3416 	.uleb128	0
      000010 80                    3417 	.db	128
      000011 00                    3418 	.uleb128	0
      000012                       3419 Ldebug_CIE_end:
