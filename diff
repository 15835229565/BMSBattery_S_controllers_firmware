diff --git a/.cproject b/.cproject
index 5a58ce4..0c1dd9b 100644
--- a/.cproject
+++ b/.cproject
@@ -63,4 +63,16 @@
 		</configuration>
 	</storageModule>
 	<storageModule moduleId="org.eclipse.cdt.internal.ui.text.commentOwnerProjectMappings"/>
+	<storageModule moduleId="org.eclipse.cdt.make.core.buildtargets">
+		<buildTargets>
+			<target name="make" path="" targetID="org.eclipse.cdt.build.MakeTargetBuilder">
+				<buildCommand>make</buildCommand>
+				<buildArguments/>
+				<buildTarget>all</buildTarget>
+				<stopOnError>true</stopOnError>
+				<useDefaultCommand>false</useDefaultCommand>
+				<runAllBuilders>true</runAllBuilders>
+			</target>
+		</buildTargets>
+	</storageModule>
 </cproject>
diff --git a/Flash_Debug-STM8.launch b/Flash_Debug-STM8.launch
index 1f03188..6b9cd5c 100644
--- a/Flash_Debug-STM8.launch
+++ b/Flash_Debug-STM8.launch
@@ -16,7 +16,7 @@
 <stringAttribute key="org.eclipse.cdt.launch.DEBUGGER_STOP_AT_MAIN_SYMBOL" value="main"/>
 <booleanAttribute key="org.eclipse.cdt.launch.ENABLE_REGISTER_BOOKKEEPING" value="false"/>
 <booleanAttribute key="org.eclipse.cdt.launch.ENABLE_VARIABLE_BOOKKEEPING" value="false"/>
-<stringAttribute key="org.eclipse.cdt.launch.FORMAT" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&lt;contentList&gt;&lt;content id=&quot;temp1-apply_duty_cycle-(format)&quot; val=&quot;0&quot;/&gt;&lt;content id=&quot;temp1-apply_duty_cycle-(cast)&quot; val=&quot;int&quot;/&gt;&lt;/contentList&gt;"/>
+<stringAttribute key="org.eclipse.cdt.launch.FORMAT" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&lt;contentList&gt;&lt;content id=&quot;ui8_temp-TIM1_UPD_OVF_TRG_BRK_IRQHandler-(format)&quot; val=&quot;1&quot;/&gt;&lt;content id=&quot;ui8_temp-adc_read_throttle-(format)&quot; val=&quot;1&quot;/&gt;&lt;content id=&quot;temp1-apply_duty_cycle-(cast)&quot; val=&quot;int&quot;/&gt;&lt;content id=&quot;temp1-apply_duty_cycle-(format)&quot; val=&quot;0&quot;/&gt;&lt;content id=&quot;ui8_temp-ADC1_IRQHandler-(format)&quot; val=&quot;1&quot;/&gt;&lt;/contentList&gt;"/>
 <stringAttribute key="org.eclipse.cdt.launch.GLOBAL_VARIABLES" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;globalVariableList/&gt;&#10;"/>
 <stringAttribute key="org.eclipse.cdt.launch.MEMORY_BLOCKS" value="&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; standalone=&quot;no&quot;?&gt;&#10;&lt;memoryBlockExpressionList&gt;&#10;&lt;memoryBlockExpressionItem&gt;&#10;&lt;expression text=&quot;0x40000000&quot;/&gt;&#10;&lt;/memoryBlockExpressionItem&gt;&#10;&lt;memoryBlockExpressionItem&gt;&#10;&lt;expression text=&quot;0x40000424&quot;/&gt;&#10;&lt;/memoryBlockExpressionItem&gt;&#10;&lt;/memoryBlockExpressionList&gt;&#10;"/>
 <stringAttribute key="org.eclipse.cdt.launch.PROGRAM_NAME" value="/home/cas/OpenSource-EBike-firmware/BMSBattery_S_controllers_firmware/bin/main.elf"/>
diff --git a/Makefile b/Makefile
index ae8414c..ae30d7f 100644
--- a/Makefile
+++ b/Makefile
@@ -38,7 +38,9 @@ EXTRASRCS = \
 	$(SDIR)/stm8s_exti.c \
 	$(SDIR)/stm8s_uart2.c \
 	$(SDIR)/stm8s_tim1.c \
+	$(SDIR)/stm8s_tim2.c \
 	$(SDIR)/stm8s_adc1.c \
+	$(SDIR)/stm8s_itc.c \
 	gpio.c \
 	motor.c \
 
diff --git a/StdPeriphLib/src/stm8s_tim1.c b/StdPeriphLib/src/stm8s_tim1.c
index 86826e0..87cd8fe 100644
--- a/StdPeriphLib/src/stm8s_tim1.c
+++ b/StdPeriphLib/src/stm8s_tim1.c
@@ -841,7 +841,7 @@ void TIM1_UpdateRequestConfig(TIM1_UpdateSource_TypeDef TIM1_UpdateSource)
 }
 
 /**
-  * @brief  Enables or Disables the TIM1’s Hall sensor interface.
+  * @brief  Enables or Disables the TIM1ï¿½s Hall sensor interface.
   * @param   NewState new state of the TIM1 Hall sensor interface.This parameter can
   * be ENABLE or DISABLE.
   * @retval None
@@ -863,7 +863,7 @@ void TIM1_SelectHallSensor(FunctionalState NewState)
 }
 
 /**
-  * @brief  Selects the TIM1’s One Pulse Mode.
+  * @brief  Selects the TIM1ï¿½s One Pulse Mode.
   * @param   TIM1_OPMode specifies the OPM Mode to be used.
   * This parameter can be one of the following values
   *                    - TIM1_OPMODE_SINGLE
@@ -2067,7 +2067,7 @@ FlagStatus TIM1_GetFlagStatus(TIM1_FLAG_TypeDef TIM1_FLAG)
 }
 
 /**
-  * @brief  Clears the TIM1’s pending flags.
+  * @brief  Clears the TIM1ï¿½s pending flags.
   * @param  TIM1_FLAG specifies the flag to clear.
   *         This parameter can be one of the following values:
   *                       - TIM1_FLAG_UPDATE: TIM1 update Flag
@@ -2089,7 +2089,7 @@ void TIM1_ClearFlag(TIM1_FLAG_TypeDef TIM1_FLAG)
   /* Check the parameters */
   assert_param(IS_TIM1_CLEAR_FLAG_OK(TIM1_FLAG));
   
-  /* Clear the flags (rc_w0) clear this bit by writing 0. Writing ‘1’ has no effect*/
+  /* Clear the flags (rc_w0) clear this bit by writing 0. Writing ï¿½1ï¿½ has no effect*/
   TIM1->SR1 = (uint8_t)(~(uint8_t)(TIM1_FLAG));
   TIM1->SR2 = (uint8_t)((uint8_t)(~((uint8_t)((uint16_t)TIM1_FLAG >> 8))) & 
                         (uint8_t)0x1E);
diff --git a/gpio.c b/gpio.c
index 4e3d47f..a498d5e 100644
--- a/gpio.c
+++ b/gpio.c
@@ -19,9 +19,13 @@ void gpio_init (void)
 void brake_init (void)
 {
   //hall sensors pins as external input pin interrupt
+//  GPIO_Init(BRAKE__PORT,
+//	    BRAKE__PIN,
+//	    GPIO_MODE_IN_FL_IT); // with external interrupt
+
   GPIO_Init(BRAKE__PORT,
 	    BRAKE__PIN,
-	    GPIO_MODE_IN_FL_IT);
+	    GPIO_MODE_IN_FL_NO_IT); // no interrupt
 
   //initialize the Interrupt sensitivity
   EXTI_SetExtIntSensitivity(EXTI_PORT_GPIOA,
@@ -38,12 +42,12 @@ BitStatus brake_is_set (void)
 
 void brake_coast_enable (void)
 {
-  TIM1->BKR &= ~((uint8_t) (TIM1_BREAK_ENABLE));
+  TIM1->BKR &= (uint8_t) ~(TIM1_BKR_MOE);
 }
 
 void brake_coast_disable (void)
 {
-  TIM1->BKR |= (uint8_t) (TIM1_BREAK_ENABLE);
+  TIM1->BKR |= (uint8_t) (TIM1_BKR_MOE);
 }
 
 void debug_pin_init (void)
diff --git a/gpio.h b/gpio.h
index 3abf0a0..18d4897 100644
--- a/gpio.h
+++ b/gpio.h
@@ -53,7 +53,7 @@
 #define BATTERY_VOLTAGE__PIN      GPIO_PIN_4
 #define BATTERY_VOLTAGE__PORT     GPIOA
 
-#if (MOTOR_TYPE == Q85)
+#if ((MOTOR_TYPE == MOTOR_TYPE_Q85) || (MOTOR_TYPE == MOTOR_TYPE_EUC2))
   #define HALL_SENSOR_A__PIN      GPIO_PIN_0
   #define HALL_SENSOR_B__PIN      GPIO_PIN_1
   #define HALL_SENSOR_C__PIN      GPIO_PIN_2
diff --git a/interrupts.h b/interrupts.h
index c6dac49..3224f71 100644
--- a/interrupts.h
+++ b/interrupts.h
@@ -12,5 +12,7 @@
 #define EXTI_PORTA_IRQHANDLER 3
 #define EXTI_PORTE_IRQHANDLER 7
 #define TIM1_UPD_OVF_TRG_BRK_IRQHANDLER 11
+#define TIM2_UPD_OVF_TRG_BRK_IRQHANDLER 13
+#define ADC1_IRQHANDLER 22
 
 #endif
diff --git a/main.c b/main.c
index 9f4249a..2626a4b 100644
--- a/main.c
+++ b/main.c
@@ -10,21 +10,26 @@
 #include <stdio.h>
 #include "stm8s.h"
 #include "gpio.h"
+#include "stm8s_itc.h"
 #include "stm8s_gpio.h"
 #include "interrupts.h"
 #include "stm8s_adc1.h"
 #include "stm8s_tim1.h"
+#include "stm8s_tim2.h"
 #include "motor.h"
 
 uint32_t ui32_motor_speed_erps = 0; // motor speed in electronic rotations per second
 uint8_t ui8_flag_count_speed = 0;
 uint32_t ui32_PWM_cycles_counter = 0;
+uint32_t ui32_PWM_cycles_counter1 = 0;
+uint32_t ui32_speed_inverse = 0;
 uint8_t ui8_motor_rotor_position = 0; // in 360/256 degrees
 uint8_t ui8_motor_rotor_absolute_position = 0; // in 360/256 degrees
 uint8_t ui8_position_correction_value = 0; // in 360/256 degrees
 uint32_t ui32_interpolation_angle_step = 0; // x1000
 uint32_t ui32_interpolation_sum = 0; // x1000
 uint8_t ui8_interpolation_angle = 0;
+uint32_t ui32_last_counter_value = 0;
 
 static uint8_t ui8_value_a;
 static uint8_t ui8_value_b;
@@ -35,6 +40,14 @@ static uint16_t ui16_value_c;
 
 volatile uint8_t ui8_duty_cycle;
 
+uint8_t adc_current_phase_B = 0;
+uint8_t adc_total_current = 0;
+uint8_t ui8_adc_total_current_busy_flag = 0;
+uint8_t adc_throttle = 0;
+uint8_t adc_throttle_busy_flag = 0;
+
+uint16_t ui16_adc_value;
+
 /////////////////////////////////////////////////////////////////////////////////////////////
 //// Functions prototypes
 
@@ -56,6 +69,7 @@ void motor_fast_loop (void);
 void apply_duty_cycle (uint8_t ui8_duty_cycle_value);
 
 void pwm_init (void);
+void TIM1_UPD_OVF_TRG_BRK_IRQHandler(void) __interrupt(TIM1_UPD_OVF_TRG_BRK_IRQHANDLER);
 
 // map / limit values
 int32_t map (int32_t x, int32_t in_min, int32_t in_max, int32_t out_min, int32_t out_max);
@@ -64,9 +78,45 @@ void uart_init (void);
 void putchar(char c);
 char getchar(void);
 
+void adc_init (void);
+uint16_t adc_read_throttle (void);
+
 /////////////////////////////////////////////////////////////////////////////////////////////
 /////////////////////////////////////////////////////////////////////////////////////////////
 
+void TIM1_UPD_OVF_TRG_BRK_IRQHandler(void) __interrupt(TIM1_UPD_OVF_TRG_BRK_IRQHANDLER)
+{
+  uint8_t ui8_temp;
+
+  debug_pin_set ();
+  debug_pin_reset ();
+
+  if (adc_throttle_busy_flag == 0)
+  {
+    ADC1->CR1 |= ADC1_CR1_ADON;
+    while (!(ADC1->CSR & ADC1_FLAG_EOC)) ;
+    ui8_temp = ADC1->DRH;
+
+    if ((ui8_temp > ADC_MOTOR_TOTAL_CURRENT_MAX_POSITIVE) ||
+     (ui8_temp < ADC_MOTOR_TOTAL_CURRENT_MAX_NEGATIVE))
+    {
+      TIM1->BKR &= (uint8_t) ~(TIM1_BKR_MOE);
+      debug_pin_set ();
+    }
+  }
+
+/****************************************************************
+* Motor control: angle interpolation and PWM control
+*/
+  motor_fast_loop ();
+/****************************************************************/
+
+  // clear the interrupt pending bit for TIM1
+  TIM1_ClearITPendingBit(TIM1_IT_UPDATE);
+
+  debug_pin_set ();
+  debug_pin_reset ();
+}
 
 int32_t map (int32_t x, int32_t in_min, int32_t in_max, int32_t out_min, int32_t out_max)
 {
@@ -89,40 +139,56 @@ int32_t map (int32_t x, int32_t in_min, int32_t in_max, int32_t out_min, int32_t
 void adc_init (void)
 {
   //init GPIO for the used ADC pins
-  GPIO_Init(THROTTLE__PORT,
-	    THROTTLE__PIN,
+  GPIO_Init(GPIOB,
+	    (THROTTLE__PIN || CURRENT_PHASE_B__PIN || CURRENT_TOTAL__PIN),
 	    GPIO_MODE_IN_FL_NO_IT);
 
   //de-Init ADC peripheral
   ADC1_DeInit();
 
-  //init ADC2 peripheral
-  ADC1_Init(ADC1_CONVERSIONMODE_CONTINUOUS,
-	    ADC1_CHANNEL_4,
+  //init ADC1 peripheral
+  ADC1_Init(ADC1_CONVERSIONMODE_SINGLE,
+	    ADC1_CHANNEL_6,
 	    ADC1_PRESSEL_FCPU_D2,
             ADC1_EXTTRIG_TIM,
-	    DISABLE, //disable external trigger
-	    ADC1_ALIGN_RIGHT,
-	    ADC1_SCHMITTTRIG_CHANNEL9,
+	    DISABLE,
+	    ADC1_ALIGN_LEFT,
+	    (ADC1_SCHMITTTRIG_CHANNEL4 || ADC1_SCHMITTTRIG_CHANNEL5 || ADC1_SCHMITTTRIG_CHANNEL6),
             DISABLE);
 }
 
 uint16_t adc_read_throttle (void)
 {
-  ADC1_ConversionConfig(ADC1_CONVERSIONMODE_SINGLE,
-			ADC1_CHANNEL_4,
-			ADC1_ALIGN_RIGHT);
+  uint8_t ui8_temp;
+
+  adc_throttle_busy_flag = 1;
 
-  //start Conversion
-  ADC1_StartConversion();
+  ADC1_Init(ADC1_CONVERSIONMODE_SINGLE,
+	    ADC1_CHANNEL_4,
+	    ADC1_PRESSEL_FCPU_D2,
+            ADC1_EXTTRIG_TIM,
+	    DISABLE,
+	    ADC1_ALIGN_LEFT,
+	    (ADC1_SCHMITTTRIG_CHANNEL4 || ADC1_SCHMITTTRIG_CHANNEL5 || ADC1_SCHMITTTRIG_CHANNEL6),
+            DISABLE);
 
-  //block waiting for the end of conversion
-  while (!ADC1_GetFlagStatus(ADC1_FLAG_EOC)) ;
+  ADC1->CR1 |= ADC1_CR1_ADON;
+  while (!(ADC1->CSR & ADC1_FLAG_EOC)) ;
+  ui8_temp = ADC1->DRH;
 
-  return ADC1_GetConversionValue();
-}
+  ADC1_Init(ADC1_CONVERSIONMODE_SINGLE,
+	    ADC1_CHANNEL_6,
+	    ADC1_PRESSEL_FCPU_D2,
+            ADC1_EXTTRIG_TIM,
+	    DISABLE,
+	    ADC1_ALIGN_LEFT,
+	    (ADC1_SCHMITTTRIG_CHANNEL4 || ADC1_SCHMITTTRIG_CHANNEL5 || ADC1_SCHMITTTRIG_CHANNEL6),
+            DISABLE);
 
+  adc_throttle_busy_flag = 0;
 
+  return ui8_temp;
+}
 
 //With SDCC, interrupt service routine function prototypes must be placed in the file that contains main ()
 //in order for an vector for the interrupt to be placed in the the interrupt vector space.  It's acceptable
@@ -133,16 +199,6 @@ uint16_t adc_read_throttle (void)
 //Calling a function from interrupt not always works, SDCC manual says to avoid it. Maybe the best is to put
 //all the code inside the interrupt
 
-void TIM1_UPD_OVF_TRG_BRK_IRQHandler(void) __interrupt(TIM1_UPD_OVF_TRG_BRK_IRQHANDLER)
-{
-  debug_pin_set ();
-  motor_fast_loop ();
-  debug_pin_reset ();
-
-  // clear the interrupt pending bit for TIM1
-  TIM1_ClearITPendingBit(TIM1_IT_UPDATE);
-}
-
 void hall_sensors_read_and_action (void)
 {
   static int8_t hall_sensors;
@@ -165,36 +221,38 @@ void hall_sensors_read_and_action (void)
   switch (hall_sensors)
   {
     case 3:
-      ui8_motor_rotor_absolute_position = ANGLE_30;
+      ui8_motor_rotor_absolute_position = ANGLE_210;
     break;
 
     case 1:
-      ui8_motor_rotor_absolute_position = ANGLE_90;
+      ui8_motor_rotor_absolute_position = ANGLE_270;
     break;
 
     case 5:
-      ui8_motor_rotor_absolute_position = ANGLE_150;
+      ui8_motor_rotor_absolute_position = ANGLE_330;
 
       // count speed only when motor did rotate half of 1 electronic rotation
       if (ui8_flag_count_speed)
       {
+//	debug_pin_set ();
+
 	ui8_flag_count_speed = 0;
-	ui32_motor_speed_erps = PWM_CYCLES_COUNTER_MAX / ui32_PWM_cycles_counter;
-	ui32_interpolation_angle_step = SVM_TABLE_LEN_x1024 / ui32_PWM_cycles_counter;
+	ui32_interpolation_angle_step = ui32_PWM_cycles_counter << 2; // (ui32_PWM_cycles_counter / 256) * 1024
+	ui32_speed_inverse = ui32_PWM_cycles_counter;
 	ui32_PWM_cycles_counter = 0;
       }
     break;
 
     case 4:
-      ui8_motor_rotor_absolute_position = ANGLE_210;
+      ui8_motor_rotor_absolute_position = ANGLE_30;
     break;
 
     case 6:
-      ui8_motor_rotor_absolute_position = ANGLE_270;
+      ui8_motor_rotor_absolute_position = ANGLE_90;
     break;
 
     case 2:
-      ui8_motor_rotor_absolute_position = ANGLE_330;
+      ui8_motor_rotor_absolute_position = ANGLE_150;
 
       ui8_flag_count_speed = 1;
     break;
@@ -209,6 +267,10 @@ void hall_sensors_read_and_action (void)
   ui8_motor_rotor_position = (uint8_t) (ui8_motor_rotor_absolute_position + ui8_position_correction_value);
   ui8_interpolation_angle = 0;
   ui32_interpolation_sum = 0;
+  ui32_PWM_cycles_counter1 = 0;
+  ui32_last_counter_value = 0;
+
+//  debug_pin_reset ();
 }
 
 // runs every 64us (PWM frequency)
@@ -218,26 +280,32 @@ void motor_fast_loop (void)
   if (ui32_PWM_cycles_counter < PWM_CYCLES_COUNTER_MAX)
   {
     ui32_PWM_cycles_counter++;
+    ui32_PWM_cycles_counter1++;
   }
   else
   {
     ui32_PWM_cycles_counter = 0;
+    ui32_last_counter_value = 0;
+    ui32_PWM_cycles_counter1 = 0;
     ui32_motor_speed_erps = 0;
     ui32_interpolation_angle_step = (SVM_TABLE_LEN_x1024) / PWM_CYCLES_COUNTER_MAX;
     ui32_interpolation_sum = 0;
+    ui32_speed_inverse = 0xffffffff;
   }
 
 #define DO_INTERPOLATION 1 // may be usefull when debugging
 #if DO_INTERPOLATION == 1
   // calculate the interpolation angle
   // interpolation seems a problem when motor starts, so avoid to do it at very low speed
-  if ((ui8_duty_cycle > 10) && (ui32_motor_speed_erps >= 10))
+  if ((ui8_duty_cycle > 10) && (ui32_speed_inverse < 312))
   {
     if (ui8_interpolation_angle < ANGLE_60) // interpolate only for angle <= 60Âº
     {
-      // add step interpolation value to motor_rotor_position
-      ui32_interpolation_sum += ui32_interpolation_angle_step;
-      ui8_interpolation_angle = (uint8_t) (ui32_interpolation_sum >> 10);
+      if (((ui32_PWM_cycles_counter1 - ui32_last_counter_value) << 10) > ui32_interpolation_angle_step)
+      {
+	ui8_interpolation_angle++;
+	ui32_last_counter_value = ui32_PWM_cycles_counter1;
+      }
 
       ui8_motor_rotor_position = (uint8_t) (ui8_motor_rotor_absolute_position + ui8_position_correction_value + ui8_interpolation_angle);
     }
@@ -300,9 +368,9 @@ void apply_duty_cycle (uint8_t ui8_duty_cycle_value)
   }
 
   // set final duty_cycle value
-  TIM1_SetCompare1((uint16_t) (ui8_value_a << 1));
-  TIM1_SetCompare2((uint16_t) (ui8_value_c << 1));
-  TIM1_SetCompare3((uint16_t) (ui8_value_b << 1));
+  TIM1_SetCompare1((uint16_t) (ui8_value_a << 2));
+  TIM1_SetCompare2((uint16_t) (ui8_value_c << 2));
+  TIM1_SetCompare3((uint16_t) (ui8_value_b << 2));
 }
 
 void pwm_init (void)
@@ -312,13 +380,21 @@ void pwm_init (void)
 
   TIM1_TimeBaseInit(0, // TIM1_Prescaler = 0
 		    TIM1_COUNTERMODE_CENTERALIGNED1,
-		    (512 - 1), // clock = 16MHz; counter period = 1024; PWM freq = 16MHz / 1024 = 15.625kHz;
+		    (1024 - 1), // clock = 16MHz; counter period = 1024; PWM freq = 16MHz / 1024 = 15.625kHz;
+//		    (512 - 1), // clock = 16MHz; counter period = 1024; PWM freq = 16MHz / 1024 = 15.625kHz;
 		    //(BUT PWM center aligned mode needs twice the frequency)
-		    1); // will fire the TIM1_IT_UPDATE at every PWM period
+		    0); // will fire the TIM1_IT_UPDATE at every PWM period
+
+//#define DISABLE_PWM_CHANNELS_1_3
 
   TIM1_OC1Init(TIM1_OCMODE_PWM1,
+#ifdef DISABLE_PWM_CHANNELS_1_3
+	       TIM1_OUTPUTSTATE_DISABLE,
+	       TIM1_OUTPUTNSTATE_DISABLE,
+#else
 	       TIM1_OUTPUTSTATE_ENABLE,
 	       TIM1_OUTPUTNSTATE_ENABLE,
+#endif
 	       0, // initial duty_cycle value
 	       TIM1_OCPOLARITY_HIGH,
 	       TIM1_OCNPOLARITY_LOW,
@@ -335,8 +411,13 @@ void pwm_init (void)
 	       TIM1_OCNIDLESTATE_SET);
 
   TIM1_OC3Init(TIM1_OCMODE_PWM1,
+#ifdef DISABLE_PWM_CHANNELS_1_3
+	       TIM1_OUTPUTSTATE_DISABLE,
+	       TIM1_OUTPUTNSTATE_DISABLE,
+#else
 	       TIM1_OUTPUTSTATE_ENABLE,
 	       TIM1_OUTPUTNSTATE_ENABLE,
+#endif
 	       0, // initial duty_cycle value
 	       TIM1_OCPOLARITY_HIGH,
 	       TIM1_OCNPOLARITY_LOW,
@@ -344,15 +425,12 @@ void pwm_init (void)
 	       TIM1_OCNIDLESTATE_SET);
 
   // break, dead time and lock configuration
-  TIM1_BDTRConfig(TIM1_OSSISTATE_DISABLE,
+  TIM1_BDTRConfig(TIM1_OSSISTATE_ENABLE,
 		  TIM1_LOCKLEVEL_OFF,
 		  // hardware nees a dead time of 1us
 		  16, // DTG = 0; dead time in 62.5 ns steps; 1us/62.5ns = 16
-		  // 16 --> 1000ns
-		  // 12 --> 750ns
-		  // 8 --> 500ns
 		  TIM1_BREAK_DISABLE,
-		  TIM1_BREAKPOLARITY_HIGH,
+		  TIM1_BREAKPOLARITY_LOW,
 		  TIM1_AUTOMATICOUTPUT_ENABLE);
 
   TIM1_ITConfig(TIM1_IT_UPDATE, ENABLE);
@@ -434,27 +512,46 @@ int main (void)
   brake_init ();
   while (brake_is_set()) ; // hold here while brake is pressed -- this is a protection for development
   debug_pin_init ();
-  uart_init ();
+//  uart_init ();
   hall_sensor_init ();
   pwm_init ();
   adc_init ();
+
+  ITC_SetSoftwarePriority (ITC_IRQ_ADC1, ITC_PRIORITYLEVEL_1);
+  ITC_SetSoftwarePriority (ITC_IRQ_TIM1_OVF, ITC_PRIORITYLEVEL_2);
+  ITC_SetSoftwarePriority (ITC_IRQ_PORTE, ITC_PRIORITYLEVEL_3);
+
   enableInterrupts();
 
-  TIM1_SetCompare1(126 << 1);
-  TIM1_SetCompare2(126 << 1);
-  TIM1_SetCompare3(126 << 1);
+  TIM1_SetCompare1(126 << 2);
+  TIM1_SetCompare2(126 << 2);
+  TIM1_SetCompare3(126 << 2);
   hall_sensors_read_and_action (); // needed to start the motor
 
   while (1)
   {
 //    static uint16_t c;
-    static uint16_t adc_value;
+    static uint32_t ui32_counter = 0;
     int8_t i8_buffer[64];
     uint8_t ui8_value;
     int objects_readed;
 
-    adc_value = adc_read_throttle ();
-    ui8_duty_cycle = (uint8_t) map (adc_value, ADC_THROTTLE_MIN_VALUE, ADC_THROTTLE_MAX_VALUE, 0, 255);
+//    debug_pin_reset ();
+
+    ui32_counter++;
+    if (ui32_counter > 10000) // 25ms
+    {
+      ui32_counter = 0;
+      while (ui8_adc_total_current_busy_flag) ;
+      ui16_adc_value = (uint16_t) adc_read_throttle ();
+      ui8_duty_cycle = (uint8_t) map (ui16_adc_value, ADC_THROTTLE_MIN_VALUE, ADC_THROTTLE_MAX_VALUE, 0, 255);
+    }
+
+
+
+//    ui8_duty_cycle = 80;
+
+//    apply_duty_cycle (ui8_duty_cycle);
 
 //    c++;
 //    if (c < 43)
diff --git a/main.h b/main.h
index e80e41d..5ce331a 100644
--- a/main.h
+++ b/main.h
@@ -9,16 +9,28 @@
 #ifndef _MAIN_H_
 #define _MAIN_H_
 
-#define Q85 1
-#define MOTOR_TYPE Q85
+#define MOTOR_TYPE_Q85 1
+#define MOTOR_TYPE_EUC2 2
+
+#define MOTOR_TYPE MOTOR_TYPE_EUC2
 
 #define SVM_TABLE_LEN 256
 #define SVM_TABLE_LEN_x1024 262144 //(256 * 1024)
 
-#define ADC_THROTTLE_MIN_VALUE 175
-#define ADC_THROTTLE_MAX_VALUE 730
+#define ADC_THROTTLE_MIN_VALUE 43//175
+#define ADC_THROTTLE_MAX_VALUE 182//730
+
+#define ADC_MOTOR_TOTAL_CURRENT_ZERO_AMPS 81 // 1.59V; 325 (10bits) = 81 (8bits)
+#define ADC_MOTOR_TOTAL_CURRENT_MAX 20 // 20 (8bits) ~ 2 Amps
+#define ADC_MOTOR_TOTAL_CURRENT_MAX_POSITIVE 90 // +2A
+#define ADC_MOTOR_TOTAL_CURRENT_MAX_NEGATIVE 70 // +2A
+
+#if MOTOR_TYPE == MOTOR_TYPE_Q85
+#define MOTOR_ROTOR_DELTA_PHASE_ANGLE_RIGHT (ANGLE_90 + 8)// best value found
+#elif MOTOR_TYPE == MOTOR_TYPE_EUC2
+#define MOTOR_ROTOR_DELTA_PHASE_ANGLE_RIGHT 71 // best value found
+#endif
 
-#define MOTOR_ROTOR_DELTA_PHASE_ANGLE_RIGHT ANGLE_90
 #define PWM_CYCLES_COUNTER_MAX 2560000 //256*10000
 
 #define PWM_VALUE_DUTY_CYCLE_MAX (256 - 1)
@@ -31,6 +43,8 @@
 #define ANGLE_270 192
 #define ANGLE_330 235
 
+#define ANGLE_30 21
+#define ANGLE_45 32
 #define ANGLE_60 43
 
 #endif
diff --git a/motor.c b/motor.c
index f7b2119..3a69e98 100755
--- a/motor.c
+++ b/motor.c
@@ -23,260 +23,260 @@
 uint8_t ui8_svm_table [SVM_TABLE_LEN] =
 {
     131	,
-    136	,
-    140	,
-    145	,
-    150	,
-    154	,
-    159	,
+    137	,
+    142	,
+    147	,
+    153	,
+    158	,
     163	,
-    168	,
-    173	,
-    177	,
-    182	,
-    186	,
-    191	,
+    169	,
+    174	,
+    179	,
+    185	,
+    190	,
     195	,
-    199	,
-    204	,
-    208	,
-    212	,
-    216	,
-    221	,
-    224	,
-    225	,
-    226	,
-    227	,
-    228	,
-    230	,
-    231	,
-    232	,
-    232	,
-    233	,
-    234	,
-    235	,
-    235	,
-    236	,
-    236	,
-    237	,
-    237	,
-    237	,
-    238	,
-    238	,
-    238	,
-    238	,
-    238	,
-    238	,
-    238	,
-    237	,
-    237	,
-    237	,
-    236	,
-    236	,
-    235	,
-    235	,
-    234	,
-    233	,
-    232	,
-    231	,
-    230	,
-    229	,
-    228	,
-    227	,
-    226	,
-    225	,
-    224	,
-    224	,
+    200	,
+    205	,
+    210	,
+    215	,
+    220	,
     225	,
-    227	,
-    228	,
-    229	,
     230	,
-    231	,
-    232	,
-    233	,
-    233	,
-    234	,
     235	,
-    235	,
-    236	,
-    236	,
-    237	,
-    237	,
-    237	,
-    238	,
-    238	,
-    238	,
-    238	,
     238	,
+    240	,
+    241	,
+    243	,
+    244	,
+    245	,
+    246	,
+    247	,
+    248	,
+    249	,
+    250	,
+    251	,
+    252	,
+    252	,
+    253	,
+    253	,
+    254	,
+    254	,
+    254	,
+    255	,
+    255	,
+    255	,
+    255	,
+    255	,
+    254	,
+    254	,
+    254	,
+    253	,
+    253	,
+    252	,
+    252	,
+    251	,
+    250	,
+    249	,
+    248	,
+    247	,
+    246	,
+    245	,
+    244	,
+    242	,
+    241	,
+    240	,
     238	,
+    239	,
+    240	,
+    242	,
+    243	,
+    244	,
+    246	,
+    247	,
+    248	,
+    249	,
+    250	,
+    250	,
+    251	,
+    252	,
+    253	,
+    253	,
+    254	,
+    254	,
+    254	,
+    255	,
+    255	,
+    255	,
+    255	,
+    255	,
+    255	,
+    254	,
+    254	,
+    254	,
+    253	,
+    253	,
+    252	,
+    251	,
+    251	,
+    250	,
+    249	,
+    248	,
+    247	,
+    246	,
+    245	,
+    243	,
+    242	,
+    241	,
+    239	,
     238	,
-    237	,
-    237	,
-    237	,
-    236	,
-    236	,
-    235	,
-    234	,
-    234	,
     233	,
-    232	,
-    231	,
-    230	,
-    229	,
     228	,
-    227	,
-    226	,
-    224	,
     223	,
-    219	,
-    215	,
-    210	,
-    206	,
-    202	,
+    218	,
+    213	,
+    208	,
+    203	,
     198	,
     193	,
-    189	,
-    184	,
-    180	,
-    175	,
-    171	,
-    166	,
-    162	,
-    157	,
-    152	,
-    148	,
-    143	,
-    138	,
+    188	,
+    182	,
+    177	,
+    172	,
+    167	,
+    161	,
+    156	,
+    150	,
+    145	,
+    140	,
     134	,
     129	,
-    124	,
-    119	,
-    115	,
-    110	,
-    105	,
-    101	,
+    123	,
+    118	,
+    113	,
+    107	,
+    102	,
     96	,
-    92	,
-    87	,
-    82	,
-    78	,
-    73	,
-    69	,
-    64	,
-    60	,
-    56	,
-    51	,
-    47	,
-    43	,
+    91	,
+    86	,
+    80	,
+    75	,
+    70	,
+    65	,
+    59	,
+    54	,
+    49	,
+    44	,
     39	,
     34	,
-    31	,
-    30	,
-    29	,
-    28	,
-    27	,
-    25	,
-    24	,
-    23	,
-    23	,
-    22	,
-    21	,
-    20	,
-    20	,
-    19	,
-    19	,
-    18	,
-    18	,
-    18	,
-    17	,
-    17	,
-    17	,
-    17	,
-    17	,
-    17	,
-    17	,
-    18	,
-    18	,
-    18	,
-    19	,
-    19	,
-    20	,
-    20	,
-    21	,
-    22	,
-    23	,
-    24	,
-    25	,
-    26	,
-    27	,
-    28	,
     29	,
-    30	,
-    31	,
-    31	,
-    30	,
-    28	,
-    27	,
-    26	,
     25	,
-    24	,
-    23	,
-    22	,
-    22	,
-    21	,
-    20	,
     20	,
-    19	,
-    19	,
-    18	,
-    18	,
-    18	,
-    17	,
-    17	,
-    17	,
-    17	,
-    17	,
-    17	,
+    16	,
+    15	,
+    13	,
+    12	,
+    11	,
+    9	,
+    8	,
+    7	,
+    6	,
+    5	,
+    4	,
+    4	,
+    3	,
+    2	,
+    2	,
+    1	,
+    1	,
+    0	,
+    0	,
+    0	,
+    0	,
+    0	,
+    0	,
+    0	,
+    0	,
+    0	,
+    1	,
+    1	,
+    2	,
+    2	,
+    3	,
+    4	,
+    4	,
+    5	,
+    6	,
+    7	,
+    8	,
+    9	,
+    11	,
+    12	,
+    13	,
+    15	,
+    16	,
+    16	,
+    14	,
+    13	,
+    11	,
+    10	,
+    9	,
+    8	,
+    7	,
+    6	,
+    5	,
+    4	,
+    3	,
+    3	,
+    2	,
+    1	,
+    1	,
+    1	,
+    0	,
+    0	,
+    0	,
+    0	,
+    0	,
+    0	,
+    0	,
+    0	,
+    0	,
+    1	,
+    1	,
+    2	,
+    2	,
+    3	,
+    4	,
+    5	,
+    6	,
+    7	,
+    8	,
+    9	,
+    10	,
+    11	,
+    12	,
+    14	,
+    15	,
     17	,
-    18	,
-    18	,
-    18	,
-    19	,
-    19	,
-    20	,
-    21	,
-    21	,
     22	,
-    23	,
-    24	,
-    25	,
-    26	,
     27	,
-    28	,
-    29	,
     31	,
-    32	,
     36	,
-    40	,
-    45	,
-    49	,
-    53	,
-    57	,
+    41	,
+    46	,
+    51	,
+    56	,
     62	,
-    66	,
-    71	,
-    75	,
-    80	,
-    84	,
-    89	,
+    67	,
+    72	,
+    77	,
+    83	,
+    88	,
     93	,
-    98	,
-    103	,
-    107	,
-    112	,
-    117	,
-    121	,
+    99	,
+    104	,
+    109	,
+    115	,
+    120	,
     126
 };
 #elif (SVM_TABLE == SINE)
diff --git a/tools/.~lock.BLDC_SPWM_Lookup_tables.ods# b/tools/.~lock.BLDC_SPWM_Lookup_tables.ods#
new file mode 100644
index 0000000..9e5f914
--- /dev/null
+++ b/tools/.~lock.BLDC_SPWM_Lookup_tables.ods#
@@ -0,0 +1 @@
+,cas,cas-sp4,17.06.2017 20:56,file:///home/cas/.config/libreoffice/4;
\ No newline at end of file
diff --git a/tools/BLDC_SPWM_Lookup_tables.ods b/tools/BLDC_SPWM_Lookup_tables.ods
index 226b1d6..c3e74df 100755
Binary files a/tools/BLDC_SPWM_Lookup_tables.ods and b/tools/BLDC_SPWM_Lookup_tables.ods differ
